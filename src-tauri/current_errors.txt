cargo :     Checking storyweaver v0.1.0 
(C:\Users\jjgor\JSG-StoryWeaver\src-tauri)
At line:1 char:1
+ cargo check 2>&1 | Out-File -FilePath current_errors.txt 
-Encoding UT ...
+ ~~~~~~~~~~~~~~~~
    + CategoryInfo          : NotSpecified: (    Checking st.. 
   .aver\src-tauri):String) [], RemoteException
    + FullyQualifiedErrorId : NativeCommandError
 
warning: unused imports: `models::*` and `operations::*`
 --> src\commands\mod.rs:4:33
  |
4 | use crate::database::{get_pool, models::*, operations::*};
  |                                 ^^^^^^^^^  ^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `tauri::State`
 --> src\commands\mod.rs:7:5
  |
7 | use tauri::State;
  |     ^^^^^^^^^^^^

warning: unused import: `Serialize`
 --> src\commands\story_bible.rs:6:26
  |
6 | use serde::{Deserialize, Serialize};
  |                          ^^^^^^^^^

warning: unused import: `crate::commands::CommandResponse`
 --> src\commands\ai_history.rs:3:5
  |
3 | use crate::commands::CommandResponse;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::commands::CommandResponse`
 --> src\commands\ai_writing.rs:3:5
  |
3 | use crate::commands::CommandResponse;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `RewriteStyle`
 --> src\commands\ai_writing.rs:5:47
  |
5 | use crate::ai::{AIProviderManager, AIContext, 
RewriteStyle, TextStream};
  |                                               ^^^^^^^^^^^^

warning: unused import: `Manager`
 --> src\commands\ai_writing.rs:7:29
  |
7 | use tauri::{Emitter, State, Manager, Window};
  |                             ^^^^^^^

warning: unused import: `Serialize`
 --> src\commands\folder_commands.rs:6:26
  |
6 | use serde::{Deserialize, Serialize};
  |                          ^^^^^^^^^

warning: unused import: `Serialize`
 --> src\commands\series_commands.rs:6:26
  |
6 | use serde::{Deserialize, Serialize};
  |                          ^^^^^^^^^

warning: unused import: `Serialize`
 --> src\commands\document_link_commands.rs:6:26
  |
6 | use serde::{Deserialize, Serialize};
  |                          ^^^^^^^^^

warning: unused import: `Serialize`
 --> src\commands\settings_commands.rs:4:26
  |
4 | use serde::{Deserialize, Serialize};
  |                          ^^^^^^^^^

warning: unused import: `crate::commands::CommandResponse`
 --> src\commands\performance_commands.rs:7:5
  |
7 | use crate::commands::CommandResponse;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `Deserialize` and `Serialize`
 --> src\commands\performance_commands.rs:9:13
  |
9 | use serde::{Deserialize, Serialize};
  |             ^^^^^^^^^^^  ^^^^^^^^^

warning: unused import: `tauri::State`
  --> src\commands\performance_commands.rs:10:5
   |
10 | use tauri::State;
   |     ^^^^^^^^^^^^

warning: unused import: `std::sync::Arc`
  --> src\commands\performance_commands.rs:11:5
   |
11 | use std::sync::Arc;
   |     ^^^^^^^^^^^^^^

warning: unused import: `Deserialize`
 --> src\commands\project_preview_commands.rs:6:13
  |
6 | use serde::{Deserialize, Serialize};
  |             ^^^^^^^^^^^

warning: unused imports: `CharacterTemplateTrait` and 
`WorldBuildingTemplateProperty`
 --> src\commands\templates.rs:4:49
  |
4 |     character_template_ops::{CharacterTemplate, 
CharacterTemplateTrait},
  |                                                 
^^^^^^^^^^^^^^^^^^^^^^
5 |     worldbuilding_template_ops::{WorldBuildingTemplate, 
WorldBuildingTemplateProperty}
  |                                                         
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `Deserialize` and `Serialize`
 --> src\commands\templates.rs:9:13
  |
9 | use serde::{Deserialize, Serialize};
  |             ^^^^^^^^^^^  ^^^^^^^^^

warning: unused import: `tauri::State`
  --> src\commands\templates.rs:11:5
   |
11 | use tauri::State;
   |     ^^^^^^^^^^^^

warning: unused imports: `BrainstormCategory` and 
`ImageResolution`
 --> src\commands\advanced_ai_commands.rs:8:85
  |
8 |     AdvancedGenerationResult, BrainstormRequest, 
BrainstormSession, GeneratedImage, ImageResolution,
  |                                                            
                         ^^^^^^^^^^^^^^^
9 |     ProseMode, SaliencyContext, StyleExample, 
VisualizeRequest, BrainstormCategory,
  |                                                            
     ^^^^^^^^^^^^^^^^^^

warning: unused import: `serde_json::Value`
 --> src\commands\collaboration.rs:8:5
  |
8 | use serde_json::Value;
  |     ^^^^^^^^^^^^^^^^^

warning: unused import: `models::plugin::*`
 --> src\commands\plugin.rs:3:33
  |
3 | use crate::database::{get_pool, models::plugin::*, 
operations::plugin::*};
  |                                 ^^^^^^^^^^^^^^^^^

warning: unused import: `models::canvas::*`
 --> src\commands\canvas.rs:3:33
  |
3 | use crate::database::{get_pool, models::canvas::*, 
operations::canvas::*};
  |                                 ^^^^^^^^^^^^^^^^^

warning: unused import: `std::path::PathBuf`
 --> src\database\mod.rs:6:5
  |
6 | use std::path::PathBuf;
  |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `uuid::Uuid`
 --> src\database\operations\background_task_ops.rs:7:5
  |
7 | use uuid::Uuid;
  |     ^^^^^^^^^^

warning: unused import: `serde_json::json`
 --> src\database\operations\performance_metric_ops.rs:7:5
  |
7 | use serde_json::json;
  |     ^^^^^^^^^^^^^^^^

warning: unused import: `uuid::Uuid`
 --> src\database\operations\performance_metric_ops.rs:9:5
  |
9 | use uuid::Uuid;
  |     ^^^^^^^^^^

warning: unused import: `uuid::Uuid`
 --> src\database\operations\character_template_ops.rs:7:5
  |
7 | use uuid::Uuid;
  |     ^^^^^^^^^^

warning: unused import: `deleted_item_ops::*`
  --> src\database\operations\mod.rs:47:9
   |
47 | pub use deleted_item_ops::*;
   |         ^^^^^^^^^^^^^^^^^^^

warning: unused import: `project_ops::*`
  --> src\database\operations\mod.rs:49:9
   |
49 | pub use project_ops::*;
   |         ^^^^^^^^^^^^^^

warning: unused import: `document_ops::*`
  --> src\database\operations\mod.rs:50:9
   |
50 | pub use document_ops::*;
   |         ^^^^^^^^^^^^^^^

warning: unused import: `character_ops::*`
  --> src\database\operations\mod.rs:51:9
   |
51 | pub use character_ops::*;
   |         ^^^^^^^^^^^^^^^^

warning: unused import: `location_ops::*`
  --> src\database\operations\mod.rs:52:9
   |
52 | pub use location_ops::*;
   |         ^^^^^^^^^^^^^^^

warning: unused import: `background_task_ops::*`
  --> src\database\operations\mod.rs:53:9
   |
53 | pub use background_task_ops::*;
   |         ^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `performance_metric_ops::*`
  --> src\database\operations\mod.rs:54:9
   |
54 | pub use performance_metric_ops::*;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `story_bible_ops::*`
  --> src\database\operations\mod.rs:55:9
   |
55 | pub use story_bible_ops::*;
   |         ^^^^^^^^^^^^^^^^^^

warning: unused import: `timeline_ops::*`
  --> src\database\operations\mod.rs:56:9
   |
56 | pub use timeline_ops::*;
   |         ^^^^^^^^^^^^^^^

warning: unused import: `plot_thread_ops::*`
  --> src\database\operations\mod.rs:57:9
   |
57 | pub use plot_thread_ops::*;
   |         ^^^^^^^^^^^^^^^^^^

warning: unused import: `character_trait_ops::*`
  --> src\database\operations\mod.rs:58:9
   |
58 | pub use character_trait_ops::*;
   |         ^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `world_element_ops::*`
  --> src\database\operations\mod.rs:59:9
   |
59 | pub use world_element_ops::*;
   |         ^^^^^^^^^^^^^^^^^^^^

warning: unused import: `outline_ops::*`
  --> src\database\operations\mod.rs:60:9
   |
60 | pub use outline_ops::*;
   |         ^^^^^^^^^^^^^^

warning: unused import: `outline_act_ops::*`
  --> src\database\operations\mod.rs:61:9
   |
61 | pub use outline_act_ops::*;
   |         ^^^^^^^^^^^^^^^^^^

warning: unused import: `scene_ops::*`
  --> src\database\operations\mod.rs:62:9
   |
62 | pub use scene_ops::*;
   |         ^^^^^^^^^^^^

warning: unused import: `series_consistency_ops::*`
  --> src\database\operations\mod.rs:63:9
   |
63 | pub use series_consistency_ops::*;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `style_example_ops::*`
  --> src\database\operations\mod.rs:64:9
   |
64 | pub use style_example_ops::*;
   |         ^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ai_history_ops::*`
  --> src\database\operations\mod.rs:65:9
   |
65 | pub use ai_history_ops::*;
   |         ^^^^^^^^^^^^^^^^^

warning: unused import: `character_template_ops::*`
  --> src\database\operations\mod.rs:67:9
   |
67 | pub use character_template_ops::*;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `worldbuilding_template_ops::*`
  --> src\database\operations\mod.rs:68:9
   |
68 | pub use worldbuilding_template_ops::*;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ai_provider_ops::*`
  --> src\database\operations\mod.rs:71:9
   |
71 | pub use ai_provider_ops::*;
   |         ^^^^^^^^^^^^^^^^^^

warning: unused import: `ai_model_configuration_ops::*`
  --> src\database\operations\mod.rs:72:9
   |
72 | pub use ai_model_configuration_ops::*;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `prose_mode_ops::*`
  --> src\database\operations\mod.rs:73:9
   |
73 | pub use prose_mode_ops::*;
   |         ^^^^^^^^^^^^^^^^^

warning: unused import: `generated_image_ops::*`
  --> src\database\operations\mod.rs:74:9
   |
74 | pub use generated_image_ops::*;
   |         ^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `brainstorm_session_ops::*`
  --> src\database\operations\mod.rs:75:9
   |
75 | pub use brainstorm_session_ops::*;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `credit_usage_ops::*`
  --> src\database\operations\mod.rs:76:9
   |
76 | pub use credit_usage_ops::*;
   |         ^^^^^^^^^^^^^^^^^^^

warning: unused import: `streaming_session_ops::*`
  --> src\database\operations\mod.rs:77:9
   |
77 | pub use streaming_session_ops::*;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `collaboration::*`
  --> src\database\operations\mod.rs:80:9
   |
80 | pub use collaboration::*;
   |         ^^^^^^^^^^^^^^^^

warning: unused import: `plugin::*`
  --> src\database\operations\mod.rs:81:9
   |
81 | pub use plugin::*;
   |         ^^^^^^^^^

warning: unused import: `canvas::*`
  --> src\database\operations\mod.rs:82:9
   |
82 | pub use canvas::*;
   |         ^^^^^^^^^

warning: unused import: `error`
 --> src\database\optimization\index_manager.rs:8:27
  |
8 | use tracing::{info, warn, error};
  |                           ^^^^^

warning: unused import: `ai_card::*`
 --> src\models\mod.rs:6:9
  |
6 | pub use ai_card::*;
  |         ^^^^^^^^^^

warning: unused import: `story_bible::*`
 --> src\models\mod.rs:7:9
  |
7 | pub use story_bible::*;
  |         ^^^^^^^^^^^^^^

warning: unused imports: `RewriteStyle` and `WritingFeature`
 --> src\ai\write_processor.rs:3:36
  |
3 | use super::{AIProvider, AIContext, WritingFeature, 
RewriteStyle};
  |                                    ^^^^^^^^^^^^^^  
^^^^^^^^^^^^

warning: unused import: `document_ops`
 --> src\ai\write_processor.rs:5:35
  |
5 | use crate::database::operations::{document_ops, 
DocumentOps};
  |                                   ^^^^^^^^^^^^

warning: unused import: `Context as AnyhowContext`
 --> src\ai\write_processor.rs:7:22
  |
7 | use anyhow::{Result, Context as AnyhowContext};
  |                      ^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `uuid::Uuid`
 --> src\ai\prose_modes.rs:3:5
  |
3 | use uuid::Uuid;
  |     ^^^^^^^^^^

warning: unused imports: `GenerationSettings` and `TextStream`
  --> src\ai\advanced_ai_manager.rs:6:38
   |
6  |     prose_modes::{ProseModelManager, GenerationSettings, 
ProseMode},
   |                                      ^^^^^^^^^^^^^^^^^^
...
10 |     AIProvider, AIContext, TextStream,
   |                            ^^^^^^^^^^

warning: unused import: `StoryWeaverError`
 --> src\ai\token_counter.rs:6:28
  |
6 | use crate::error::{Result, StoryWeaverError};
  |                            ^^^^^^^^^^^^^^^^

warning: unused import: `tokio::sync::Mutex`
  --> src\ai\mod.rs:22:5
   |
22 | use tokio::sync::Mutex;
   |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `performance_monitor::*`
 --> src\utils\mod.rs:7:9
  |
7 | pub use performance_monitor::*;
  |         ^^^^^^^^^^^^^^^^^^^^^^

warning: unused variable: `tree`
   --> src\commands\documents.rs:181:17
    |
181 |         let mut tree: Vec<DocumentTree> = Vec::new();
    |                 ^^^^ help: if this is intentional, 
prefix it with an underscore: `_tree`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: variable does not need to be mutable
   --> src\commands\documents.rs:181:13
    |
181 |         let mut tree: Vec<DocumentTree> = Vec::new();
    |             ----^^^^
    |             |
    |             help: remove this `mut`
    |
    = note: `#[warn(unused_mut)]` on by default

warning: irrefutable `if let` pattern
   --> src\commands\locations.rs:330:16
    |
330 |             if let (current_type, other_type) = 
(&location.location_type, &other_location.location_type) {
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this pattern will always match, so the `if let` is 
useless
    = help: consider replacing the `if let` with a `let`
    = note: `#[warn(irrefutable_let_patterns)]` on by default

warning: unused variable: `settings`
  --> src\commands\ai_writing.rs:64:85
   |
64 | ...2, cursor_position: usize, settings: WriteSettings) -> 
crate::error::Result<TextStream> {
   |                               ^^^^^^^^ help: if this is 
intentional, prefix it with an underscore: `_settings`

warning: unused variable: `settings`
  --> src\commands\ai_writing.rs:81:82
   |
81 | ...d: i32, user_prompt: &str, settings: WriteSettings) -> 
crate::error::Result<TextStream> {
   |                               ^^^^^^^^ help: if this is 
intentional, prefix it with an underscore: `_settings`

warning: unused variable: `settings`
  --> src\commands\ai_writing.rs:98:78
   |
98 | ...2, cursor_position: usize, settings: WriteSettings) -> 
crate::error::Result<WriteResult> { // Changed return type to 
Result
   |                               ^^^^^^^^ help: if this is 
intentional, prefix it with an underscore: `_settings`

warning: unused variable: `settings`
   --> src\commands\ai_writing.rs:119:75
    |
119 | ...d: i32, user_prompt: &str, settings: WriteSettings) 
-> crate::error::Result<WriteResult> { // Changed return type 
to Result
    |                               ^^^^^^^^ help: if this is 
intentional, prefix it with an underscore: `_settings`

warning: variable does not need to be mutable
   --> src\commands\ai_writing.rs:208:16
    |
208 |             Ok(mut stream) => {
    |                ----^^^^^^
    |                |
    |                help: remove this `mut`

warning: variable does not need to be mutable
   --> src\commands\ai_writing.rs:266:16
    |
266 |             Ok(mut stream) => {
    |                ----^^^^^^
    |                |
    |                help: remove this `mut`

error[E0599]: no function or associated item named 
`delete_version` found for struct `DocumentVersionOps` in the 
current scope
  --> src\commands\version_commands.rs:86:29
   |
86 |         DocumentVersionOps::delete_version(&pool, 
&version_id).await
   |                             ^^^^^^^^^^^^^^ function or 
associated item not found in `DocumentVersionOps`
   |
  ::: src\database\operations\mod.rs:88:1
   |
88 | pub struct DocumentVersionOps;
   | ----------------------------- function or associated item 
`delete_version` not found for this struct
   |
help: there is an associated function `delete_all_versions` 
with a similar name
   |
86 -         DocumentVersionOps::delete_version(&pool, 
&version_id).await
86 +         DocumentVersionOps::delete_all_versions(&pool, 
&version_id).await
   |

warning: unused variable: `app_handle`
  --> src\commands\sync_commands.rs:43:13
   |
43 |         let app_handle = window.app_handle();
   |             ^^^^^^^^^^ help: if this is intentional, 
prefix it with an underscore: `_app_handle`

error[E0308]: mismatched types
  --> src\commands\background_commands.rs:70:5
   |
70 | /     create(
71 | |         task_type,
72 | |         description,
73 | |         priority,
...  |
80 | |     .await
81 | |     .map_err(|e| e.into())
   | |__________________________^ expected 
`Result<CommandResponse<String>, ...>`, found `Result<String, 
_>`
   |
   = note: expected enum 
`std::result::Result<CommandResponse<std::string::String>, 
StoryWeaverError>`
              found enum 
`std::result::Result<std::string::String, _>`

error[E0308]: mismatched types
  --> src\commands\background_commands.rs:93:5
   |
93 |     get(task_id).await.map_err(|e| e.into())
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected 
`Result<CommandResponse<...>, ...>`, found 
`Result<TaskResponse, _>`
   |
   = note: expected enum 
`std::result::Result<CommandResponse<TaskResponse>, 
StoryWeaverError>`
              found enum `std::result::Result<TaskResponse, _>`

error[E0308]: mismatched types
   --> src\commands\background_commands.rs:105:5
    |
105 |     get_all().await.map_err(|e| e.into())
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected 
`Result<CommandResponse<Vec<...>>, ...>`, found 
`Result<Vec<TaskResponse>, _>`
    |
    = note: expected enum 
`std::result::Result<CommandResponse<Vec<_>>, 
StoryWeaverError>`
               found enum `std::result::Result<Vec<_>, _>`

error[E0308]: mismatched types
   --> src\commands\background_commands.rs:128:5
    |
128 |     get_by_status(status).await.map_err(|e| e.into())
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 
expected `Result<CommandResponse<Vec<...>>, ...>`, found 
`Result<Vec<TaskResponse>, _>`
    |
    = note: expected enum 
`std::result::Result<CommandResponse<Vec<_>>, 
StoryWeaverError>`
               found enum `std::result::Result<Vec<_>, _>`

error[E0308]: mismatched types
   --> src\commands\background_commands.rs:140:5
    |
140 |     get_by_project(project_id).await.map_err(|e| 
e.into())
    |     
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 
expected `Result<CommandResponse<Vec<...>>, ...>`, found 
`Result<Vec<TaskResponse>, _>`
    |
    = note: expected enum 
`std::result::Result<CommandResponse<Vec<_>>, 
StoryWeaverError>`
               found enum `std::result::Result<Vec<_>, _>`

error[E0308]: mismatched types
   --> src\commands\background_commands.rs:152:5
    |
152 |     get_by_document(document_id).await.map_err(|e| 
e.into())
    |     
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 
expected `Result<CommandResponse<Vec<...>>, ...>`, found 
`Result<Vec<TaskResponse>, _>`
    |
    = note: expected enum 
`std::result::Result<CommandResponse<Vec<_>>, 
StoryWeaverError>`
               found enum `std::result::Result<Vec<_>, _>`

error[E0308]: mismatched types
   --> src\commands\background_commands.rs:166:5
    |
166 |     cancel(task_id, &task_manager).await.map_err(|e| 
e.into())
    |     
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 
expected `Result<CommandResponse<bool>, ...>`, found 
`Result<bool, _>`
    |
    = note: expected enum 
`std::result::Result<CommandResponse<bool>, StoryWeaverError>`
               found enum `std::result::Result<bool, _>`

error[E0308]: mismatched types
   --> src\commands\background_commands.rs:163:12
    |
163 |         Ok(cancelled)
    |         -- ^^^^^^^^^ expected `bool`, found `()`
    |         |
    |         arguments to this enum variant are incorrect
    |
help: the type constructed contains `()` due to the type of 
the argument passed
   --> src\commands\background_commands.rs:163:9
    |
163 |         Ok(cancelled)
    |         ^^^---------^
    |            |
    |            this argument influences the type of `Ok`
note: tuple variant defined here
   --> C:\Users\jjgor\.rustup\toolchains\stable-x86_64-pc-windo
ws-msvc\lib/rustlib/src/rust\library\core\src\result.rs:552:5
    |
552 |     Ok(#[stable(feature = "rust1", since = "1.0.0")] T),
    |     ^^

error[E0308]: mismatched types
   --> src\commands\background_commands.rs:178:5
    |
178 |     cleanup(days).await.map_err(|e| e.into())
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected 
`Result<CommandResponse<usize>, ...>`, found `Result<usize, _>`
    |
    = note: expected enum 
`std::result::Result<CommandResponse<usize>, StoryWeaverError>`
               found enum `std::result::Result<usize, _>`

error[E0599]: `NaiveDateTime` is not an iterator
   --> src\commands\project_preview_commands.rs:105:40
    |
105 |             updated_at: row.updated_at.map(|dt| 
DateTime::<Utc>::from_naive_utc_and_offset(dt, 
Utc)).unwrap_or_else(|| Utc::now()),
    |                                        ^^^ 
`NaiveDateTime` is not an iterator
    |
   ::: C:\Users\jjgor\.cargo\registry\src\index.crates.io-1949c
f8c6b5b557f\chrono-0.4.41\src\naive\datetime\mod.rs:76:1
    |
76  | pub struct NaiveDateTime {
    | ------------------------ doesn't satisfy `NaiveDateTime: 
Iterator`
    |
    = note: the following trait bounds were not satisfied:
            `NaiveDateTime: Iterator`
            which is required by `&mut NaiveDateTime: Iterator`

warning: unused variable: `project_id`
  --> src\commands\templates.rs:55:9
   |
55 |         project_id: String,
   |         ^^^^^^^^^^ help: if this is intentional, prefix 
it with an underscore: `_project_id`

warning: unused variable: `name`
  --> src\commands\templates.rs:56:9
   |
56 |         name: String,
   |         ^^^^ help: if this is intentional, prefix it with 
an underscore: `_name`

warning: unused variable: `description`
  --> src\commands\templates.rs:57:9
   |
57 |         description: Option<String>,
   |         ^^^^^^^^^^^ help: if this is intentional, prefix 
it with an underscore: `_description`

error[E0308]: mismatched types
   --> src\commands\advanced_ai_commands.rs:143:23
    |
143 |     generate(request, 
ai_state.inner().clone()).await.into()
    |     --------          ^^^^^^^^^^^^^^^^^^^^^^^^ expected 
`Mutex<AdvancedAIManager>`, found `&Mutex<AdvancedAIManager>`
    |     |
    |     arguments to this function are incorrect
    |
    = note: expected struct `tauri::async_runtime::Mutex<_>`
            found reference `&tauri::async_runtime::Mutex<_>`
note: `tauri::async_runtime::Mutex<AdvancedAIManager>` does 
not implement `Clone`, so 
`&tauri::async_runtime::Mutex<AdvancedAIManager>` was cloned 
instead
   --> src\commands\advanced_ai_commands.rs:143:23
    |
143 |     generate(request, 
ai_state.inner().clone()).await.into()
    |                       ^^^^^^^^^^^^^^^^
note: function defined here
   --> src\commands\advanced_ai_commands.rs:119:14
    |
119 |     async fn generate(
    |              ^^^^^^^^
120 |         request: ProseGenerationRequest,
121 |         ai_state: AdvancedAIState,
    |         -------------------------

error[E0308]: mismatched types
   --> src\commands\advanced_ai_commands.rs:139:64
    |
139 |             
.generate_with_advanced_features(advanced_request, 
request.story_bible)
    |              -------------------------------             
      ^^^^^^^^^^^^^^^^^^^ expected 
`saliency_engine::StoryBibleElements`, found 
`models::story_bible::StoryBibleElements`
    |              |
    |              arguments to this method are incorrect
    |
    = note: `models::story_bible::StoryBibleElements` and 
`saliency_engine::StoryBibleElements` have similar names, but 
are actually distinct types
note: `models::story_bible::StoryBibleElements` is defined in 
module `crate::models::story_bible` of the current crate
   --> src\models\story_bible.rs:28:1
    |
28  | pub struct StoryBibleElements {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: `saliency_engine::StoryBibleElements` is defined in 
module `crate::ai::saliency_engine` of the current crate
   --> src\ai\saliency_engine.rs:389:1
    |
389 | pub struct StoryBibleElements {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: method defined here
   --> src\ai\advanced_ai_manager.rs:157:18
    |
157 |     pub async fn generate_with_advanced_features(
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
160 |         story_bible: Option<StoryBibleElements>,
    |         ---------------------------------------

error[E0308]: mismatched types
   --> src\commands\advanced_ai_commands.rs:138:9
    |
138 | /         ai_manager
139 | |             
.generate_with_advanced_features(advanced_request, 
request.story_bible)
140 | |             .await
    | |__________________^ expected `StoryWeaverError`, found 
`Box<dyn StdError>`
    |
    = note: expected enum `std::result::Result<_, 
StoryWeaverError>`
               found enum `std::result::Result<_, Box<dyn 
StdError>>`

error[E0308]: mismatched types
   --> src\commands\advanced_ai_commands.rs:175:23
    |
175 |     generate(request, 
ai_state.inner().clone()).await.into()
    |     --------          ^^^^^^^^^^^^^^^^^^^^^^^^ expected 
`Mutex<AdvancedAIManager>`, found `&Mutex<AdvancedAIManager>`
    |     |
    |     arguments to this function are incorrect
    |
    = note: expected struct `tauri::async_runtime::Mutex<_>`
            found reference `&tauri::async_runtime::Mutex<_>`
note: `tauri::async_runtime::Mutex<AdvancedAIManager>` does 
not implement `Clone`, so 
`&tauri::async_runtime::Mutex<AdvancedAIManager>` was cloned 
instead
   --> src\commands\advanced_ai_commands.rs:175:23
    |
175 |     generate(request, 
ai_state.inner().clone()).await.into()
    |                       ^^^^^^^^^^^^^^^^
note: function defined here
   --> src\commands\advanced_ai_commands.rs:152:14
    |
152 |     async fn generate(
    |              ^^^^^^^^
153 |         request: ImageGenerationRequest,
154 |         ai_state: AdvancedAIState,
    |         -------------------------

error[E0560]: struct `VisualizeRequest` has no field named 
`custom_prompt`
   --> src\commands\advanced_ai_commands.rs:169:13
    |
169 |             custom_prompt: request.custom_prompt,
    |             ^^^^^^^^^^^^^ `VisualizeRequest` does not 
have this field
    |
    = note: all struct fields are already assigned

error[E0308]: mismatched types
   --> src\commands\advanced_ai_commands.rs:172:9
    |
172 |         
ai_manager.generate_image(visualize_request).await
    |         
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected 
`Result<GeneratedImage, StoryWeaverError>`, found 
`Result<GeneratedImage, Box<dyn Error>>`
    |
    = note: expected enum `std::result::Result<_, 
StoryWeaverError>`
               found enum `std::result::Result<_, Box<dyn 
StdError>>`

error[E0308]: mismatched types
   --> src\commands\advanced_ai_commands.rs:206:21
    |
206 |     create(request, 
ai_state.inner().clone()).await.into()
    |     ------          ^^^^^^^^^^^^^^^^^^^^^^^^ expected 
`Mutex<AdvancedAIManager>`, found `&Mutex<AdvancedAIManager>`
    |     |
    |     arguments to this function are incorrect
    |
    = note: expected struct `tauri::async_runtime::Mutex<_>`
            found reference `&tauri::async_runtime::Mutex<_>`
note: `tauri::async_runtime::Mutex<AdvancedAIManager>` does 
not implement `Clone`, so 
`&tauri::async_runtime::Mutex<AdvancedAIManager>` was cloned 
instead
   --> src\commands\advanced_ai_commands.rs:206:21
    |
206 |     create(request, 
ai_state.inner().clone()).await.into()
    |                     ^^^^^^^^^^^^^^^^
note: function defined here
   --> src\commands\advanced_ai_commands.rs:184:14
    |
184 |     async fn create(
    |              ^^^^^^
185 |         request: BrainstormSessionRequest,
186 |         ai_state: AdvancedAIState,
    |         -------------------------

error[E0560]: struct `BrainstormRequest` has no field named 
`constraints`
   --> src\commands\advanced_ai_commands.rs:198:13
    |
198 |             constraints: request.constraints,
    |             ^^^^^^^^^^^ `BrainstormRequest` does not 
have this field
    |
    = note: all struct fields are already assigned

error[E0308]: mismatched types
   --> src\commands\advanced_ai_commands.rs:201:9
    |
201 | /         ai_manager
202 | |             
.create_brainstorm_session(brainstorm_request)
203 | |             .await
    | |__________________^ expected `Result<String, 
StoryWeaverError>`, found `Result<String, Box<dyn Error>>`
    |
    = note: expected enum `std::result::Result<_, 
StoryWeaverError>`
               found enum `std::result::Result<_, Box<dyn 
StdError>>`

error[E0308]: mismatched types
   --> src\commands\advanced_ai_commands.rs:223:21
    |
223 |     get(session_id, 
ai_state.inner().clone()).await.into()
    |     ---             ^^^^^^^^^^^^^^^^^^^^^^^^ expected 
`Mutex<AdvancedAIManager>`, found `&Mutex<AdvancedAIManager>`
    |     |
    |     arguments to this function are incorrect
    |
    = note: expected struct `tauri::async_runtime::Mutex<_>`
            found reference `&tauri::async_runtime::Mutex<_>`
note: `tauri::async_runtime::Mutex<AdvancedAIManager>` does 
not implement `Clone`, so 
`&tauri::async_runtime::Mutex<AdvancedAIManager>` was cloned 
instead
   --> src\commands\advanced_ai_commands.rs:223:21
    |
223 |     get(session_id, 
ai_state.inner().clone()).await.into()
    |                     ^^^^^^^^^^^^^^^^
note: function defined here
   --> src\commands\advanced_ai_commands.rs:214:14
    |
214 |     async fn get(
    |              ^^^
215 |         session_id: String,
216 |         ai_state: AdvancedAIState,
    |         -------------------------

error[E0308]: mismatched types
   --> src\commands\advanced_ai_commands.rs:220:12
    |
220 |         
Ok(ai_manager.get_brainstorm_session(&session_id))
    |         -- 
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected 
`Option<BrainstormSession>`, found `Option<&BrainstormSession>`
    |         |
    |         arguments to this enum variant are incorrect
    |
    = note: expected enum 
`std::option::Option<brainstorm::BrainstormSession>`
               found enum 
`std::option::Option<&brainstorm::BrainstormSession>`
help: the type constructed contains 
`std::option::Option<&brainstorm::BrainstormSession>` due to 
the type of the argument passed
   --> src\commands\advanced_ai_commands.rs:220:9
    |
220 |         
Ok(ai_manager.get_brainstorm_session(&session_id))
    |         
^^^----------------------------------------------^
    |            |
    |            this argument influences the type of `Ok`
note: tuple variant defined here
   --> C:\Users\jjgor\.rustup\toolchains\stable-x86_64-pc-windo
ws-msvc\lib/rustlib/src/rust\library\core\src\result.rs:552:5
    |
552 |     Ok(#[stable(feature = "rust1", since = "1.0.0")] T),
    |     ^^
help: use `std::option::Option::cloned` to clone the value 
inside the `std::option::Option`
    |
220 |         
Ok(ai_manager.get_brainstorm_session(&session_id).cloned())
    |                                                          
+++++++++

error[E0308]: mismatched types
   --> src\commands\advanced_ai_commands.rs:243:39
    |
243 |     rate(session_id, idea_id, rating, 
ai_state.inner().clone())
    |     ----                              
^^^^^^^^^^^^^^^^^^^^^^^^ expected `Mutex<AdvancedAIManager>`, 
found `&Mutex<AdvancedAIManager>`
    |     |
    |     arguments to this function are incorrect
    |
    = note: expected struct `tauri::async_runtime::Mutex<_>`
            found reference `&tauri::async_runtime::Mutex<_>`
note: `tauri::async_runtime::Mutex<AdvancedAIManager>` does 
not implement `Clone`, so 
`&tauri::async_runtime::Mutex<AdvancedAIManager>` was cloned 
instead
   --> src\commands\advanced_ai_commands.rs:243:39
    |
243 |     rate(session_id, idea_id, rating, 
ai_state.inner().clone())
    |                                       ^^^^^^^^^^^^^^^^
note: function defined here
   --> src\commands\advanced_ai_commands.rs:233:14
    |
233 |     async fn rate(
    |              ^^^^
...
237 |         ai_state: AdvancedAIState,
    |         -------------------------

error[E0308]: mismatched types
   --> src\commands\advanced_ai_commands.rs:240:9
    |
238 |     ) -> Result<(), StoryWeaverError> {
    |          ---------------------------- expected 
`std::result::Result<(), StoryWeaverError>` because of return 
type
239 |         let mut ai_manager = ai_state.lock().await;
240 |         ai_manager.rate_brainstorm_idea(&session_id, 
&idea_id, rating)
    |         
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 
expected `Result<(), StoryWeaverError>`, found `Result<(), 
Box<dyn Error>>`
    |
    = note: expected enum `std::result::Result<_, 
StoryWeaverError>`
               found enum `std::result::Result<_, Box<(dyn 
StdError + 'static)>>`

error[E0308]: mismatched types
   --> src\commands\advanced_ai_commands.rs:265:42
    |
265 |     mark(session_id, idea_id, is_keeper, 
ai_state.inner().clone())
    |     ----                                 
^^^^^^^^^^^^^^^^^^^^^^^^ expected `Mutex<AdvancedAIManager>`, 
found `&Mutex<AdvancedAIManager>`
    |     |
    |     arguments to this function are incorrect
    |
    = note: expected struct `tauri::async_runtime::Mutex<_>`
            found reference `&tauri::async_runtime::Mutex<_>`
note: `tauri::async_runtime::Mutex<AdvancedAIManager>` does 
not implement `Clone`, so 
`&tauri::async_runtime::Mutex<AdvancedAIManager>` was cloned 
instead
   --> src\commands\advanced_ai_commands.rs:265:42
    |
265 |     mark(session_id, idea_id, is_keeper, 
ai_state.inner().clone())
    |                                          ^^^^^^^^^^^^^^^^
note: function defined here
   --> src\commands\advanced_ai_commands.rs:255:14
    |
255 |     async fn mark(
    |              ^^^^
...
259 |         ai_state: AdvancedAIState,
    |         -------------------------

error[E0308]: mismatched types
   --> src\commands\advanced_ai_commands.rs:262:9
    |
260 |     ) -> Result<(), StoryWeaverError> {
    |          ---------------------------- expected 
`std::result::Result<(), StoryWeaverError>` because of return 
type
261 |         let mut ai_manager = ai_state.lock().await;
262 |         ai_manager.mark_idea_as_keeper(&session_id, 
&idea_id, is_keeper)
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
^^^^^^^^^^^^^^^ expected `Result<(), StoryWeaverError>`, found 
`Result<(), Box<dyn Error>>`
    |
    = note: expected enum `std::result::Result<_, 
StoryWeaverError>`
               found enum `std::result::Result<_, Box<(dyn 
StdError + 'static)>>`

error[E0308]: mismatched types
   --> src\commands\advanced_ai_commands.rs:297:18
    |
297 |     add(request, ai_state.inner().clone()).await.into()
    |     ---          ^^^^^^^^^^^^^^^^^^^^^^^^ expected 
`Mutex<AdvancedAIManager>`, found `&Mutex<AdvancedAIManager>`
    |     |
    |     arguments to this function are incorrect
    |
    = note: expected struct `tauri::async_runtime::Mutex<_>`
            found reference `&tauri::async_runtime::Mutex<_>`
note: `tauri::async_runtime::Mutex<AdvancedAIManager>` does 
not implement `Clone`, so 
`&tauri::async_runtime::Mutex<AdvancedAIManager>` was cloned 
instead
   --> src\commands\advanced_ai_commands.rs:297:18
    |
297 |     add(request, ai_state.inner().clone()).await.into()
    |                  ^^^^^^^^^^^^^^^^
note: function defined here
   --> src\commands\advanced_ai_commands.rs:276:14
    |
276 |     async fn add(
    |              ^^^
277 |         request: StyleExampleRequest,
278 |         ai_state: AdvancedAIState,
    |         -------------------------

error[E0277]: `StyleAnalysis` is not a future
   --> src\commands\advanced_ai_commands.rs:288:78
    |
288 |             analysis_result: 
Some(ai_manager.analyze_style(&request.content).await?),
    |                                                          
                   -^^^^^
    |                                                          
                   ||
    |                                                          
                   |`StyleAnalysis` is not a future
    |                                                          
                   help: remove the `.await`
    |
    = help: the trait `futures_util::Future` is not 
implemented for `StyleAnalysis`
    = note: StyleAnalysis must be a future or must implement 
`IntoFuture` to be awaited
    = note: required for `StyleAnalysis` to implement 
`std::future::IntoFuture`

error[E0277]: `()` is not a future
   --> src\commands\advanced_ai_commands.rs:292:61
    |
292 |         
ai_manager.add_style_example(style_example.clone()).await;
    |                                                          
  -^^^^^
    |                                                          
  ||
    |                                                          
  |`()` is not a future
    |                                                          
  help: remove the `.await`
    |
    = help: the trait `futures_util::Future` is not 
implemented for `()`
    = note: () must be a future or must implement `IntoFuture` 
to be awaited
    = note: required for `()` to implement 
`std::future::IntoFuture`

error[E0277]: `StyleAnalysis` is not a future
   --> src\commands\advanced_ai_commands.rs:307:40
    |
307 |     ai_manager.analyze_style(&content).await
    |                                       -^^^^^
    |                                       ||
    |                                       |`StyleAnalysis` 
is not a future
    |                                       help: remove the 
`.await`
    |
    = help: the trait `futures_util::Future` is not 
implemented for `StyleAnalysis`
    = note: StyleAnalysis must be a future or must implement 
`IntoFuture` to be awaited
    = note: required for `StyleAnalysis` to implement 
`std::future::IntoFuture`

error[E0277]: `i32` is not a future
   --> src\commands\advanced_ai_commands.rs:341:66
    |
341 |     let project_usage = 
ai_manager.get_credit_usage(&project_id).await;
    |                                                          
       -^^^^^
    |                                                          
       ||
    |                                                          
       |`i32` is not a future
    |                                                          
       help: remove the `.await`
    |
    = help: the trait `futures_util::Future` is not 
implemented for `i32`
    = note: i32 must be a future or must implement 
`IntoFuture` to be awaited
    = note: required for `i32` to implement 
`std::future::IntoFuture`

error[E0308]: mismatched types
   --> src\commands\advanced_ai_commands.rs:361:5
    |
361 |     ai_manager.get_generated_images(&project_id).await
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 
expected `Result<Vec<GeneratedImage>, ...>`, found 
`Result<Vec<GeneratedImage>, Box<...>>`
    |
    = note: expected enum `std::result::Result<_, 
StoryWeaverError>`
               found enum `std::result::Result<_, Box<dyn 
StdError>>`

error[E0308]: mismatched types
   --> src\commands\advanced_ai_commands.rs:371:5
    |
371 |     ai_manager.delete_generated_image(&image_id).await
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 
expected `Result<(), StoryWeaverError>`, found `Result<(), 
Box<dyn Error>>`
    |
    = note: expected enum `std::result::Result<_, 
StoryWeaverError>`
               found enum `std::result::Result<_, Box<dyn 
StdError>>`

error[E0308]: mismatched types
   --> src\commands\advanced_ai_commands.rs:385:61
    |
385 |         .build_saliency_context(&project_id, 
&text_context, story_bible)
    |          ----------------------                          
   ^^^^^^^^^^^ expected `saliency_engine::StoryBibleElements`, 
found `models::story_bible::StoryBibleElements`
    |          |
    |          arguments to this method are incorrect
    |
    = note: `models::story_bible::StoryBibleElements` and 
`saliency_engine::StoryBibleElements` have similar names, but 
are actually distinct types
note: `models::story_bible::StoryBibleElements` is defined in 
module `crate::models::story_bible` of the current crate
   --> src\models\story_bible.rs:28:1
    |
28  | pub struct StoryBibleElements {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: `saliency_engine::StoryBibleElements` is defined in 
module `crate::ai::saliency_engine` of the current crate
   --> src\ai\saliency_engine.rs:389:1
    |
389 | pub struct StoryBibleElements {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: method defined here
   --> src\ai\advanced_ai_manager.rs:619:18
    |
619 |     pub async fn build_saliency_context(
    |                  ^^^^^^^^^^^^^^^^^^^^^^
...
623 |         story_bible: StoryBibleElements,
    |         -------------------------------

error[E0308]: mismatched types
   --> src\commands\advanced_ai_commands.rs:384:5
    |
384 | /     ai_manager
385 | |         .build_saliency_context(&project_id, 
&text_context, story_bible)
386 | |         .await
    | |______________^ expected `Result<SaliencyContext, 
...>`, found `Result<SaliencyContext, Box<dyn Error>>`
    |
    = note: expected enum `std::result::Result<_, 
StoryWeaverError>`
               found enum `std::result::Result<_, Box<dyn 
StdError>>`

error[E0308]: mismatched types
   --> src\commands\advanced_ai_commands.rs:400:5
    |
400 | /     ai_manager
401 | |         .analyze_content_for_import(&project_id, 
&content, &content_type)
402 | |         .await
    | |______________^ expected `StoryWeaverError`, found 
`Box<dyn StdError>`
    |
    = note: expected enum `std::result::Result<_, 
StoryWeaverError>`
               found enum `std::result::Result<_, Box<dyn 
StdError>>`

error[E0308]: mismatched types
   --> src\commands\advanced_ai_commands.rs:425:55
    |
425 |         .start_streaming_generation(advanced_request, 
request.story_bible)
    |          --------------------------                   
^^^^^^^^^^^^^^^^^^^ expected 
`saliency_engine::StoryBibleElements`, found 
`models::story_bible::StoryBibleElements`
    |          |
    |          arguments to this method are incorrect
    |
    = note: `models::story_bible::StoryBibleElements` and 
`saliency_engine::StoryBibleElements` have similar names, but 
are actually distinct types
note: `models::story_bible::StoryBibleElements` is defined in 
module `crate::models::story_bible` of the current crate
   --> src\models\story_bible.rs:28:1
    |
28  | pub struct StoryBibleElements {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: `saliency_engine::StoryBibleElements` is defined in 
module `crate::ai::saliency_engine` of the current crate
   --> src\ai\saliency_engine.rs:389:1
    |
389 | pub struct StoryBibleElements {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: method defined here
   --> src\ai\advanced_ai_manager.rs:628:18
    |
628 |     pub async fn start_streaming_generation(
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
...
631 |         story_bible: Option<StoryBibleElements>,
    |         ---------------------------------------

error[E0308]: mismatched types
   --> src\commands\advanced_ai_commands.rs:424:5
    |
424 | /     ai_manager
425 | |         .start_streaming_generation(advanced_request, 
request.story_bible)
426 | |         .await
    | |______________^ expected `Result<String, 
StoryWeaverError>`, found `Result<String, Box<dyn Error>>`
    |
    = note: expected enum `std::result::Result<_, 
StoryWeaverError>`
               found enum `std::result::Result<_, Box<dyn 
StdError>>`

error[E0308]: mismatched types
   --> src\commands\advanced_ai_commands.rs:435:5
    |
435 |     ai_manager.get_stream_status(&stream_id).await
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 
expected `Result<HashMap<String, Value>, ...>`, found 
`Result<HashMap<String, Value>, Box<...>>`
    |
    = note: expected enum `std::result::Result<_, 
StoryWeaverError>`
               found enum `std::result::Result<_, Box<dyn 
StdError>>`

error[E0107]: type alias takes 1 generic argument but 2 
generic arguments were supplied
   --> src\commands\collaboration.rs:210:6
    |
210 | ) -> Result<Option<CollaborationSession>, 
StoryWeaverError> {
    |      ^^^^^^ expected 1 generic argument 
------------------ help: remove the unnecessary generic 
argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> src\error.rs:425:10
    |
425 | pub type Result<T> = std::result::Result<T, 
StoryWeaverError>;
    |          ^^^^^^ -

error[E0107]: type alias takes 1 generic argument but 2 
generic arguments were supplied
   --> src\commands\collaboration.rs:243:6
    |
243 | ) -> Result<(), StoryWeaverError> {
    |      ^^^^^^   ------------------ help: remove the 
unnecessary generic argument
    |      |
    |      expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> src\error.rs:425:10
    |
425 | pub type Result<T> = std::result::Result<T, 
StoryWeaverError>;
    |          ^^^^^^ -

error[E0533]: expected value, found struct variant 
`StoryWeaverError::InvalidInput`
  --> src\commands\collaboration.rs:27:25
   |
27 |         _ => return 
Err(StoryWeaverError::InvalidInput("Invalid share 
type".to_string())),
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 
not a value
   |
help: you might have meant to create a new value of the struct
   |
27 -         _ => return 
Err(StoryWeaverError::InvalidInput("Invalid share 
type".to_string())),
27 +         _ => return Err(StoryWeaverError::InvalidInput { 
message: /* value */ }),
   |

error[E0277]: the trait bound `std::string::String: 
From<sqlx::Error>` is not satisfied
   --> src\commands\collaboration.rs:40:5
    |
40  | /     create_shared_document(
41  | |         &pool,
42  | |         &document_id,
43  | |         &project_id,
...   |
48  | |     .await
49  | |     .map_err(StoryWeaverError::database)
    | |________________________________________^ the trait 
`From<sqlx::Error>` is not implemented for 
`std::string::String`
    |
    = help: the following other types implement trait 
`From<T>`:
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements 
`From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<AssetKey>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, 
str>>`
              `std::string::String` implements `From<Uuid>`
              `std::string::String` implements `From<char>`
            and 8 others
    = note: required for `sqlx::Error` to implement 
`Into<std::string::String>`
note: required by a bound in `StoryWeaverError::database`
   --> src\error.rs:213:24
    |
213 |     pub fn database<S: Into<String>>(message: S) -> Self 
{
    |                        ^^^^^^^^^^^^ required by this 
bound in `StoryWeaverError::database`

error[E0277]: the trait bound `std::string::String: 
From<sqlx::Error>` is not satisfied
   --> src\commands\collaboration.rs:49:14
    |
49  |     .map_err(StoryWeaverError::database)
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait 
`From<sqlx::Error>` is not implemented for 
`std::string::String`
    |
    = help: the following other types implement trait 
`From<T>`:
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements 
`From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<AssetKey>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, 
str>>`
              `std::string::String` implements `From<Uuid>`
              `std::string::String` implements `From<char>`
            and 8 others
    = note: required for `sqlx::Error` to implement 
`Into<std::string::String>`
note: required by a bound in `StoryWeaverError::database`
   --> src\error.rs:213:24
    |
213 |     pub fn database<S: Into<String>>(message: S) -> Self 
{
    |                        ^^^^^^^^^^^^ required by this 
bound in `StoryWeaverError::database`

error[E0277]: the trait bound `std::string::String: 
From<sqlx::Error>` is not satisfied
   --> src\commands\collaboration.rs:60:22
    |
60  |       let shared_doc = 
get_shared_document_by_token(&pool, &token)
    |  ______________________^
61  | |         .await
62  | |         .map_err(StoryWeaverError::database)?;
    | |____________________________________________^ the trait 
`From<sqlx::Error>` is not implemented for 
`std::string::String`
    |
    = help: the following other types implement trait 
`From<T>`:
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements 
`From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<AssetKey>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, 
str>>`
              `std::string::String` implements `From<Uuid>`
              `std::string::String` implements `From<char>`
            and 8 others
    = note: required for `sqlx::Error` to implement 
`Into<std::string::String>`
note: required by a bound in `StoryWeaverError::database`
   --> src\error.rs:213:24
    |
213 |     pub fn database<S: Into<String>>(message: S) -> Self 
{
    |                        ^^^^^^^^^^^^ required by this 
bound in `StoryWeaverError::database`

error[E0277]: the trait bound `std::string::String: 
From<sqlx::Error>` is not satisfied
   --> src\commands\collaboration.rs:62:18
    |
62  |         .map_err(StoryWeaverError::database)?;
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait 
`From<sqlx::Error>` is not implemented for 
`std::string::String`
    |
    = help: the following other types implement trait 
`From<T>`:
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements 
`From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<AssetKey>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, 
str>>`
              `std::string::String` implements `From<Uuid>`
              `std::string::String` implements `From<char>`
            and 8 others
    = note: required for `sqlx::Error` to implement 
`Into<std::string::String>`
note: required by a bound in `StoryWeaverError::database`
   --> src\error.rs:213:24
    |
213 |     pub fn database<S: Into<String>>(message: S) -> Self 
{
    |                        ^^^^^^^^^^^^ required by this 
bound in `StoryWeaverError::database`

error[E0533]: expected value, found struct variant 
`StoryWeaverError::InvalidInput`
  --> src\commands\collaboration.rs:82:28
   |
82 |                 return 
Err(StoryWeaverError::InvalidInput("Share link has 
expired".to_string()));
   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 
not a value
   |
help: you might have meant to create a new value of the struct
   |
82 -                 return 
Err(StoryWeaverError::InvalidInput("Share link has 
expired".to_string()));
82 +                 return Err(StoryWeaverError::InvalidInput 
{ message: /* value */ });
   |

error[E0533]: expected value, found struct variant 
`StoryWeaverError::InvalidInput`
  --> src\commands\collaboration.rs:89:28
   |
89 |                 return 
Err(StoryWeaverError::InvalidInput("Share link usage limit 
exceeded".to_string()));
   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 
not a value
   |
help: you might have meant to create a new value of the struct
   |
89 -                 return 
Err(StoryWeaverError::InvalidInput("Share link usage limit 
exceeded".to_string()));
89 +                 return Err(StoryWeaverError::InvalidInput 
{ message: /* value */ });
   |

error[E0277]: the trait bound `std::string::String: 
From<sqlx::Error>` is not satisfied
   --> src\commands\collaboration.rs:94:9
    |
94  | /         increment_share_usage(&pool, doc.id)
95  | |             .await
96  | |             .map_err(StoryWeaverError::database)?;
    | |________________________________________________^ the 
trait `From<sqlx::Error>` is not implemented for 
`std::string::String`
    |
    = help: the following other types implement trait 
`From<T>`:
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements 
`From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<AssetKey>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, 
str>>`
              `std::string::String` implements `From<Uuid>`
              `std::string::String` implements `From<char>`
            and 8 others
    = note: required for `sqlx::Error` to implement 
`Into<std::string::String>`
note: required by a bound in `StoryWeaverError::database`
   --> src\error.rs:213:24
    |
213 |     pub fn database<S: Into<String>>(message: S) -> Self 
{
    |                        ^^^^^^^^^^^^ required by this 
bound in `StoryWeaverError::database`

error[E0277]: the trait bound `std::string::String: 
From<sqlx::Error>` is not satisfied
   --> src\commands\collaboration.rs:96:22
    |
96  |             .map_err(StoryWeaverError::database)?;
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^ the 
trait `From<sqlx::Error>` is not implemented for 
`std::string::String`
    |
    = help: the following other types implement trait 
`From<T>`:
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements 
`From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<AssetKey>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, 
str>>`
              `std::string::String` implements `From<Uuid>`
              `std::string::String` implements `From<char>`
            and 8 others
    = note: required for `sqlx::Error` to implement 
`Into<std::string::String>`
note: required by a bound in `StoryWeaverError::database`
   --> src\error.rs:213:24
    |
213 |     pub fn database<S: Into<String>>(message: S) -> Self 
{
    |                        ^^^^^^^^^^^^ required by this 
bound in `StoryWeaverError::database`

error[E0533]: expected value, found struct variant 
`StoryWeaverError::InvalidInput`
   --> src\commands\collaboration.rs:123:25
    |
123 |         _ => return 
Err(StoryWeaverError::InvalidInput("Invalid comment 
type".to_string())),
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 
not a value
    |
help: you might have meant to create a new value of the struct
    |
123 -         _ => return 
Err(StoryWeaverError::InvalidInput("Invalid comment 
type".to_string())),
123 +         _ => return Err(StoryWeaverError::InvalidInput { 
message: /* value */ }),
    |

error[E0308]: mismatched types
   --> src\commands\collaboration.rs:130:9
    |
130 |         author_identifier,
    |         ^^^^^^^^^^^^^^^^^ expected `String`, found 
`Option<String>`
    |
    = note: expected struct `std::string::String`
                 found enum 
`std::option::Option<std::string::String>`
help: consider using `Option::expect` to unwrap the 
`std::option::Option<std::string::String>` value, panicking if 
the value is an `Option::None`
    |
130 |         author_identifier: 
author_identifier.expect("REASON"),
    |                          
++++++++++++++++++++++++++++++++++++

error[E0277]: the trait bound `std::string::String: 
From<sqlx::Error>` is not satisfied
   --> src\commands\collaboration.rs:138:5
    |
138 | /     create_comment(&pool, request)
139 | |         .await
140 | |         .map_err(StoryWeaverError::database)
    | |____________________________________________^ the trait 
`From<sqlx::Error>` is not implemented for 
`std::string::String`
    |
    = help: the following other types implement trait 
`From<T>`:
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements 
`From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<AssetKey>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, 
str>>`
              `std::string::String` implements `From<Uuid>`
              `std::string::String` implements `From<char>`
            and 8 others
    = note: required for `sqlx::Error` to implement 
`Into<std::string::String>`
note: required by a bound in `StoryWeaverError::database`
   --> src\error.rs:213:24
    |
213 |     pub fn database<S: Into<String>>(message: S) -> Self 
{
    |                        ^^^^^^^^^^^^ required by this 
bound in `StoryWeaverError::database`

error[E0277]: the trait bound `std::string::String: 
From<sqlx::Error>` is not satisfied
   --> src\commands\collaboration.rs:140:18
    |
140 |         .map_err(StoryWeaverError::database)
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait 
`From<sqlx::Error>` is not implemented for 
`std::string::String`
    |
    = help: the following other types implement trait 
`From<T>`:
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements 
`From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<AssetKey>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, 
str>>`
              `std::string::String` implements `From<Uuid>`
              `std::string::String` implements `From<char>`
            and 8 others
    = note: required for `sqlx::Error` to implement 
`Into<std::string::String>`
note: required by a bound in `StoryWeaverError::database`
   --> src\error.rs:213:24
    |
213 |     pub fn database<S: Into<String>>(message: S) -> Self 
{
    |                        ^^^^^^^^^^^^ required by this 
bound in `StoryWeaverError::database`

error[E0277]: the trait bound `std::string::String: 
From<sqlx::Error>` is not satisfied
   --> src\commands\collaboration.rs:150:5
    |
150 | /     get_document_comments(&pool, &document_id)
151 | |         .await
152 | |         .map_err(StoryWeaverError::database)
    | |____________________________________________^ the trait 
`From<sqlx::Error>` is not implemented for 
`std::string::String`
    |
    = help: the following other types implement trait 
`From<T>`:
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements 
`From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<AssetKey>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, 
str>>`
              `std::string::String` implements `From<Uuid>`
              `std::string::String` implements `From<char>`
            and 8 others
    = note: required for `sqlx::Error` to implement 
`Into<std::string::String>`
note: required by a bound in `StoryWeaverError::database`
   --> src\error.rs:213:24
    |
213 |     pub fn database<S: Into<String>>(message: S) -> Self 
{
    |                        ^^^^^^^^^^^^ required by this 
bound in `StoryWeaverError::database`

error[E0277]: the trait bound `std::string::String: 
From<sqlx::Error>` is not satisfied
   --> src\commands\collaboration.rs:152:18
    |
152 |         .map_err(StoryWeaverError::database)
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait 
`From<sqlx::Error>` is not implemented for 
`std::string::String`
    |
    = help: the following other types implement trait 
`From<T>`:
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements 
`From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<AssetKey>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, 
str>>`
              `std::string::String` implements `From<Uuid>`
              `std::string::String` implements `From<char>`
            and 8 others
    = note: required for `sqlx::Error` to implement 
`Into<std::string::String>`
note: required by a bound in `StoryWeaverError::database`
   --> src\error.rs:213:24
    |
213 |     pub fn database<S: Into<String>>(message: S) -> Self 
{
    |                        ^^^^^^^^^^^^ required by this 
bound in `StoryWeaverError::database`

error[E0061]: this function takes 1 argument but 2 arguments 
were supplied
   --> src\commands\collaboration.rs:162:5
    |
162 |     get_comment_threads(&pool, &document_id)
    |     ^^^^^^^^^^^^^^^^^^^        ------------ unexpected 
argument #2 of type `&std::string::String`
    |
note: expected `String`, found `&Arc<Pool<Sqlite>>`
   --> src\commands\collaboration.rs:162:25
    |
162 |     get_comment_threads(&pool, &document_id)
    |                         ^^^^^
    = note: expected struct `std::string::String`
            found reference `&Arc<Pool<Sqlite>>`
note: function defined here
   --> src\commands\collaboration.rs:157:14
    |
157 | pub async fn get_comment_threads(
    |              ^^^^^^^^^^^^^^^^^^^
158 |     document_id: String,
    |     -------------------
help: remove the extra argument
    |
162 -     get_comment_threads(&pool, &document_id)
162 +     get_comment_threads(/* std::string::String */)
    |

error[E0277]: the trait bound `std::string::String: 
From<StoryWeaverError>` is not satisfied
   --> src\commands\collaboration.rs:162:5
    |
162 | /     get_comment_threads(&pool, &document_id)
163 | |         .await
164 | |         .map_err(StoryWeaverError::database)
    | |____________________________________________^ the trait 
`From<StoryWeaverError>` is not implemented for 
`std::string::String`
    |
    = help: the following other types implement trait 
`From<T>`:
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements 
`From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<AssetKey>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, 
str>>`
              `std::string::String` implements `From<Uuid>`
              `std::string::String` implements `From<char>`
            and 8 others
    = note: required for `StoryWeaverError` to implement 
`Into<std::string::String>`
note: required by a bound in `StoryWeaverError::database`
   --> src\error.rs:213:24
    |
213 |     pub fn database<S: Into<String>>(message: S) -> Self 
{
    |                        ^^^^^^^^^^^^ required by this 
bound in `StoryWeaverError::database`

error[E0277]: the trait bound `std::string::String: 
From<StoryWeaverError>` is not satisfied
   --> src\commands\collaboration.rs:164:18
    |
164 |         .map_err(StoryWeaverError::database)
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait 
`From<StoryWeaverError>` is not implemented for 
`std::string::String`
    |
    = help: the following other types implement trait 
`From<T>`:
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements 
`From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<AssetKey>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, 
str>>`
              `std::string::String` implements `From<Uuid>`
              `std::string::String` implements `From<char>`
            and 8 others
    = note: required for `StoryWeaverError` to implement 
`Into<std::string::String>`
note: required by a bound in `StoryWeaverError::database`
   --> src\error.rs:213:24
    |
213 |     pub fn database<S: Into<String>>(message: S) -> Self 
{
    |                        ^^^^^^^^^^^^ required by this 
bound in `StoryWeaverError::database`

error[E0061]: this function takes 2 arguments but 3 arguments 
were supplied
   --> src\commands\collaboration.rs:175:5
    |
175 |     resolve_comment(&pool, comment_id, &resolved_by)
    |     ^^^^^^^^^^^^^^^ -----              ------------ 
expected `String`, found `&String`
    |                     |
    |                     unexpected argument #1 of type 
`&Arc<Pool<Sqlite>>`
    |
note: function defined here
   --> src\commands\collaboration.rs:169:14
    |
169 | pub async fn resolve_comment(
    |              ^^^^^^^^^^^^^^^
170 |     comment_id: i32,
171 |     resolved_by: String,
    |     -------------------
help: consider removing the borrow
    |
175 -     resolve_comment(&pool, comment_id, &resolved_by)
175 +     resolve_comment(&pool, comment_id, resolved_by)
    |
help: remove the extra argument
    |
175 -     resolve_comment(&pool, comment_id, &resolved_by)
175 +     resolve_comment(, comment_id, /* std::string::String 
*/)
    |

error[E0277]: the trait bound `std::string::String: 
From<StoryWeaverError>` is not satisfied
   --> src\commands\collaboration.rs:175:5
    |
175 | /     resolve_comment(&pool, comment_id, &resolved_by)
176 | |         .await
177 | |         .map_err(StoryWeaverError::database)
    | |____________________________________________^ the trait 
`From<StoryWeaverError>` is not implemented for 
`std::string::String`
    |
    = help: the following other types implement trait 
`From<T>`:
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements 
`From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<AssetKey>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, 
str>>`
              `std::string::String` implements `From<Uuid>`
              `std::string::String` implements `From<char>`
            and 8 others
    = note: required for `StoryWeaverError` to implement 
`Into<std::string::String>`
note: required by a bound in `StoryWeaverError::database`
   --> src\error.rs:213:24
    |
213 |     pub fn database<S: Into<String>>(message: S) -> Self 
{
    |                        ^^^^^^^^^^^^ required by this 
bound in `StoryWeaverError::database`

error[E0277]: the trait bound `std::string::String: 
From<StoryWeaverError>` is not satisfied
   --> src\commands\collaboration.rs:177:18
    |
177 |         .map_err(StoryWeaverError::database)
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait 
`From<StoryWeaverError>` is not implemented for 
`std::string::String`
    |
    = help: the following other types implement trait 
`From<T>`:
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements 
`From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<AssetKey>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, 
str>>`
              `std::string::String` implements `From<Uuid>`
              `std::string::String` implements `From<char>`
            and 8 others
    = note: required for `StoryWeaverError` to implement 
`Into<std::string::String>`
note: required by a bound in `StoryWeaverError::database`
   --> src\error.rs:213:24
    |
213 |     pub fn database<S: Into<String>>(message: S) -> Self 
{
    |                        ^^^^^^^^^^^^ required by this 
bound in `StoryWeaverError::database`

error[E0061]: this function takes 1 argument but 2 arguments 
were supplied
   --> src\commands\collaboration.rs:187:5
    |
187 |     delete_comment(&pool, comment_id)
    |     ^^^^^^^^^^^^^^ ----- unexpected argument #1 of type 
`&Arc<Pool<Sqlite>>`
    |
note: function defined here
   --> src\commands\collaboration.rs:182:14
    |
182 | pub async fn delete_comment(
    |              ^^^^^^^^^^^^^^
help: remove the extra argument
    |
187 -     delete_comment(&pool, comment_id)
187 +     delete_comment(comment_id)
    |

error[E0277]: the trait bound `std::string::String: 
From<StoryWeaverError>` is not satisfied
   --> src\commands\collaboration.rs:187:5
    |
187 | /     delete_comment(&pool, comment_id)
188 | |         .await
189 | |         .map_err(StoryWeaverError::database)
    | |____________________________________________^ the trait 
`From<StoryWeaverError>` is not implemented for 
`std::string::String`
    |
    = help: the following other types implement trait 
`From<T>`:
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements 
`From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<AssetKey>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, 
str>>`
              `std::string::String` implements `From<Uuid>`
              `std::string::String` implements `From<char>`
            and 8 others
    = note: required for `StoryWeaverError` to implement 
`Into<std::string::String>`
note: required by a bound in `StoryWeaverError::database`
   --> src\error.rs:213:24
    |
213 |     pub fn database<S: Into<String>>(message: S) -> Self 
{
    |                        ^^^^^^^^^^^^ required by this 
bound in `StoryWeaverError::database`

error[E0277]: the trait bound `std::string::String: 
From<StoryWeaverError>` is not satisfied
   --> src\commands\collaboration.rs:189:18
    |
189 |         .map_err(StoryWeaverError::database)
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait 
`From<StoryWeaverError>` is not implemented for 
`std::string::String`
    |
    = help: the following other types implement trait 
`From<T>`:
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements 
`From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<AssetKey>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, 
str>>`
              `std::string::String` implements `From<Uuid>`
              `std::string::String` implements `From<char>`
            and 8 others
    = note: required for `StoryWeaverError` to implement 
`Into<std::string::String>`
note: required by a bound in `StoryWeaverError::database`
   --> src\error.rs:213:24
    |
213 |     pub fn database<S: Into<String>>(message: S) -> Self 
{
    |                        ^^^^^^^^^^^^ required by this 
bound in `StoryWeaverError::database`

error[E0061]: this function takes 3 arguments but 4 arguments 
were supplied
   --> src\commands\collaboration.rs:201:5
    |
201 |     create_collaboration_session(&pool, &document_id, 
max_participants, expires_in_hours)
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^        ------------ 
unexpected argument #2 of type `&std::string::String`
    |
note: expected `String`, found `&Arc<Pool<Sqlite>>`
   --> src\commands\collaboration.rs:201:34
    |
201 |     create_collaboration_session(&pool, &document_id, 
max_participants, expires_in_hours)
    |                                  ^^^^^
    = note: expected struct `std::string::String`
            found reference `&Arc<Pool<Sqlite>>`
note: function defined here
   --> src\commands\collaboration.rs:194:14
    |
194 | pub async fn create_collaboration_session(
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
195 |     document_id: String,
    |     -------------------
help: remove the extra argument
    |
201 -     create_collaboration_session(&pool, &document_id, 
max_participants, expires_in_hours)
201 +     create_collaboration_session(/* std::string::String 
*/, max_participants, expires_in_hours)
    |

error[E0277]: the trait bound `std::string::String: 
From<StoryWeaverError>` is not satisfied
   --> src\commands\collaboration.rs:201:5
    |
201 | /     create_collaboration_session(&pool, &document_id, 
max_participants, expires_in_hours)
202 | |         .await
203 | |         .map_err(StoryWeaverError::database)
    | |____________________________________________^ the trait 
`From<StoryWeaverError>` is not implemented for 
`std::string::String`
    |
    = help: the following other types implement trait 
`From<T>`:
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements 
`From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<AssetKey>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, 
str>>`
              `std::string::String` implements `From<Uuid>`
              `std::string::String` implements `From<char>`
            and 8 others
    = note: required for `StoryWeaverError` to implement 
`Into<std::string::String>`
note: required by a bound in `StoryWeaverError::database`
   --> src\error.rs:213:24
    |
213 |     pub fn database<S: Into<String>>(message: S) -> Self 
{
    |                        ^^^^^^^^^^^^ required by this 
bound in `StoryWeaverError::database`

error[E0277]: the trait bound `std::string::String: 
From<StoryWeaverError>` is not satisfied
   --> src\commands\collaboration.rs:203:18
    |
203 |         .map_err(StoryWeaverError::database)
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait 
`From<StoryWeaverError>` is not implemented for 
`std::string::String`
    |
    = help: the following other types implement trait 
`From<T>`:
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements 
`From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<AssetKey>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, 
str>>`
              `std::string::String` implements `From<Uuid>`
              `std::string::String` implements `From<char>`
            and 8 others
    = note: required for `StoryWeaverError` to implement 
`Into<std::string::String>`
note: required by a bound in `StoryWeaverError::database`
   --> src\error.rs:213:24
    |
213 |     pub fn database<S: Into<String>>(message: S) -> Self 
{
    |                        ^^^^^^^^^^^^ required by this 
bound in `StoryWeaverError::database`

error[E0609]: no field `current_participants` on type 
`&database::models::collaboration::CollaborationSession`
   --> src\commands\collaboration.rs:226:17
    |
226 |         if sess.current_participants >= 
sess.max_participants {
    |                 ^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `id`, `document_id`, 
`session_token`, `session_name`, `is_active` ... and 4 others

error[E0609]: no field `current_participants` on type 
`&database::models::collaboration::CollaborationSession`
   --> src\commands\collaboration.rs:231:58
    |
231 |         update_session_participants(&pool, sess.id, 
sess.current_participants + 1)
    |                                                          
^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `id`, `document_id`, 
`session_token`, `session_name`, `is_active` ... and 4 others

error[E0425]: cannot find function 
`update_session_participants` in this scope
   --> src\commands\collaboration.rs:231:9
    |
231 |         update_session_participants(&pool, sess.id, 
sess.current_participants + 1)
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this 
scope

error[E0609]: no field `current_participants` on type 
`database::models::collaboration::CollaborationSession`
   --> src\commands\collaboration.rs:251:47
    |
251 |         let new_count = std::cmp::max(0, 
sess.current_participants - 1);
    |                                               
^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `id`, `document_id`, 
`session_token`, `session_name`, `is_active` ... and 4 others

error[E0425]: cannot find function 
`update_session_participants` in this scope
   --> src\commands\collaboration.rs:252:9
    |
252 |         update_session_participants(&pool, sess.id, 
new_count)
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this 
scope

error[E0061]: this function takes 2 arguments but 3 arguments 
were supplied
   --> src\commands\collaboration.rs:268:5
    |
268 |     duplicate_document_for_sharing(&pool, &document_id, 
&new_title)
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^        ------------  
---------- unexpected argument #3 of type 
`&std::string::String`
    |                                           |
    |                                           expected 
`String`, found `&String`
    |
note: expected `String`, found `&Arc<Pool<Sqlite>>`
   --> src\commands\collaboration.rs:268:36
    |
268 |     duplicate_document_for_sharing(&pool, &document_id, 
&new_title)
    |                                    ^^^^^
    = note: expected struct `std::string::String`
            found reference `&Arc<Pool<Sqlite>>`
note: function defined here
   --> src\commands\collaboration.rs:262:14
    |
262 | pub async fn duplicate_document_for_sharing(
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
263 |     document_id: String,
    |     -------------------
264 |     new_title: String,
    |     -----------------
help: consider removing the borrow
    |
268 -     duplicate_document_for_sharing(&pool, &document_id, 
&new_title)
268 +     duplicate_document_for_sharing(&pool, document_id, 
&new_title)
    |
help: remove the extra argument
    |
268 -     duplicate_document_for_sharing(&pool, &document_id, 
&new_title)
268 +     duplicate_document_for_sharing(/* 
std::string::String */, /* std::string::String */)
    |

error[E0277]: the trait bound `std::string::String: 
From<StoryWeaverError>` is not satisfied
   --> src\commands\collaboration.rs:268:5
    |
268 | /     duplicate_document_for_sharing(&pool, 
&document_id, &new_title)
269 | |         .await
270 | |         .map_err(StoryWeaverError::database)
    | |____________________________________________^ the trait 
`From<StoryWeaverError>` is not implemented for 
`std::string::String`
    |
    = help: the following other types implement trait 
`From<T>`:
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements 
`From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<AssetKey>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, 
str>>`
              `std::string::String` implements `From<Uuid>`
              `std::string::String` implements `From<char>`
            and 8 others
    = note: required for `StoryWeaverError` to implement 
`Into<std::string::String>`
note: required by a bound in `StoryWeaverError::database`
   --> src\error.rs:213:24
    |
213 |     pub fn database<S: Into<String>>(message: S) -> Self 
{
    |                        ^^^^^^^^^^^^ required by this 
bound in `StoryWeaverError::database`

error[E0277]: the trait bound `std::string::String: 
From<StoryWeaverError>` is not satisfied
   --> src\commands\collaboration.rs:270:18
    |
270 |         .map_err(StoryWeaverError::database)
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait 
`From<StoryWeaverError>` is not implemented for 
`std::string::String`
    |
    = help: the following other types implement trait 
`From<T>`:
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements 
`From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<AssetKey>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, 
str>>`
              `std::string::String` implements `From<Uuid>`
              `std::string::String` implements `From<char>`
            and 8 others
    = note: required for `StoryWeaverError` to implement 
`Into<std::string::String>`
note: required by a bound in `StoryWeaverError::database`
   --> src\error.rs:213:24
    |
213 |     pub fn database<S: Into<String>>(message: S) -> Self 
{
    |                        ^^^^^^^^^^^^ required by this 
bound in `StoryWeaverError::database`

error[E0061]: this function takes 1 argument but 2 arguments 
were supplied
   --> src\commands\collaboration.rs:280:5
    |
280 |     unpublish_shared_document(&pool, &share_token)
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^        ------------ 
unexpected argument #2 of type `&std::string::String`
    |
note: expected `String`, found `&Arc<Pool<Sqlite>>`
   --> src\commands\collaboration.rs:280:31
    |
280 |     unpublish_shared_document(&pool, &share_token)
    |                               ^^^^^
    = note: expected struct `std::string::String`
            found reference `&Arc<Pool<Sqlite>>`
note: function defined here
   --> src\commands\collaboration.rs:275:14
    |
275 | pub async fn unpublish_shared_document(
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^
276 |     share_token: String,
    |     -------------------
help: remove the extra argument
    |
280 -     unpublish_shared_document(&pool, &share_token)
280 +     unpublish_shared_document(/* std::string::String */)
    |

error[E0277]: the trait bound `std::string::String: 
From<StoryWeaverError>` is not satisfied
   --> src\commands\collaboration.rs:280:5
    |
280 | /     unpublish_shared_document(&pool, &share_token)
281 | |         .await
282 | |         .map_err(StoryWeaverError::database)
    | |____________________________________________^ the trait 
`From<StoryWeaverError>` is not implemented for 
`std::string::String`
    |
    = help: the following other types implement trait 
`From<T>`:
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements 
`From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<AssetKey>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, 
str>>`
              `std::string::String` implements `From<Uuid>`
              `std::string::String` implements `From<char>`
            and 8 others
    = note: required for `StoryWeaverError` to implement 
`Into<std::string::String>`
note: required by a bound in `StoryWeaverError::database`
   --> src\error.rs:213:24
    |
213 |     pub fn database<S: Into<String>>(message: S) -> Self 
{
    |                        ^^^^^^^^^^^^ required by this 
bound in `StoryWeaverError::database`

error[E0277]: the trait bound `std::string::String: 
From<StoryWeaverError>` is not satisfied
   --> src\commands\collaboration.rs:282:18
    |
282 |         .map_err(StoryWeaverError::database)
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait 
`From<StoryWeaverError>` is not implemented for 
`std::string::String`
    |
    = help: the following other types implement trait 
`From<T>`:
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements 
`From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<AssetKey>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, 
str>>`
              `std::string::String` implements `From<Uuid>`
              `std::string::String` implements `From<char>`
            and 8 others
    = note: required for `StoryWeaverError` to implement 
`Into<std::string::String>`
note: required by a bound in `StoryWeaverError::database`
   --> src\error.rs:213:24
    |
213 |     pub fn database<S: Into<String>>(message: S) -> Self 
{
    |                        ^^^^^^^^^^^^ required by this 
bound in `StoryWeaverError::database`

error[E0061]: this function takes 1 argument but 2 arguments 
were supplied
   --> src\commands\collaboration.rs:292:5
    |
292 |     republish_shared_document(&pool, &share_token)
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^        ------------ 
unexpected argument #2 of type `&std::string::String`
    |
note: expected `String`, found `&Arc<Pool<Sqlite>>`
   --> src\commands\collaboration.rs:292:31
    |
292 |     republish_shared_document(&pool, &share_token)
    |                               ^^^^^
    = note: expected struct `std::string::String`
            found reference `&Arc<Pool<Sqlite>>`
note: function defined here
   --> src\commands\collaboration.rs:287:14
    |
287 | pub async fn republish_shared_document(
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^
288 |     share_token: String,
    |     -------------------
help: remove the extra argument
    |
292 -     republish_shared_document(&pool, &share_token)
292 +     republish_shared_document(/* std::string::String */)
    |

error[E0277]: the trait bound `std::string::String: 
From<StoryWeaverError>` is not satisfied
   --> src\commands\collaboration.rs:292:5
    |
292 | /     republish_shared_document(&pool, &share_token)
293 | |         .await
294 | |         .map_err(StoryWeaverError::database)
    | |____________________________________________^ the trait 
`From<StoryWeaverError>` is not implemented for 
`std::string::String`
    |
    = help: the following other types implement trait 
`From<T>`:
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements 
`From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<AssetKey>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, 
str>>`
              `std::string::String` implements `From<Uuid>`
              `std::string::String` implements `From<char>`
            and 8 others
    = note: required for `StoryWeaverError` to implement 
`Into<std::string::String>`
note: required by a bound in `StoryWeaverError::database`
   --> src\error.rs:213:24
    |
213 |     pub fn database<S: Into<String>>(message: S) -> Self 
{
    |                        ^^^^^^^^^^^^ required by this 
bound in `StoryWeaverError::database`

error[E0277]: the trait bound `std::string::String: 
From<StoryWeaverError>` is not satisfied
   --> src\commands\collaboration.rs:294:18
    |
294 |         .map_err(StoryWeaverError::database)
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait 
`From<StoryWeaverError>` is not implemented for 
`std::string::String`
    |
    = help: the following other types implement trait 
`From<T>`:
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements 
`From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<AssetKey>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, 
str>>`
              `std::string::String` implements `From<Uuid>`
              `std::string::String` implements `From<char>`
            and 8 others
    = note: required for `StoryWeaverError` to implement 
`Into<std::string::String>`
note: required by a bound in `StoryWeaverError::database`
   --> src\error.rs:213:24
    |
213 |     pub fn database<S: Into<String>>(message: S) -> Self 
{
    |                        ^^^^^^^^^^^^ required by this 
bound in `StoryWeaverError::database`

error[E0061]: this function takes 1 argument but 2 arguments 
were supplied
   --> src\commands\collaboration.rs:304:5
    |
304 |     get_project_shared_documents(&pool, &project_id)
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^        ----------- 
unexpected argument #2 of type `&std::string::String`
    |
note: expected `String`, found `&Arc<Pool<Sqlite>>`
   --> src\commands\collaboration.rs:304:34
    |
304 |     get_project_shared_documents(&pool, &project_id)
    |                                  ^^^^^
    = note: expected struct `std::string::String`
            found reference `&Arc<Pool<Sqlite>>`
note: function defined here
   --> src\commands\collaboration.rs:299:14
    |
299 | pub async fn get_project_shared_documents(
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
300 |     project_id: String,
    |     ------------------
help: remove the extra argument
    |
304 -     get_project_shared_documents(&pool, &project_id)
304 +     get_project_shared_documents(/* std::string::String 
*/)
    |

error[E0277]: the trait bound `std::string::String: 
From<StoryWeaverError>` is not satisfied
   --> src\commands\collaboration.rs:304:5
    |
304 | /     get_project_shared_documents(&pool, &project_id)
305 | |         .await
306 | |         .map_err(StoryWeaverError::database)
    | |____________________________________________^ the trait 
`From<StoryWeaverError>` is not implemented for 
`std::string::String`
    |
    = help: the following other types implement trait 
`From<T>`:
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements 
`From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<AssetKey>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, 
str>>`
              `std::string::String` implements `From<Uuid>`
              `std::string::String` implements `From<char>`
            and 8 others
    = note: required for `StoryWeaverError` to implement 
`Into<std::string::String>`
note: required by a bound in `StoryWeaverError::database`
   --> src\error.rs:213:24
    |
213 |     pub fn database<S: Into<String>>(message: S) -> Self 
{
    |                        ^^^^^^^^^^^^ required by this 
bound in `StoryWeaverError::database`

error[E0277]: the trait bound `std::string::String: 
From<StoryWeaverError>` is not satisfied
   --> src\commands\collaboration.rs:306:18
    |
306 |         .map_err(StoryWeaverError::database)
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait 
`From<StoryWeaverError>` is not implemented for 
`std::string::String`
    |
    = help: the following other types implement trait 
`From<T>`:
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements 
`From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<AssetKey>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, 
str>>`
              `std::string::String` implements `From<Uuid>`
              `std::string::String` implements `From<char>`
            and 8 others
    = note: required for `StoryWeaverError` to implement 
`Into<std::string::String>`
note: required by a bound in `StoryWeaverError::database`
   --> src\error.rs:213:24
    |
213 |     pub fn database<S: Into<String>>(message: S) -> Self 
{
    |                        ^^^^^^^^^^^^ required by this 
bound in `StoryWeaverError::database`

error[E0533]: expected value, found struct variant 
`StoryWeaverError::InvalidInput`
   --> src\commands\collaboration.rs:325:25
    |
325 |         _ => return 
Err(StoryWeaverError::InvalidInput("Invalid notification 
type".to_string())),
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 
not a value
    |
help: you might have meant to create a new value of the struct
    |
325 -         _ => return 
Err(StoryWeaverError::InvalidInput("Invalid notification 
type".to_string())),
325 +         _ => return Err(StoryWeaverError::InvalidInput { 
message: /* value */ }),
    |

error[E0061]: this function takes 4 arguments but 5 arguments 
were supplied
   --> src\commands\collaboration.rs:328:5
    |
328 |     create_notification(&pool, &document_id, 
notification_type, &message, recipient_token.as_deref())
    |     ^^^^^^^^^^^^^^^^^^^        ------------  
-----------------            -------------------------- 
unexpected argument #5 of type `std::option::Option<&str>`
    |                                |             |
    |                                |             expected 
`String`, found `NotificationType`
    |                                expected `String`, found 
`&String`
    |
note: expected `String`, found `&Arc<Pool<Sqlite>>`
   --> src\commands\collaboration.rs:328:25
    |
328 |     create_notification(&pool, &document_id, 
notification_type, &message, recipient_token.as_deref())
    |                         ^^^^^
    = note: expected struct `std::string::String`
            found reference `&Arc<Pool<Sqlite>>`
note: expected `Option<String>`, found `&String`
   --> src\commands\collaboration.rs:328:65
    |
328 |     create_notification(&pool, &document_id, 
notification_type, &message, recipient_token.as_deref())
    |                                                          
       ^^^^^^^^
    = note:   expected enum 
`std::option::Option<std::string::String>`
            found reference `&std::string::String`
note: function defined here
   --> src\commands\collaboration.rs:311:14
    |
311 | pub async fn create_notification(
    |              ^^^^^^^^^^^^^^^^^^^
312 |     document_id: String,
    |     -------------------
313 |     notification_type: String,
    |     -------------------------
314 |     message: String,
    |     ---------------
315 |     recipient_token: Option<String>,
    |     -------------------------------
help: consider removing the borrow
    |
328 -     create_notification(&pool, &document_id, 
notification_type, &message, recipient_token.as_deref())
328 +     create_notification(&pool, document_id, 
notification_type, &message, recipient_token.as_deref())
    |
help: try using a conversion method
    |
328 |     create_notification(&pool, &document_id, 
notification_type.to_string(), &message, 
recipient_token.as_deref())
    |                                                          
     ++++++++++++
help: remove the extra argument
    |
328 -     create_notification(&pool, &document_id, 
notification_type, &message, recipient_token.as_deref())
328 +     create_notification(/* std::string::String */, /* 
std::string::String */, /* std::string::String */, /* 
std::option::Option<std::string::String> */)
    |

error[E0277]: the trait bound `std::string::String: 
From<StoryWeaverError>` is not satisfied
   --> src\commands\collaboration.rs:328:5
    |
328 | /     create_notification(&pool, &document_id, 
notification_type, &message, recipient_token.as_deref())
329 | |         .await
330 | |         .map_err(StoryWeaverError::database)
    | |____________________________________________^ the trait 
`From<StoryWeaverError>` is not implemented for 
`std::string::String`
    |
    = help: the following other types implement trait 
`From<T>`:
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements 
`From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<AssetKey>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, 
str>>`
              `std::string::String` implements `From<Uuid>`
              `std::string::String` implements `From<char>`
            and 8 others
    = note: required for `StoryWeaverError` to implement 
`Into<std::string::String>`
note: required by a bound in `StoryWeaverError::database`
   --> src\error.rs:213:24
    |
213 |     pub fn database<S: Into<String>>(message: S) -> Self 
{
    |                        ^^^^^^^^^^^^ required by this 
bound in `StoryWeaverError::database`

error[E0277]: the trait bound `std::string::String: 
From<StoryWeaverError>` is not satisfied
   --> src\commands\collaboration.rs:330:18
    |
330 |         .map_err(StoryWeaverError::database)
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait 
`From<StoryWeaverError>` is not implemented for 
`std::string::String`
    |
    = help: the following other types implement trait 
`From<T>`:
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements 
`From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<AssetKey>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, 
str>>`
              `std::string::String` implements `From<Uuid>`
              `std::string::String` implements `From<char>`
            and 8 others
    = note: required for `StoryWeaverError` to implement 
`Into<std::string::String>`
note: required by a bound in `StoryWeaverError::database`
   --> src\error.rs:213:24
    |
213 |     pub fn database<S: Into<String>>(message: S) -> Self 
{
    |                        ^^^^^^^^^^^^ required by this 
bound in `StoryWeaverError::database`

error[E0061]: this function takes 2 arguments but 3 arguments 
were supplied
   --> src\commands\collaboration.rs:341:5
    |
341 |     get_notifications_for_user(&pool, &recipient_token, 
limit)
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^        ---------------- 
unexpected argument #2 of type `&std::string::String`
    |
note: expected `String`, found `&Arc<Pool<Sqlite>>`
   --> src\commands\collaboration.rs:341:32
    |
341 |     get_notifications_for_user(&pool, &recipient_token, 
limit)
    |                                ^^^^^
    = note: expected struct `std::string::String`
            found reference `&Arc<Pool<Sqlite>>`
note: function defined here
   --> src\commands\collaboration.rs:335:14
    |
335 | pub async fn get_notifications_for_user(
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^
336 |     recipient_token: String,
    |     -----------------------
help: remove the extra argument
    |
341 -     get_notifications_for_user(&pool, &recipient_token, 
limit)
341 +     get_notifications_for_user(/* std::string::String 
*/, limit)
    |

error[E0277]: the trait bound `std::string::String: 
From<StoryWeaverError>` is not satisfied
   --> src\commands\collaboration.rs:341:5
    |
341 | /     get_notifications_for_user(&pool, 
&recipient_token, limit)
342 | |         .await
343 | |         .map_err(StoryWeaverError::database)
    | |____________________________________________^ the trait 
`From<StoryWeaverError>` is not implemented for 
`std::string::String`
    |
    = help: the following other types implement trait 
`From<T>`:
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements 
`From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<AssetKey>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, 
str>>`
              `std::string::String` implements `From<Uuid>`
              `std::string::String` implements `From<char>`
            and 8 others
    = note: required for `StoryWeaverError` to implement 
`Into<std::string::String>`
note: required by a bound in `StoryWeaverError::database`
   --> src\error.rs:213:24
    |
213 |     pub fn database<S: Into<String>>(message: S) -> Self 
{
    |                        ^^^^^^^^^^^^ required by this 
bound in `StoryWeaverError::database`

error[E0277]: the trait bound `std::string::String: 
From<StoryWeaverError>` is not satisfied
   --> src\commands\collaboration.rs:343:18
    |
343 |         .map_err(StoryWeaverError::database)
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait 
`From<StoryWeaverError>` is not implemented for 
`std::string::String`
    |
    = help: the following other types implement trait 
`From<T>`:
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements 
`From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<AssetKey>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, 
str>>`
              `std::string::String` implements `From<Uuid>`
              `std::string::String` implements `From<char>`
            and 8 others
    = note: required for `StoryWeaverError` to implement 
`Into<std::string::String>`
note: required by a bound in `StoryWeaverError::database`
   --> src\error.rs:213:24
    |
213 |     pub fn database<S: Into<String>>(message: S) -> Self 
{
    |                        ^^^^^^^^^^^^ required by this 
bound in `StoryWeaverError::database`

error[E0061]: this function takes 1 argument but 2 arguments 
were supplied
   --> src\commands\collaboration.rs:353:5
    |
353 |     mark_notification_read(&pool, notification_id)
    |     ^^^^^^^^^^^^^^^^^^^^^^ ----- unexpected argument #1 
of type `&Arc<Pool<Sqlite>>`
    |
note: function defined here
   --> src\commands\collaboration.rs:348:14
    |
348 | pub async fn mark_notification_read(
    |              ^^^^^^^^^^^^^^^^^^^^^^
help: remove the extra argument
    |
353 -     mark_notification_read(&pool, notification_id)
353 +     mark_notification_read(notification_id)
    |

error[E0277]: the trait bound `std::string::String: 
From<StoryWeaverError>` is not satisfied
   --> src\commands\collaboration.rs:353:5
    |
353 | /     mark_notification_read(&pool, notification_id)
354 | |         .await
355 | |         .map_err(StoryWeaverError::database)
    | |____________________________________________^ the trait 
`From<StoryWeaverError>` is not implemented for 
`std::string::String`
    |
    = help: the following other types implement trait 
`From<T>`:
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements 
`From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<AssetKey>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, 
str>>`
              `std::string::String` implements `From<Uuid>`
              `std::string::String` implements `From<char>`
            and 8 others
    = note: required for `StoryWeaverError` to implement 
`Into<std::string::String>`
note: required by a bound in `StoryWeaverError::database`
   --> src\error.rs:213:24
    |
213 |     pub fn database<S: Into<String>>(message: S) -> Self 
{
    |                        ^^^^^^^^^^^^ required by this 
bound in `StoryWeaverError::database`

error[E0277]: the trait bound `std::string::String: 
From<StoryWeaverError>` is not satisfied
   --> src\commands\collaboration.rs:355:18
    |
355 |         .map_err(StoryWeaverError::database)
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait 
`From<StoryWeaverError>` is not implemented for 
`std::string::String`
    |
    = help: the following other types implement trait 
`From<T>`:
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements 
`From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<AssetKey>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, 
str>>`
              `std::string::String` implements `From<Uuid>`
              `std::string::String` implements `From<char>`
            and 8 others
    = note: required for `StoryWeaverError` to implement 
`Into<std::string::String>`
note: required by a bound in `StoryWeaverError::database`
   --> src\error.rs:213:24
    |
213 |     pub fn database<S: Into<String>>(message: S) -> Self 
{
    |                        ^^^^^^^^^^^^ required by this 
bound in `StoryWeaverError::database`

error[E0061]: this function takes 1 argument but 2 arguments 
were supplied
   --> src\commands\collaboration.rs:365:5
    |
365 |     mark_all_notifications_read(&pool, &recipient_token)
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^        ---------------- 
unexpected argument #2 of type `&std::string::String`
    |
note: expected `String`, found `&Arc<Pool<Sqlite>>`
   --> src\commands\collaboration.rs:365:33
    |
365 |     mark_all_notifications_read(&pool, &recipient_token)
    |                                 ^^^^^
    = note: expected struct `std::string::String`
            found reference `&Arc<Pool<Sqlite>>`
note: function defined here
   --> src\commands\collaboration.rs:360:14
    |
360 | pub async fn mark_all_notifications_read(
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^
361 |     recipient_token: String,
    |     -----------------------
help: remove the extra argument
    |
365 -     mark_all_notifications_read(&pool, &recipient_token)
365 +     mark_all_notifications_read(/* std::string::String 
*/)
    |

error[E0277]: the trait bound `std::string::String: 
From<StoryWeaverError>` is not satisfied
   --> src\commands\collaboration.rs:365:5
    |
365 | /     mark_all_notifications_read(&pool, 
&recipient_token)
366 | |         .await
367 | |         .map_err(StoryWeaverError::database)
    | |____________________________________________^ the trait 
`From<StoryWeaverError>` is not implemented for 
`std::string::String`
    |
    = help: the following other types implement trait 
`From<T>`:
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements 
`From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<AssetKey>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, 
str>>`
              `std::string::String` implements `From<Uuid>`
              `std::string::String` implements `From<char>`
            and 8 others
    = note: required for `StoryWeaverError` to implement 
`Into<std::string::String>`
note: required by a bound in `StoryWeaverError::database`
   --> src\error.rs:213:24
    |
213 |     pub fn database<S: Into<String>>(message: S) -> Self 
{
    |                        ^^^^^^^^^^^^ required by this 
bound in `StoryWeaverError::database`

error[E0277]: the trait bound `std::string::String: 
From<StoryWeaverError>` is not satisfied
   --> src\commands\collaboration.rs:367:18
    |
367 |         .map_err(StoryWeaverError::database)
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait 
`From<StoryWeaverError>` is not implemented for 
`std::string::String`
    |
    = help: the following other types implement trait 
`From<T>`:
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements 
`From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<AssetKey>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, 
str>>`
              `std::string::String` implements `From<Uuid>`
              `std::string::String` implements `From<char>`
            and 8 others
    = note: required for `StoryWeaverError` to implement 
`Into<std::string::String>`
note: required by a bound in `StoryWeaverError::database`
   --> src\error.rs:213:24
    |
213 |     pub fn database<S: Into<String>>(message: S) -> Self 
{
    |                        ^^^^^^^^^^^^ required by this 
bound in `StoryWeaverError::database`

error[E0061]: this function takes 1 argument but 2 arguments 
were supplied
   --> src\commands\collaboration.rs:377:5
    |
377 |     get_unread_notification_count(&pool, 
&recipient_token)
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^        
---------------- unexpected argument #2 of type 
`&std::string::String`
    |
note: expected `String`, found `&Arc<Pool<Sqlite>>`
   --> src\commands\collaboration.rs:377:35
    |
377 |     get_unread_notification_count(&pool, 
&recipient_token)
    |                                   ^^^^^
    = note: expected struct `std::string::String`
            found reference `&Arc<Pool<Sqlite>>`
note: function defined here
   --> src\commands\collaboration.rs:372:14
    |
372 | pub async fn get_unread_notification_count(
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
373 |     recipient_token: String,
    |     -----------------------
help: remove the extra argument
    |
377 -     get_unread_notification_count(&pool, 
&recipient_token)
377 +     get_unread_notification_count(/* std::string::String 
*/)
    |

error[E0277]: the trait bound `std::string::String: 
From<StoryWeaverError>` is not satisfied
   --> src\commands\collaboration.rs:377:5
    |
377 | /     get_unread_notification_count(&pool, 
&recipient_token)
378 | |         .await
379 | |         .map_err(StoryWeaverError::database)
    | |____________________________________________^ the trait 
`From<StoryWeaverError>` is not implemented for 
`std::string::String`
    |
    = help: the following other types implement trait 
`From<T>`:
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements 
`From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<AssetKey>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, 
str>>`
              `std::string::String` implements `From<Uuid>`
              `std::string::String` implements `From<char>`
            and 8 others
    = note: required for `StoryWeaverError` to implement 
`Into<std::string::String>`
note: required by a bound in `StoryWeaverError::database`
   --> src\error.rs:213:24
    |
213 |     pub fn database<S: Into<String>>(message: S) -> Self 
{
    |                        ^^^^^^^^^^^^ required by this 
bound in `StoryWeaverError::database`

error[E0277]: the trait bound `std::string::String: 
From<StoryWeaverError>` is not satisfied
   --> src\commands\collaboration.rs:379:18
    |
379 |         .map_err(StoryWeaverError::database)
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait 
`From<StoryWeaverError>` is not implemented for 
`std::string::String`
    |
    = help: the following other types implement trait 
`From<T>`:
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements 
`From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<AssetKey>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, 
str>>`
              `std::string::String` implements `From<Uuid>`
              `std::string::String` implements `From<char>`
            and 8 others
    = note: required for `StoryWeaverError` to implement 
`Into<std::string::String>`
note: required by a bound in `StoryWeaverError::database`
   --> src\error.rs:213:24
    |
213 |     pub fn database<S: Into<String>>(message: S) -> Self 
{
    |                        ^^^^^^^^^^^^ required by this 
bound in `StoryWeaverError::database`

error[E0061]: this function takes 1 argument but 2 arguments 
were supplied
   --> src\commands\collaboration.rs:389:5
    |
389 |     delete_old_notifications(&pool, days_old)
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ ----- unexpected argument 
#1 of type `&Arc<Pool<Sqlite>>`
    |
note: function defined here
   --> src\commands\collaboration.rs:384:14
    |
384 | pub async fn delete_old_notifications(
    |              ^^^^^^^^^^^^^^^^^^^^^^^^
help: remove the extra argument
    |
389 -     delete_old_notifications(&pool, days_old)
389 +     delete_old_notifications(days_old)
    |

error[E0277]: the trait bound `std::string::String: 
From<StoryWeaverError>` is not satisfied
   --> src\commands\collaboration.rs:389:5
    |
389 | /     delete_old_notifications(&pool, days_old)
390 | |         .await
391 | |         .map_err(StoryWeaverError::database)
    | |____________________________________________^ the trait 
`From<StoryWeaverError>` is not implemented for 
`std::string::String`
    |
    = help: the following other types implement trait 
`From<T>`:
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements 
`From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<AssetKey>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, 
str>>`
              `std::string::String` implements `From<Uuid>`
              `std::string::String` implements `From<char>`
            and 8 others
    = note: required for `StoryWeaverError` to implement 
`Into<std::string::String>`
note: required by a bound in `StoryWeaverError::database`
   --> src\error.rs:213:24
    |
213 |     pub fn database<S: Into<String>>(message: S) -> Self 
{
    |                        ^^^^^^^^^^^^ required by this 
bound in `StoryWeaverError::database`

error[E0277]: the trait bound `std::string::String: 
From<StoryWeaverError>` is not satisfied
   --> src\commands\collaboration.rs:391:18
    |
391 |         .map_err(StoryWeaverError::database)
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait 
`From<StoryWeaverError>` is not implemented for 
`std::string::String`
    |
    = help: the following other types implement trait 
`From<T>`:
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements 
`From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<AssetKey>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, 
str>>`
              `std::string::String` implements `From<Uuid>`
              `std::string::String` implements `From<char>`
            and 8 others
    = note: required for `StoryWeaverError` to implement 
`Into<std::string::String>`
note: required by a bound in `StoryWeaverError::database`
   --> src\error.rs:213:24
    |
213 |     pub fn database<S: Into<String>>(message: S) -> Self 
{
    |                        ^^^^^^^^^^^^ required by this 
bound in `StoryWeaverError::database`

error[E0107]: type alias takes 1 generic argument but 2 
generic arguments were supplied
   --> src\commands\plugin.rs:23:6
    |
23  | ) -> Result<Plugin, StoryWeaverError> {
    |      ^^^^^^       ------------------ help: remove the 
unnecessary generic argument
    |      |
    |      expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> src\error.rs:425:10
    |
425 | pub type Result<T> = std::result::Result<T, 
StoryWeaverError>;
    |          ^^^^^^ -

error[E0107]: type alias takes 1 generic argument but 2 
generic arguments were supplied
   --> src\commands\plugin.rs:74:6
    |
74  | ) -> Result<Option<Plugin>, StoryWeaverError> {
    |      ^^^^^^               ------------------ help: 
remove the unnecessary generic argument
    |      |
    |      expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> src\error.rs:425:10
    |
425 | pub type Result<T> = std::result::Result<T, 
StoryWeaverError>;
    |          ^^^^^^ -

error[E0107]: type alias takes 1 generic argument but 2 
generic arguments were supplied
   --> src\commands\plugin.rs:92:6
    |
92  | ) -> Result<Vec<PluginSearchResult>, StoryWeaverError> {
    |      ^^^^^^                        ------------------ 
help: remove the unnecessary generic argument
    |      |
    |      expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> src\error.rs:425:10
    |
425 | pub type Result<T> = std::result::Result<T, 
StoryWeaverError>;
    |          ^^^^^^ -

error[E0107]: type alias takes 1 generic argument but 2 
generic arguments were supplied
   --> src\commands\plugin.rs:155:6
    |
155 | ) -> Result<(), StoryWeaverError> {
    |      ^^^^^^   ------------------ help: remove the 
unnecessary generic argument
    |      |
    |      expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> src\error.rs:425:10
    |
425 | pub type Result<T> = std::result::Result<T, 
StoryWeaverError>;
    |          ^^^^^^ -

error[E0107]: type alias takes 1 generic argument but 2 
generic arguments were supplied
   --> src\commands\plugin.rs:210:6
    |
210 | ) -> Result<(), StoryWeaverError> {
    |      ^^^^^^   ------------------ help: remove the 
unnecessary generic argument
    |      |
    |      expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> src\error.rs:425:10
    |
425 | pub type Result<T> = std::result::Result<T, 
StoryWeaverError>;
    |          ^^^^^^ -

error[E0107]: type alias takes 1 generic argument but 2 
generic arguments were supplied
   --> src\commands\plugin.rs:225:6
    |
225 | ) -> Result<PluginExecutionResult, StoryWeaverError> {
    |      ^^^^^^                      ------------------ 
help: remove the unnecessary generic argument
    |      |
    |      expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> src\error.rs:425:10
    |
425 | pub type Result<T> = std::result::Result<T, 
StoryWeaverError>;
    |          ^^^^^^ -

error[E0107]: type alias takes 1 generic argument but 2 
generic arguments were supplied
   --> src\commands\plugin.rs:277:6
    |
277 | ) -> Result<(), StoryWeaverError> {
    |      ^^^^^^   ------------------ help: remove the 
unnecessary generic argument
    |      |
    |      expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> src\error.rs:425:10
    |
425 | pub type Result<T> = std::result::Result<T, 
StoryWeaverError>;
    |          ^^^^^^ -

error[E0107]: type alias takes 1 generic argument but 2 
generic arguments were supplied
   --> src\commands\plugin.rs:304:6
    |
304 | ) -> Result<Vec<PluginRating>, StoryWeaverError> {
    |      ^^^^^^                  ------------------ help: 
remove the unnecessary generic argument
    |      |
    |      expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> src\error.rs:425:10
    |
425 | pub type Result<T> = std::result::Result<T, 
StoryWeaverError>;
    |          ^^^^^^ -

error[E0107]: type alias takes 1 generic argument but 2 
generic arguments were supplied
   --> src\commands\plugin.rs:316:6
    |
316 | ) -> Result<Option<PluginUsageStats>, StoryWeaverError> {
    |      ^^^^^^                         ------------------ 
help: remove the unnecessary generic argument
    |      |
    |      expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> src\error.rs:425:10
    |
425 | pub type Result<T> = std::result::Result<T, 
StoryWeaverError>;
    |          ^^^^^^ -

error[E0107]: type alias takes 1 generic argument but 2 
generic arguments were supplied
   --> src\commands\plugin.rs:331:6
    |
331 | ) -> Result<Vec<PluginExecutionHistory>, 
StoryWeaverError> {
    |      ^^^^^^                            
------------------ help: remove the unnecessary generic 
argument
    |      |
    |      expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> src\error.rs:425:10
    |
425 | pub type Result<T> = std::result::Result<T, 
StoryWeaverError>;
    |          ^^^^^^ -

error[E0107]: type alias takes 1 generic argument but 2 
generic arguments were supplied
   --> src\commands\plugin.rs:349:6
    |
349 | ) -> Result<Vec<PluginTemplate>, StoryWeaverError> {
    |      ^^^^^^                    ------------------ help: 
remove the unnecessary generic argument
    |      |
    |      expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> src\error.rs:425:10
    |
425 | pub type Result<T> = std::result::Result<T, 
StoryWeaverError>;
    |          ^^^^^^ -

error[E0107]: type alias takes 1 generic argument but 2 
generic arguments were supplied
   --> src\commands\plugin.rs:381:6
    |
381 | ) -> Result<Vec<Plugin>, StoryWeaverError> {
    |      ^^^^^^            ------------------ help: remove 
the unnecessary generic argument
    |      |
    |      expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> src\error.rs:425:10
    |
425 | pub type Result<T> = std::result::Result<T, 
StoryWeaverError>;
    |          ^^^^^^ -

error[E0107]: type alias takes 1 generic argument but 2 
generic arguments were supplied
   --> src\commands\plugin.rs:414:6
    |
414 | ) -> Result<(), StoryWeaverError> {
    |      ^^^^^^   ------------------ help: remove the 
unnecessary generic argument
    |      |
    |      expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> src\error.rs:425:10
    |
425 | pub type Result<T> = std::result::Result<T, 
StoryWeaverError>;
    |          ^^^^^^ -

error[E0107]: type alias takes 1 generic argument but 2 
generic arguments were supplied
   --> src\commands\plugin.rs:448:6
    |
448 | ) -> Result<Plugin, StoryWeaverError> {
    |      ^^^^^^       ------------------ help: remove the 
unnecessary generic argument
    |      |
    |      expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> src\error.rs:425:10
    |
425 | pub type Result<T> = std::result::Result<T, 
StoryWeaverError>;
    |          ^^^^^^ -

error[E0107]: type alias takes 1 generic argument but 2 
generic arguments were supplied
   --> src\commands\plugin.rs:493:6
    |
493 | ) -> Result<PluginTemplate, StoryWeaverError> {
    |      ^^^^^^               ------------------ help: 
remove the unnecessary generic argument
    |      |
    |      expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> src\error.rs:425:10
    |
425 | pub type Result<T> = std::result::Result<T, 
StoryWeaverError>;
    |          ^^^^^^ -

error[E0308]: mismatched types
  --> src\commands\plugin.rs:49:20
   |
49 |         variables: variables.map(|v| v.to_string()),
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 
expected `String`, found `Option<String>`
   |
   = note: expected struct `std::string::String`
                found enum 
`std::option::Option<std::string::String>`
help: consider using `Option::expect` to unwrap the 
`std::option::Option<std::string::String>` value, panicking if 
the value is an `Option::None`
   |
49 |         variables: variables.map(|v| 
v.to_string()).expect("REASON"),
   |                                                    
+++++++++++++++++

error[E0308]: mismatched types
  --> src\commands\plugin.rs:51:9
   |
51 |         temperature,
   |         ^^^^^^^^^^^ expected `f32`, found `Option<f64>`
   |
   = note: expected type `f32`
              found enum `std::option::Option<f64>`

error[E0308]: mismatched types
  --> src\commands\plugin.rs:55:15
   |
55 |         tags: tags.map(|t| t.join(",")),
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^ expected 
`String`, found `Option<String>`
   |
   = note: expected struct `std::string::String`
                found enum 
`std::option::Option<std::string::String>`
help: consider using `Option::expect` to unwrap the 
`std::option::Option<std::string::String>` value, panicking if 
the value is an `Option::None`
   |
55 |         tags: tags.map(|t| t.join(",")).expect("REASON"),
   |                                        +++++++++++++++++

error[E0308]: mismatched types
  --> src\commands\plugin.rs:57:22
   |
57 |         stage_count: Some(1),
   |                      ^^^^^^^ expected `i32`, found 
`Option<{integer}>`
   |
   = note: expected type `i32`
              found enum `std::option::Option<{integer}>`

error[E0308]: mismatched types
  --> src\commands\plugin.rs:58:9
   |
58 |         creator_id,
   |         ^^^^^^^^^^ expected `Option<String>`, found 
`String`
   |
   = note: expected enum 
`std::option::Option<std::string::String>`
            found struct `std::string::String`
help: try wrapping the expression in `Some`
   |
58 |         creator_id: Some(creator_id),
   |         +++++++++++++++++          +

error[E0061]: this function takes 12 arguments but 2 arguments 
were supplied
  --> src\commands\plugin.rs:65:5
   |
65 |     create_plugin(&pool, plugin)
   |     ^^^^^^^^^^^^^---------------
   |                  |       |
   |                  |       expected `String`, found `Plugin`
   |                  multiple arguments are missing
   |
note: expected `String`, found `&Arc<Pool<Sqlite>>`
  --> src\commands\plugin.rs:65:19
   |
65 |     create_plugin(&pool, plugin)
   |                   ^^^^^
   = note: expected struct `std::string::String`
           found reference `&Arc<Pool<Sqlite>>`
note: function defined here
  --> src\commands\plugin.rs:10:14
   |
10 | pub async fn create_plugin(
   |              ^^^^^^^^^^^^^
11 |     name: String,
   |     ------------
12 |     description: String,
   |     -------------------
13 |     version: String,
   |     ---------------
14 |     creator_id: String,
   |     ------------------
15 |     category: String,
   |     ----------------
16 |     visibility: String,
   |     ------------------
17 |     prompt_template: String,
   |     -----------------------
18 |     variables: Option<Value>,
   |     ------------------------
19 |     ai_model: Option<String>,
   |     ------------------------
20 |     temperature: Option<f64>,
   |     ------------------------
21 |     max_tokens: Option<i32>,
   |     -----------------------
22 |     tags: Option<Vec<String>>,
   |     -------------------------
help: provide the arguments
   |
65 -     create_plugin(&pool, plugin)
65 +     create_plugin(/* std::string::String */, /* 
std::string::String */, /* std::string::String */, /* 
std::string::String */, /* std::string::String */, /* 
std::string::String */, /* std::string::String */, /* 
std::option::Option<JsonValue> */, /* 
std::option::Option<std::string::String> */, /* 
std::option::Option<f64> */, /* std::option::Option<i32> */, 
/* std::option::Option<Vec<std::string::String>> */)
   |

error[E0308]: mismatched types
   --> src\commands\plugin.rs:77:29
    |
77  |     get_plugin_by_id(&pool, plugin_id)
    |     ----------------        ^^^^^^^^^ expected `&str`, 
found `i32`
    |     |
    |     arguments to this function are incorrect
    |
note: function defined here
   --> src\database\operations\plugin.rs:148:14
    |
148 | pub async fn get_plugin_by_id(
    |              ^^^^^^^^^^^^^^^^
149 |     pool: &SqlitePool,
150 |     plugin_id: &str,
    |     ---------------

error[E0061]: this function takes 7 arguments but 8 arguments 
were supplied
   --> src\commands\plugin.rs:126:5
    |
126 |     search_plugins(
    |     ^^^^^^^^^^^^^^
...
134 |         offset.unwrap_or(0),
    |         ------------------- unexpected argument #8 of 
type `i32`
    |
note: expected `Option<String>`, found `&Arc<Pool<Sqlite>>`
   --> src\commands\plugin.rs:127:9
    |
127 |         &pool,
    |         ^^^^^
    = note:   expected enum 
`std::option::Option<std::string::String>`
            found reference `&Arc<Pool<Sqlite>>`
note: expected `Option<String>`, found `Option<&str>`
   --> src\commands\plugin.rs:128:9
    |
128 |         query.as_deref(),
    |         ^^^^^^^^^^^^^^^^
    = note: expected enum 
`std::option::Option<std::string::String>`
               found enum `std::option::Option<&str>`
note: expected `Option<String>`, found `Option<PluginCategory>`
   --> src\commands\plugin.rs:129:9
    |
129 |         category_enum,
    |         ^^^^^^^^^^^^^
    = note: expected enum 
`std::option::Option<std::string::String>`
               found enum 
`std::option::Option<database::models::plugin::PluginCategory>`
note: expected `Option<Vec<String>>`, found `Option<&str>`
   --> src\commands\plugin.rs:130:9
    |
130 |         author.as_deref(),
    |         ^^^^^^^^^^^^^^^^^
    = note: expected enum 
`std::option::Option<Vec<std::string::String>>`
               found enum `std::option::Option<&str>`
note: expected `Option<String>`, found `Option<&[String]>`
   --> src\commands\plugin.rs:131:9
    |
131 |         tags.as_deref(),
    |         ^^^^^^^^^^^^^^^
    = note: expected enum 
`std::option::Option<std::string::String>`
               found enum 
`std::option::Option<&[std::string::String]>`
note: expected `Option<i32>`, found `PluginSortOrder`
   --> src\commands\plugin.rs:132:9
    |
132 |         sort_order,
    |         ^^^^^^^^^^
    = note: expected enum `std::option::Option<i32>`
               found enum 
`database::models::plugin::PluginSortOrder`
note: expected `Option<i32>`, found `i32`
   --> src\commands\plugin.rs:133:9
    |
133 |         limit.unwrap_or(20),
    |         ^^^^^^^^^^^^^^^^^^^
    = note: expected enum `std::option::Option<i32>`
               found type `i32`
note: function defined here
   --> src\commands\plugin.rs:84:14
    |
84  | pub async fn search_plugins(
    |              ^^^^^^^^^^^^^^
85  |     query: Option<String>,
    |     ---------------------
86  |     category: Option<String>,
    |     ------------------------
87  |     author: Option<String>,
    |     ----------------------
88  |     tags: Option<Vec<String>>,
    |     -------------------------
89  |     sort_by: Option<String>,
    |     -----------------------
90  |     limit: Option<i32>,
    |     ------------------
91  |     offset: Option<i32>,
    |     -------------------
help: try removing the method call
    |
128 -         query.as_deref(),
128 +         query,
    |
help: try wrapping the expression in `Some`
    |
133 |         Some(limit.unwrap_or(20)),
    |         +++++                   +
help: remove the extra argument
    |
127 ~         /* std::option::Option<std::string::String> */,
128 ~         /* std::option::Option<std::string::String> */,
129 ~         /* std::option::Option<std::string::String> */,
130 ~         /* std::option::Option<Vec<std::string::String>> 
*/,
131 ~         /* std::option::Option<std::string::String> */,
132 ~         /* std::option::Option<i32> */,
133 ~         /* std::option::Option<i32> */,
    |

error[E0061]: this function takes 12 arguments but 13 
arguments were supplied
   --> src\commands\plugin.rs:187:5
    |
187 |     update_plugin(
    |     ^^^^^^^^^^^^^
188 |         &pool,
    |         ----- unexpected argument #1 of type 
`&Arc<Pool<Sqlite>>`
    |
note: expected `Option<String>`, found `Option<&str>`
   --> src\commands\plugin.rs:190:9
    |
190 |         name.as_deref(),
    |         ^^^^^^^^^^^^^^^
    = note: expected enum 
`std::option::Option<std::string::String>`
               found enum `std::option::Option<&str>`
note: expected `Option<String>`, found `Option<&str>`
   --> src\commands\plugin.rs:191:9
    |
191 |         description.as_deref(),
    |         ^^^^^^^^^^^^^^^^^^^^^^
    = note: expected enum 
`std::option::Option<std::string::String>`
               found enum `std::option::Option<&str>`
note: expected `Option<String>`, found `Option<&str>`
   --> src\commands\plugin.rs:192:9
    |
192 |         version.as_deref(),
    |         ^^^^^^^^^^^^^^^^^^
    = note: expected enum 
`std::option::Option<std::string::String>`
               found enum `std::option::Option<&str>`
note: expected `Option<String>`, found `Option<PluginCategory>`
   --> src\commands\plugin.rs:193:9
    |
193 |         category_enum,
    |         ^^^^^^^^^^^^^
    = note: expected enum 
`std::option::Option<std::string::String>`
               found enum 
`std::option::Option<database::models::plugin::PluginCategory>`
note: expected `Option<String>`, found 
`Option<PluginVisibility>`
   --> src\commands\plugin.rs:194:9
    |
194 |         visibility_enum,
    |         ^^^^^^^^^^^^^^^
    = note: expected enum 
`std::option::Option<std::string::String>`
               found enum `std::option::Option<database::models
::plugin::PluginVisibility>`
note: expected `Option<String>`, found `Option<&str>`
   --> src\commands\plugin.rs:195:9
    |
195 |         code.as_deref(),
    |         ^^^^^^^^^^^^^^^
    = note: expected enum 
`std::option::Option<std::string::String>`
               found enum `std::option::Option<&str>`
note: expected `Option<Value>`, found `Option<&Value>`
   --> src\commands\plugin.rs:196:9
    |
196 |         variables.as_ref(),
    |         ^^^^^^^^^^^^^^^^^^
    = note: expected enum `std::option::Option<JsonValue>`
               found enum `std::option::Option<&JsonValue>`
note: expected `Option<String>`, found `Option<&str>`
   --> src\commands\plugin.rs:197:9
    |
197 |         icon_url.as_deref(),
    |         ^^^^^^^^^^^^^^^^^^^
    = note: expected enum 
`std::option::Option<std::string::String>`
               found enum `std::option::Option<&str>`
note: expected `Option<String>`, found `Option<&str>`
   --> src\commands\plugin.rs:198:9
    |
198 |         documentation_url.as_deref(),
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = note: expected enum 
`std::option::Option<std::string::String>`
               found enum `std::option::Option<&str>`
note: expected `Option<String>`, found `Option<&str>`
   --> src\commands\plugin.rs:199:9
    |
199 |         repository_url.as_deref(),
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^
    = note: expected enum 
`std::option::Option<std::string::String>`
               found enum `std::option::Option<&str>`
note: expected `Option<Vec<String>>`, found `Option<&[String]>`
   --> src\commands\plugin.rs:200:9
    |
200 |         tags.as_deref(),
    |         ^^^^^^^^^^^^^^^
    = note: expected enum 
`std::option::Option<Vec<std::string::String>>`
               found enum 
`std::option::Option<&[std::string::String]>`
note: function defined here
   --> src\commands\plugin.rs:142:14
    |
142 | pub async fn update_plugin(
    |              ^^^^^^^^^^^^^
143 |     plugin_id: i32,
144 |     name: Option<String>,
    |     --------------------
145 |     description: Option<String>,
    |     ---------------------------
146 |     version: Option<String>,
    |     -----------------------
147 |     category: Option<String>,
    |     ------------------------
148 |     visibility: Option<String>,
    |     --------------------------
149 |     code: Option<String>,
    |     --------------------
150 |     variables: Option<Value>,
    |     ------------------------
151 |     icon_url: Option<String>,
    |     ------------------------
152 |     documentation_url: Option<String>,
    |     ---------------------------------
153 |     repository_url: Option<String>,
    |     ------------------------------
154 |     tags: Option<Vec<String>>,
    |     -------------------------
help: try removing the method call
    |
190 -         name.as_deref(),
190 +         name,
    |
help: try removing the method call
    |
191 -         description.as_deref(),
191 +         description,
    |
help: try removing the method call
    |
192 -         version.as_deref(),
192 +         version,
    |
help: try removing the method call
    |
195 -         code.as_deref(),
195 +         code,
    |
help: try removing the method call
    |
196 -         variables.as_ref(),
196 +         variables,
    |
help: try removing the method call
    |
197 -         icon_url.as_deref(),
197 +         icon_url,
    |
help: try removing the method call
    |
198 -         documentation_url.as_deref(),
198 +         documentation_url,
    |
help: try removing the method call
    |
199 -         repository_url.as_deref(),
199 +         repository_url,
    |
help: try removing the method call
    |
200 -         tags.as_deref(),
200 +         tags,
    |
help: remove the extra argument
    |
188 ~         ,
189 |         plugin_id,
190 ~         /* std::option::Option<std::string::String> */,
191 ~         /* std::option::Option<std::string::String> */,
192 ~         /* std::option::Option<std::string::String> */,
193 ~         /* std::option::Option<std::string::String> */,
194 ~         /* std::option::Option<std::string::String> */,
195 ~         /* std::option::Option<std::string::String> */,
196 ~         /* std::option::Option<JsonValue> */,
197 ~         /* std::option::Option<std::string::String> */,
198 ~         /* std::option::Option<std::string::String> */,
199 ~         /* std::option::Option<std::string::String> */,
200 ~         /* std::option::Option<Vec<std::string::String>> 
*/,
    |

error[E0308]: mismatched types
   --> src\commands\plugin.rs:187:5
    |
155 |   ) -> Result<(), StoryWeaverError> {
    |        ---------------------------- expected 
`std::result::Result<(), StoryWeaverError>` because of return 
type
...
187 | /     update_plugin(
188 | |         &pool,
189 | |         plugin_id,
190 | |         name.as_deref(),
...   |
202 | |     .await
203 | |     .map_err(|e| format!("Failed to update plugin: 
{}", e))
    | 
|___________________________________________________________^ 
expected `Result<(), StoryWeaverError>`, found `Result<(), 
String>`
    |
    = note: expected enum `std::result::Result<_, 
StoryWeaverError>`
               found enum `std::result::Result<_, 
std::string::String>`
help: use `?` to coerce and return an appropriate `Err`, and 
wrap the resulting value in `Ok` so the expression remains of 
type `Result`
    |
187 ~     Ok(update_plugin(
188 |         &pool,
...
202 |     .await
203 ~     .map_err(|e| format!("Failed to update plugin: {}", 
e))?)
    |

error[E0061]: this function takes 1 argument but 2 arguments 
were supplied
   --> src\commands\plugin.rs:213:5
    |
213 |     delete_plugin(&pool, plugin_id)
    |     ^^^^^^^^^^^^^ ----- unexpected argument #1 of type 
`&Arc<Pool<Sqlite>>`
    |
note: function defined here
   --> src\commands\plugin.rs:208:14
    |
208 | pub async fn delete_plugin(
    |              ^^^^^^^^^^^^^
help: remove the extra argument
    |
213 -     delete_plugin(&pool, plugin_id)
213 +     delete_plugin(plugin_id)
    |

error[E0308]: mismatched types
   --> src\commands\plugin.rs:229:42
    |
229 |     let plugin = get_plugin_by_id(&pool, plugin_id)
    |                  ----------------        ^^^^^^^^^ 
expected `&str`, found `i32`
    |                  |
    |                  arguments to this function are incorrect
    |
note: function defined here
   --> src\database\operations\plugin.rs:148:14
    |
148 | pub async fn get_plugin_by_id(
    |              ^^^^^^^^^^^^^^^^
149 |     pool: &SqlitePool,
150 |     plugin_id: &str,
    |     ---------------

error[E0599]: no variant or associated item named `not_found` 
found for enum `StoryWeaverError` in the current scope
   --> src\commands\plugin.rs:232:42
    |
232 |         .ok_or_else(|| 
StoryWeaverError::not_found("Plugin not found".to_string()))?;
    |                                          ^^^^^^^^^ 
variant or associated item not found in `StoryWeaverError`
    |
   ::: src\error.rs:10:1
    |
10  | pub enum StoryWeaverError {
    | ------------------------- variant or associated item 
`not_found` not found for this enum
    |
note: if you're trying to build a new `StoryWeaverError` 
consider using one of the following associated functions:
      StoryWeaverError::database
      StoryWeaverError::file_operation
      StoryWeaverError::ai_provider
      StoryWeaverError::ai
      and 8 others
   --> src\error.rs:213:5
    |
213 |     pub fn database<S: Into<String>>(message: S) -> Self 
{
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
220 |     pub fn file_operation<S: Into<String>>(operation: S, 
path: S, message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
229 |     pub fn ai_provider<S: Into<String>>(provider: S, 
message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
^^^^^^^^^^^^^^^
...
237 |     pub fn ai<S: Into<String>>(message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: there is a variant with a similar name
    |
232 -         .ok_or_else(|| 
StoryWeaverError::not_found("Plugin not found".to_string()))?;
232 +         .ok_or_else(|| StoryWeaverError::NotFound { 
resource_type: /* value */, id: /* value */ })?;
    |

error[E0560]: struct 
`database::models::plugin::PluginExecutionRequest` has no 
field named `input_data`
   --> src\commands\plugin.rs:237:9
    |
237 |         input_data,
    |         ^^^^^^^^^^ 
`database::models::plugin::PluginExecutionRequest` does not 
have this field
    |
    = note: available fields are: `document_id`, 
`selected_text`, `cursor_position`

error[E0308]: mismatched types
   --> src\commands\plugin.rs:238:20
    |
238 |         variables: variables.unwrap_or(Value::Null),
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 
expected `HashMap<String, String>`, found `Value`
    |
    = note: expected struct `HashMap<std::string::String, 
std::string::String>`
                 found enum `JsonValue`

error[E0560]: struct 
`database::models::plugin::PluginExecutionRequest` has no 
field named `user_id`
   --> src\commands\plugin.rs:239:9
    |
239 |         user_id,
    |         ^^^^^^^ 
`database::models::plugin::PluginExecutionRequest` does not 
have this field
    |
    = note: available fields are: `document_id`, 
`selected_text`, `cursor_position`

error[E0560]: struct 
`database::models::plugin::PluginExecutionResult` has no field 
named `id`
   --> src\commands\plugin.rs:245:9
    |
245 |         id: 0, // Will be set by database
    |         ^^ 
`database::models::plugin::PluginExecutionResult` does not 
have this field
    |
    = note: available fields are: `result_text`, 
`credits_used`, `stage_results`

error[E0560]: struct 
`database::models::plugin::PluginExecutionResult` has no field 
named `plugin_id`
   --> src\commands\plugin.rs:246:9
    |
246 |         plugin_id,
    |         ^^^^^^^^^ 
`database::models::plugin::PluginExecutionResult` does not 
have this field
    |
    = note: available fields are: `result_text`, 
`credits_used`, `stage_results`

error[E0560]: struct 
`database::models::plugin::PluginExecutionResult` has no field 
named `input_data`
   --> src\commands\plugin.rs:247:9
    |
247 |         input_data: request.input_data.clone(),
    |         ^^^^^^^^^^ 
`database::models::plugin::PluginExecutionResult` does not 
have this field
    |
    = note: available fields are: `result_text`, 
`credits_used`, `stage_results`

error[E0609]: no field `input_data` on type 
`database::models::plugin::PluginExecutionRequest`
   --> src\commands\plugin.rs:247:29
    |
247 |         input_data: request.input_data.clone(),
    |                             ^^^^^^^^^^ unknown field
    |
    = note: available fields are: `plugin_id`, `variables`, 
`document_id`, `selected_text`, `cursor_position`

error[E0560]: struct 
`database::models::plugin::PluginExecutionResult` has no field 
named `output_data`
   --> src\commands\plugin.rs:248:9
    |
248 |         output_data: Value::String(format!("Executed 
plugin: {}", plugin.name)),
    |         ^^^^^^^^^^^ 
`database::models::plugin::PluginExecutionResult` does not 
have this field
    |
    = note: available fields are: `result_text`, 
`credits_used`, `stage_results`

error[E0560]: struct 
`database::models::plugin::PluginExecutionResult` has no field 
named `variables`
   --> src\commands\plugin.rs:249:9
    |
249 |         variables: request.variables.clone(),
    |         ^^^^^^^^^ 
`database::models::plugin::PluginExecutionResult` does not 
have this field
    |
    = note: available fields are: `result_text`, 
`credits_used`, `stage_results`

error[E0560]: struct 
`database::models::plugin::PluginExecutionResult` has no field 
named `user_id`
   --> src\commands\plugin.rs:253:9
    |
253 |         user_id: request.user_id.clone(),
    |         ^^^^^^^ 
`database::models::plugin::PluginExecutionResult` does not 
have this field
    |
    = note: available fields are: `result_text`, 
`credits_used`, `stage_results`

error[E0609]: no field `user_id` on type 
`database::models::plugin::PluginExecutionRequest`
   --> src\commands\plugin.rs:253:26
    |
253 |         user_id: request.user_id.clone(),
    |                          ^^^^^^^ unknown field
    |
    = note: available fields are: `plugin_id`, `variables`, 
`document_id`, `selected_text`, `cursor_position`

error[E0560]: struct 
`database::models::plugin::PluginExecutionResult` has no field 
named `executed_at`
   --> src\commands\plugin.rs:254:9
    |
254 |         executed_at: chrono::Utc::now(),
    |         ^^^^^^^^^^^ 
`database::models::plugin::PluginExecutionResult` does not 
have this field
    |
    = note: available fields are: `result_text`, 
`credits_used`, `stage_results`

error[E0061]: this function takes 7 arguments but 3 arguments 
were supplied
   --> src\commands\plugin.rs:258:5
    |
258 |     record_plugin_execution(&pool, &request, &result)
    |     ^^^^^^^^^^^^^^^^^^^^^^^--------------------------
    |                            |       |         |
    |                            |       |         expected 
`Value`, found `&PluginExecutionResult`
    |                            |       expected `Value`, 
found `&PluginExecutionRequest`
    |                            multiple arguments are missing
    |
note: expected `i32`, found `&Arc<Pool<Sqlite>>`
   --> src\commands\plugin.rs:258:29
    |
258 |     record_plugin_execution(&pool, &request, &result)
    |                             ^^^^^
    = note:   expected type `i32`
            found reference `&Arc<Pool<Sqlite>>`
note: function defined here
   --> src\commands\plugin.rs:406:14
    |
406 | pub async fn record_plugin_execution(
    |              ^^^^^^^^^^^^^^^^^^^^^^^
407 |     plugin_id: i32,
    |     --------------
408 |     input_data: Value,
    |     -----------------
409 |     output_data: Value,
    |     ------------------
410 |     execution_time_ms: i32,
    |     ----------------------
411 |     success: bool,
    |     -------------
412 |     error_message: Option<String>,
    |     -----------------------------
413 |     user_id: Option<String>,
    |     -----------------------
help: provide the arguments
    |
258 -     record_plugin_execution(&pool, &request, &result)
258 +     record_plugin_execution(/* i32 */, /* JsonValue */, 
/* JsonValue */, /* i32 */, /* bool */, /* 
std::option::Option<std::string::String> */, /* 
std::option::Option<std::string::String> */)
    |

error[E0061]: this function takes 3 arguments but 2 arguments 
were supplied
   --> src\commands\plugin.rs:263:11
    |
263 |           update_plugin_usage_stats(&*pool, &plugin_id)
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^-------------------- 
argument #3 of type `bool` is missing
    |
note: function defined here
   --> src\database\operations\plugin.rs:434:14
    |
434 | pub async fn update_plugin_usage_stats(
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^
...
437 |     success: bool,
    |     -------------
help: provide the argument
    |
263 |           update_plugin_usage_stats(&*pool, &plugin_id, 
/* bool */)
    |                                                       
++++++++++++

error[E0560]: struct `database::models::plugin::PluginRating` 
has no field named `user_id`
   --> src\commands\plugin.rs:287:9
    |
287 |         user_id,
    |         ^^^^^^^ `database::models::plugin::PluginRating` 
does not have this field
    |
    = note: available fields are: `user_identifier`, 
`review_text`

error[E0560]: struct `database::models::plugin::PluginRating` 
has no field named `review`
   --> src\commands\plugin.rs:289:9
    |
289 |         review,
    |         ^^^^^^ `database::models::plugin::PluginRating` 
does not have this field
    |
    = note: available fields are: `user_identifier`, 
`review_text`

error[E0061]: this function takes 5 arguments but 2 arguments 
were supplied
   --> src\commands\plugin.rs:293:5
    |
293 |     create_plugin_rating(&pool, plugin_rating)
    |     ^^^^^^^^^^^^^^^^^^^^----------------------
    |                         |       |
    |                         |       expected `i32`, found 
`PluginRating`
    |                         three arguments of type `&str`, 
`i32`, and `std::option::Option<&str>` are missing
    |
note: function defined here
   --> src\database\operations\plugin.rs:321:14
    |
321 | pub async fn create_plugin_rating(
    |              ^^^^^^^^^^^^^^^^^^^^
322 |     pool: &SqlitePool,
323 |     plugin_id: i32,
    |     --------------
324 |     user_identifier: &str,
    |     ---------------------
325 |     rating: i32,
    |     -----------
326 |     review: Option<&str>,
    |     --------------------
help: provide the arguments
    |
293 -     create_plugin_rating(&pool, plugin_rating)
293 +     create_plugin_rating(&pool, /* i32 */, /* &str */, 
/* i32 */, /* std::option::Option<&str> */)
    |

error[E0308]: mismatched types
   --> src\commands\plugin.rs:293:5
    |
277 |   ) -> Result<(), StoryWeaverError> {
    |        ---------------------------- expected 
`std::result::Result<(), StoryWeaverError>` because of return 
type
...
293 | /     create_plugin_rating(&pool, plugin_rating)
294 | |         .await
295 | |         .map_err(|e| 
StoryWeaverError::database(format!("Failed to rate plugin: 
{}", e)))
    | |________________________________________________________
_________________________________^ expected `Result<(), 
StoryWeaverError>`, found `Result<PluginRating, 
StoryWeaverError>`
    |
    = note: expected enum `std::result::Result<(), _>`
               found enum 
`std::result::Result<database::models::plugin::PluginRating, 
_>`

error[E0061]: this function takes 3 arguments but 4 arguments 
were supplied
   --> src\commands\plugin.rs:307:5
    |
307 |     get_plugin_ratings(&pool, plugin_id, 
limit.unwrap_or(10), offset.unwrap_or(0))
    |     ^^^^^^^^^^^^^^^^^^ -----  
------------------------------  ------------------- unexpected 
argument #4 of type `i32`
    |                        |      |          |
    |                        |      |          unexpected 
argument #3 of type `i32`
    |                        |      two arguments of type 
`std::option::Option<i32>` and `std::option::Option<i32>` are 
missing
    |                        unexpected argument #1 of type 
`&Arc<Pool<Sqlite>>`
    |
note: function defined here
   --> src\commands\plugin.rs:300:14
    |
300 | pub async fn get_plugin_ratings(
    |              ^^^^^^^^^^^^^^^^^^
301 |     plugin_id: i32,
302 |     limit: Option<i32>,
    |     ------------------
303 |     offset: Option<i32>,
    |     -------------------
help: did you mean
    |
307 -     get_plugin_ratings(&pool, plugin_id, 
limit.unwrap_or(10), offset.unwrap_or(0))
307 +     get_plugin_ratings(plugin_id, /* 
std::option::Option<i32> */, /* std::option::Option<i32> */)
    |

error[E0061]: this function takes 1 argument but 2 arguments 
were supplied
   --> src\commands\plugin.rs:319:5
    |
319 |     get_plugin_usage_stats(&pool, plugin_id)
    |     ^^^^^^^^^^^^^^^^^^^^^^ ----- unexpected argument #1 
of type `&Arc<Pool<Sqlite>>`
    |
note: function defined here
   --> src\commands\plugin.rs:314:14
    |
314 | pub async fn get_plugin_usage_stats(
    |              ^^^^^^^^^^^^^^^^^^^^^^
help: remove the extra argument
    |
319 -     get_plugin_usage_stats(&pool, plugin_id)
319 +     get_plugin_usage_stats(plugin_id)
    |

error[E0061]: this function takes 4 arguments but 5 arguments 
were supplied
   --> src\commands\plugin.rs:334:5
    |
334 |       get_plugin_execution_history(
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
335 |           &pool,
    |           ----- unexpected argument #1 of type 
`&Arc<Pool<Sqlite>>`
336 |           plugin_id,
337 | /         user_id.as_deref(),
338 | |         limit.unwrap_or(20),
    | |         -------------------
    | |_________|_________________|
    |           |                 two arguments of type 
`std::option::Option<i32>` and `std::option::Option<i32>` are 
missing
    |           unexpected argument #4 of type `i32`
339 |           offset.unwrap_or(0),
    |           ------------------- unexpected argument #5 of 
type `i32`
    |
note: expected `Option<String>`, found `Option<&str>`
   --> src\commands\plugin.rs:337:9
    |
337 |         user_id.as_deref(),
    |         ^^^^^^^^^^^^^^^^^^
    = note: expected enum 
`std::option::Option<std::string::String>`
               found enum `std::option::Option<&str>`
note: function defined here
   --> src\commands\plugin.rs:326:14
    |
326 | pub async fn get_plugin_execution_history(
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
327 |     plugin_id: Option<i32>,
328 |     user_id: Option<String>,
    |     -----------------------
329 |     limit: Option<i32>,
    |     ------------------
330 |     offset: Option<i32>,
    |     -------------------
help: try removing the method call
    |
337 -         user_id.as_deref(),
337 +         user_id,
    |
help: did you mean
    |
334 -     get_plugin_execution_history(
335 -         &pool,
336 -         plugin_id,
337 -         user_id.as_deref(),
338 -         limit.unwrap_or(20),
339 -         offset.unwrap_or(0),
340 -     )
334 +     get_plugin_execution_history(plugin_id, /* 
std::option::Option<std::string::String> */, /* 
std::option::Option<i32> */, /* std::option::Option<i32> */)
    |

error[E0061]: this function takes 1 argument but 2 arguments 
were supplied
   --> src\commands\plugin.rs:370:5
    |
370 |     get_plugin_templates(&pool, category_enum)
    |     ^^^^^^^^^^^^^^^^^^^^        ------------- unexpected 
argument #2 of type 
`std::option::Option<database::models::plugin::PluginCategory>`
    |
note: expected `Option<String>`, found `&Arc<Pool<Sqlite>>`
   --> src\commands\plugin.rs:370:26
    |
370 |     get_plugin_templates(&pool, category_enum)
    |                          ^^^^^
    = note:   expected enum 
`std::option::Option<std::string::String>`
            found reference `&Arc<Pool<Sqlite>>`
note: function defined here
   --> src\commands\plugin.rs:347:14
    |
347 | pub async fn get_plugin_templates(
    |              ^^^^^^^^^^^^^^^^^^^^
348 |     category: Option<String>,
    |     ------------------------
help: remove the extra argument
    |
370 -     get_plugin_templates(&pool, category_enum)
370 +     get_plugin_templates(/* 
std::option::Option<std::string::String> */)
    |

error[E0061]: this function takes 3 arguments but 4 arguments 
were supplied
   --> src\commands\plugin.rs:399:5
    |
399 |     get_plugins(&pool, category_enum, 
limit.unwrap_or(20), offset.unwrap_or(0))
    |     ^^^^^^^^^^^                                          
  ------------------- unexpected argument #4 of type `i32`
    |
note: expected `Option<String>`, found `&Arc<Pool<Sqlite>>`
   --> src\commands\plugin.rs:399:17
    |
399 |     get_plugins(&pool, category_enum, 
limit.unwrap_or(20), offset.unwrap_or(0))
    |                 ^^^^^
    = note:   expected enum 
`std::option::Option<std::string::String>`
            found reference `&Arc<Pool<Sqlite>>`
note: expected `Option<i32>`, found `Option<PluginCategory>`
   --> src\commands\plugin.rs:399:24
    |
399 |     get_plugins(&pool, category_enum, 
limit.unwrap_or(20), offset.unwrap_or(0))
    |                        ^^^^^^^^^^^^^
    = note: expected enum `std::option::Option<i32>`
               found enum 
`std::option::Option<database::models::plugin::PluginCategory>`
note: expected `Option<i32>`, found `i32`
   --> src\commands\plugin.rs:399:39
    |
399 |     get_plugins(&pool, category_enum, 
limit.unwrap_or(20), offset.unwrap_or(0))
    |                                       ^^^^^^^^^^^^^^^^^^^
    = note: expected enum `std::option::Option<i32>`
               found type `i32`
note: function defined here
   --> src\commands\plugin.rs:377:14
    |
377 | pub async fn get_plugins(
    |              ^^^^^^^^^^^
378 |     category: Option<String>,
    |     ------------------------
379 |     limit: Option<i32>,
    |     ------------------
380 |     offset: Option<i32>,
    |     -------------------
help: try wrapping the expression in `Some`
    |
399 |     get_plugins(&pool, category_enum, 
Some(limit.unwrap_or(20)), offset.unwrap_or(0))
    |                                       +++++              
     +
help: remove the extra argument
    |
399 -     get_plugins(&pool, category_enum, 
limit.unwrap_or(20), offset.unwrap_or(0))
399 +     get_plugins(/* 
std::option::Option<std::string::String> */, /* 
std::option::Option<i32> */, /* std::option::Option<i32> */)
    |

error[E0560]: struct 
`database::models::plugin::PluginExecutionRequest` has no 
field named `input_data`
   --> src\commands\plugin.rs:419:9
    |
419 |         input_data: input_data.clone(),
    |         ^^^^^^^^^^ 
`database::models::plugin::PluginExecutionRequest` does not 
have this field
    |
    = note: available fields are: `document_id`, 
`selected_text`, `cursor_position`

error[E0308]: mismatched types
   --> src\commands\plugin.rs:420:20
    |
420 |         variables: Value::Null,
    |                    ^^^^^^^^^^^ expected `HashMap<String, 
String>`, found `Value`
    |
    = note: expected struct `HashMap<std::string::String, 
std::string::String>`
                 found enum `JsonValue`

error[E0560]: struct 
`database::models::plugin::PluginExecutionRequest` has no 
field named `user_id`
   --> src\commands\plugin.rs:421:9
    |
421 |         user_id: user_id.clone(),
    |         ^^^^^^^ 
`database::models::plugin::PluginExecutionRequest` does not 
have this field
    |
    = note: available fields are: `document_id`, 
`selected_text`, `cursor_position`

error[E0560]: struct 
`database::models::plugin::PluginExecutionResult` has no field 
named `id`
   --> src\commands\plugin.rs:425:9
    |
425 |         id: 0,
    |         ^^ 
`database::models::plugin::PluginExecutionResult` does not 
have this field
    |
    = note: available fields are: `result_text`, 
`credits_used`, `stage_results`

error[E0560]: struct 
`database::models::plugin::PluginExecutionResult` has no field 
named `plugin_id`
   --> src\commands\plugin.rs:426:9
    |
426 |         plugin_id,
    |         ^^^^^^^^^ 
`database::models::plugin::PluginExecutionResult` does not 
have this field
    |
    = note: available fields are: `result_text`, 
`credits_used`, `stage_results`

error[E0560]: struct 
`database::models::plugin::PluginExecutionResult` has no field 
named `input_data`
   --> src\commands\plugin.rs:427:9
    |
427 |         input_data,
    |         ^^^^^^^^^^ 
`database::models::plugin::PluginExecutionResult` does not 
have this field
    |
    = note: available fields are: `result_text`, 
`credits_used`, `stage_results`

error[E0560]: struct 
`database::models::plugin::PluginExecutionResult` has no field 
named `output_data`
   --> src\commands\plugin.rs:428:9
    |
428 |         output_data,
    |         ^^^^^^^^^^^ 
`database::models::plugin::PluginExecutionResult` does not 
have this field
    |
    = note: available fields are: `result_text`, 
`credits_used`, `stage_results`

error[E0560]: struct 
`database::models::plugin::PluginExecutionResult` has no field 
named `variables`
   --> src\commands\plugin.rs:429:9
    |
429 |         variables: Value::Null,
    |         ^^^^^^^^^ 
`database::models::plugin::PluginExecutionResult` does not 
have this field
    |
    = note: available fields are: `result_text`, 
`credits_used`, `stage_results`

error[E0308]: mismatched types
   --> src\commands\plugin.rs:430:9
    |
430 |         execution_time_ms,
    |         ^^^^^^^^^^^^^^^^^ expected `i64`, found `i32`
    |
help: you can convert an `i32` to an `i64`
    |
430 |         execution_time_ms: execution_time_ms.into(),
    |         ++++++++++++++++++                  +++++++

error[E0560]: struct 
`database::models::plugin::PluginExecutionResult` has no field 
named `user_id`
   --> src\commands\plugin.rs:433:9
    |
433 |         user_id,
    |         ^^^^^^^ 
`database::models::plugin::PluginExecutionResult` does not 
have this field
    |
    = note: available fields are: `result_text`, 
`credits_used`, `stage_results`

error[E0560]: struct 
`database::models::plugin::PluginExecutionResult` has no field 
named `executed_at`
   --> src\commands\plugin.rs:434:9
    |
434 |         executed_at: chrono::Utc::now(),
    |         ^^^^^^^^^^^ 
`database::models::plugin::PluginExecutionResult` does not 
have this field
    |
    = note: available fields are: `result_text`, 
`credits_used`, `stage_results`

error[E0061]: this function takes 7 arguments but 3 arguments 
were supplied
   --> src\commands\plugin.rs:437:5
    |
437 |     record_plugin_execution(&pool, &request, &result)
    |     ^^^^^^^^^^^^^^^^^^^^^^^--------------------------
    |                            |       |         |
    |                            |       |         expected 
`Value`, found `&PluginExecutionResult`
    |                            |       expected `Value`, 
found `&PluginExecutionRequest`
    |                            multiple arguments are missing
    |
note: expected `i32`, found `&Arc<Pool<Sqlite>>`
   --> src\commands\plugin.rs:437:29
    |
437 |     record_plugin_execution(&pool, &request, &result)
    |                             ^^^^^
    = note:   expected type `i32`
            found reference `&Arc<Pool<Sqlite>>`
note: function defined here
   --> src\commands\plugin.rs:406:14
    |
406 | pub async fn record_plugin_execution(
    |              ^^^^^^^^^^^^^^^^^^^^^^^
407 |     plugin_id: i32,
    |     --------------
408 |     input_data: Value,
    |     -----------------
409 |     output_data: Value,
    |     ------------------
410 |     execution_time_ms: i32,
    |     ----------------------
411 |     success: bool,
    |     -------------
412 |     error_message: Option<String>,
    |     -----------------------------
413 |     user_id: Option<String>,
    |     -----------------------
help: provide the arguments
    |
437 -     record_plugin_execution(&pool, &request, &result)
437 +     record_plugin_execution(/* i32 */, /* JsonValue */, 
/* JsonValue */, /* i32 */, /* bool */, /* 
std::option::Option<std::string::String> */, /* 
std::option::Option<std::string::String> */)
    |

error[E0599]: no variant or associated item named `not_found` 
found for enum `StoryWeaverError` in the current scope
   --> src\commands\plugin.rs:455:42
    |
455 |         .ok_or_else(|| 
StoryWeaverError::not_found("Plugin template not 
found".to_string()))?;
    |                                          ^^^^^^^^^ 
variant or associated item not found in `StoryWeaverError`
    |
   ::: src\error.rs:10:1
    |
10  | pub enum StoryWeaverError {
    | ------------------------- variant or associated item 
`not_found` not found for this enum
    |
note: if you're trying to build a new `StoryWeaverError` 
consider using one of the following associated functions:
      StoryWeaverError::database
      StoryWeaverError::file_operation
      StoryWeaverError::ai_provider
      StoryWeaverError::ai
      and 8 others
   --> src\error.rs:213:5
    |
213 |     pub fn database<S: Into<String>>(message: S) -> Self 
{
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
220 |     pub fn file_operation<S: Into<String>>(operation: S, 
path: S, message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
229 |     pub fn ai_provider<S: Into<String>>(provider: S, 
message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
^^^^^^^^^^^^^^^
...
237 |     pub fn ai<S: Into<String>>(message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: there is a variant with a similar name
    |
455 -         .ok_or_else(|| 
StoryWeaverError::not_found("Plugin template not 
found".to_string()))?;
455 +         .ok_or_else(|| StoryWeaverError::NotFound { 
resource_type: /* value */, id: /* value */ })?;
    |

error[E0308]: mismatched types
   --> src\commands\plugin.rs:463:20
    |
463 |         variables: variables.map(|v| v.to_string()),
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 
expected `String`, found `Option<String>`
    |
    = note: expected struct `std::string::String`
                 found enum 
`std::option::Option<std::string::String>`
help: consider using `Option::expect` to unwrap the 
`std::option::Option<std::string::String>` value, panicking if 
the value is an `Option::None`
    |
463 |         variables: variables.map(|v| 
v.to_string()).expect("REASON"),
    |                                                    
+++++++++++++++++

error[E0308]: mismatched types
   --> src\commands\plugin.rs:510:22
    |
510 |         description: Some(description),
    |                      ^^^^^^^^^^^^^^^^^ expected 
`String`, found `Option<String>`
    |
    = note: expected struct `std::string::String`
                 found enum 
`std::option::Option<std::string::String>`

error[E0560]: struct 
`database::models::plugin::PluginTemplate` has no field named 
`template_code`
   --> src\commands\plugin.rs:512:9
    |
512 |         template_code,
    |         ^^^^^^^^^^^^^ unknown field
    |
help: a field with a similar name exists
    |
512 -         template_code,
512 +         template_data,
    |

error[E0560]: struct 
`database::models::plugin::PluginTemplate` has no field named 
`variables_schema`
   --> src\commands\plugin.rs:513:9
    |
513 |         variables_schema,
    |         ^^^^^^^^^^^^^^^^ 
`database::models::plugin::PluginTemplate` does not have this 
field
    |
    = note: available fields are: `template_data`, 
`is_official`

error[E0560]: struct 
`database::models::plugin::PluginTemplate` has no field named 
`example_usage`
   --> src\commands\plugin.rs:514:9
    |
514 |         example_usage,
    |         ^^^^^^^^^^^^^ 
`database::models::plugin::PluginTemplate` does not have this 
field
    |
    = note: available fields are: `template_data`, 
`is_official`

error[E0560]: struct 
`database::models::plugin::PluginTemplate` has no field named 
`updated_at`
   --> src\commands\plugin.rs:516:9
    |
516 |         updated_at: chrono::Utc::now(),
    |         ^^^^^^^^^^ 
`database::models::plugin::PluginTemplate` does not have this 
field
    |
    = note: available fields are: `template_data`, 
`is_official`

error[E0609]: no field `template_code` on type 
`database::models::plugin::PluginTemplate`
   --> src\commands\plugin.rs:519:103
    |
519 |     create_plugin_template(&pool, &template.name, 
&template.description, template.category, 
&template.template_code, template.variables_s...
    |                                                          
                                             ^^^^^^^^^^^^^ 
unknown field
    |
help: a field with a similar name exists
    |
519 -     create_plugin_template(&pool, &template.name, 
&template.description, template.category, 
&template.template_code, template.variables_schema)
519 +     create_plugin_template(&pool, &template.name, 
&template.description, template.category, 
&template.template_data, template.variables_schema)
    |

error[E0609]: no field `variables_schema` on type 
`database::models::plugin::PluginTemplate`
   --> src\commands\plugin.rs:519:127
    |
519 | ...emplate.category, &template.template_code, 
template.variables_schema)
    |                                                        
^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `id`, `name`, `description`, 
`category`, `template_data` ... and 2 others

error[E0308]: arguments to this function are incorrect
   --> src\commands\plugin.rs:519:5
    |
519 |     create_plugin_template(&pool, &template.name, 
&template.description, template.category, 
&template.template_code, template.variables_s...
    |     ^^^^^^^^^^^^^^^^^^^^^^        --------------  
---------------------  ----------------- expected `String`, 
found `PluginCategory`
    |                                   |               |
    |                                   |               
expected `String`, found `&String`
    |                                   expected `String`, 
found `&String`
    |
note: expected `String`, found `&Arc<Pool<Sqlite>>`
   --> src\commands\plugin.rs:519:28
    |
519 |     create_plugin_template(&pool, &template.name, 
&template.description, template.category, 
&template.template_code, template.variables_s...
    |                            ^^^^^
    = note: expected struct `std::string::String`
            found reference `&Arc<Pool<Sqlite>>`
note: function defined here
   --> src\commands\plugin.rs:486:14
    |
486 | pub async fn create_plugin_template(
    |              ^^^^^^^^^^^^^^^^^^^^^^
487 |     name: String,
    |     ------------
488 |     description: String,
    |     -------------------
489 |     category: String,
    |     ----------------
490 |     template_code: String,
    |     ---------------------
help: consider removing the borrow
    |
519 -     create_plugin_template(&pool, &template.name, 
&template.description, template.category, 
&template.template_code, template.variables_schema)
519 +     create_plugin_template(&pool, template.name, 
&template.description, template.category, 
&template.template_code, template.variables_schema)
    |
help: consider removing the borrow
    |
519 -     create_plugin_template(&pool, &template.name, 
&template.description, template.category, 
&template.template_code, template.variables_schema)
519 +     create_plugin_template(&pool, &template.name, 
template.description, template.category, 
&template.template_code, template.variables_schema)
    |
help: try using a conversion method
    |
519 |     create_plugin_template(&pool, &template.name, 
&template.description, template.category.to_string(), 
&template.template_code, template.variables_schema)
    |                                                          
                                 ++++++++++++

warning: unused variable: `width`
  --> src\commands\canvas.rs:15:5
   |
15 |     width: i32,
   |     ^^^^^ help: if this is intentional, prefix it with an 
underscore: `_width`

warning: unused variable: `height`
  --> src\commands\canvas.rs:16:5
   |
16 |     height: i32,
   |     ^^^^^^ help: if this is intentional, prefix it with 
an underscore: `_height`

warning: unused variable: `z_index`
  --> src\commands\canvas.rs:98:5
   |
98 |     z_index: Option<i32>,
   |     ^^^^^^^ help: if this is intentional, prefix it with 
an underscore: `_z_index`

warning: unused variable: `template`
   --> src\commands\canvas.rs:224:9
    |
224 |     let template = OutlineTemplate {
    |         ^^^^^^^^ help: if this is intentional, prefix it 
with an underscore: `_template`

warning: unused variable: `options`
   --> src\commands\canvas.rs:282:5
    |
282 |     options: Option<Value>,
    |     ^^^^^^^ help: if this is intentional, prefix it with 
an underscore: `_options`

warning: unused variable: `request`
   --> src\commands\canvas.rs:295:9
    |
295 |     let request = CanvasExportRequest {
    |         ^^^^^^^ help: if this is intentional, prefix it 
with an underscore: `_request`

warning: unused variable: `database_url`
  --> src\database\mod.rs:34:9
   |
34 |     let database_url = format!("sqlite:{}", 
db_path.display());
   |         ^^^^^^^^^^^^ help: if this is intentional, prefix 
it with an underscore: `_database_url`

warning: unused variable: `severity`
   --> src\database\operations\series_consistency_ops.rs:445:9
    |
445 |         severity: ConflictSeverity,
    |         ^^^^^^^^ help: if this is intentional, prefix it 
with an underscore: `_severity`

warning: unused variable: `severity`
   --> src\database\operations\series_consistency_ops.rs:449:47
    |
449 |             .filter(|c| matches!(&c.severity, severity))
    |                                               ^^^^^^^^ 
help: if this is intentional, prefix it with an underscore: 
`_severity`

warning: unused variable: `model`
  --> src\database\operations\ai_card_ops.rs:97:70
   |
97 |     pub async fn get_by_model(pool: &Pool<Sqlite>, 
project_id: &str, model: &str) -> Result<Vec<AIResponseCard>> {
   |                                                           
           ^^^^^ help: if this is intentional, prefix it with 
an underscore: `_model`

error[E0599]: `i64` is not an iterator
  --> src\database\operations\streaming_session_ops.rs:74:22
   |
74 |             id: r.id.map(|id| id as i32),
   |                      ^^^ `i64` is not an iterator
   |
   = note: the following trait bounds were not satisfied:
           `i64: Iterator`
           which is required by `&mut i64: Iterator`

error[E0605]: non-primitive cast: `std::option::Option<i64>` 
as `i32`
   --> src\database\operations\streaming_session_ops.rs:142:22
    |
142 |             id: Some(r.id as i32),
    |                      ^^^^^^^^^^^ an `as` expression can 
be used to convert enum types to numeric types only if the 
enum type is unit-only or field-less
    |
    = note: see https://doc.rust-lang.org/reference/items/enume
rations.html#casting for more information

error[E0605]: non-primitive cast: `std::option::Option<i64>` 
as `i32`
   --> src\database\operations\streaming_session_ops.rs:176:23
    |
176 |              id: Some(r.id as i32),
    |                       ^^^^^^^^^^^ an `as` expression can 
be used to convert enum types to numeric types only if the 
enum type is unit-only or field-less
    |
    = note: see https://doc.rust-lang.org/reference/items/enume
rations.html#casting for more information

error[E0599]: `i64` is not an iterator
   --> src\database\operations\streaming_session_ops.rs:209:22
    |
209 |             id: r.id.map(|id| id as i32),
    |                      ^^^ `i64` is not an iterator
    |
    = note: the following trait bounds were not satisfied:
            `i64: Iterator`
            which is required by `&mut i64: Iterator`

error[E0599]: no method named `unwrap_or_else` found for 
struct `NaiveDateTime` in the current scope
   --> src\database\operations\collaboration.rs:463:28
    |
463 |             row.created_at.unwrap_or_else(|| 
chrono::Utc::now().naive_utc()), 
    |                            ^^^^^^^^^^^^^^ method not 
found in `NaiveDateTime`

error[E0599]: no method named `unwrap_or_else` found for 
struct `NaiveDateTime` in the current scope
   --> src\database\operations\collaboration.rs:467:28
    |
467 |             row.updated_at.unwrap_or_else(|| 
chrono::Utc::now().naive_utc()), 
    |                            ^^^^^^^^^^^^^^ method not 
found in `NaiveDateTime`

error[E0599]: no method named `unwrap_or` found for struct 
`std::string::String` in the current scope
   --> src\database\operations\collaboration.rs:470:32
    |
470 |         metadata: 
row.metadata.unwrap_or("{}".to_string()),
    |                                ^^^^^^^^^ method not 
found in `String`

error[E0599]: `i64` is not an iterator
   --> src\database\operations\plugin.rs:168:24
    |
168 |             id: row.id.map(|id| id as i32).unwrap_or(0),
    |                        ^^^ `i64` is not an iterator
    |
    = note: the following trait bounds were not satisfied:
            `i64: Iterator`
            which is required by `&mut i64: Iterator`

error[E0599]: no method named `unwrap_or_else` found for 
struct `std::string::String` in the current scope
   --> src\database\operations\plugin.rs:169:28
    |
169 |             name: row.name.unwrap_or_else(|| 
String::new()),
    |                            ^^^^^^^^^^^^^^ method not 
found in `String`

error[E0599]: no variant or associated item named `General` 
found for enum `database::models::plugin::PluginCategory` in 
the current scope
   --> src\database\operations\plugin.rs:177:124
    |
177 |             category: row.category.and_then(|s| s.parse()
.ok()).unwrap_or(crate::database::models::plugin::PluginCategor
y::General),
    |                                                          
                                                               
   ^^^^^^^ variant or associated item not found in 
`PluginCategory`
    |
   ::: src\database\models\plugin.rs:63:1
    |
63  | pub enum PluginCategory {
    | ----------------------- variant or associated item 
`General` not found for this enum

error[E0599]: no method named `unwrap_or_else` found for 
struct `std::string::String` in the current scope
   --> src\database\operations\plugin.rs:183:34
    |
183 |             version: row.version.unwrap_or_else(|| 
String::new()),
    |                                  ^^^^^^^^^^^^^^ method 
not found in `String`

warning: unused variable: `example_variables`
   --> src\database\operations\plugin.rs:622:5
    |
622 |     example_variables: Option<Value>,
    |     ^^^^^^^^^^^^^^^^^ help: if this is intentional, 
prefix it with an underscore: `_example_variables`

warning: unused variable: `id`
   --> src\database\operations\plugin.rs:624:9
    |
624 |     let id = 0; // Will be set by database auto-increment
    |         ^^ help: if this is intentional, prefix it with 
an underscore: `_id`

warning: unused variable: `sql`
   --> src\database\operations\plugin.rs:710:13
    |
710 |         let sql = format!("UPDATE plugins SET {} WHERE 
id = ?", updates.join(", "));
    |             ^^^ help: if this is intentional, prefix it 
with an underscore: `_sql`

error[E0599]: `i64` is not an iterator
   --> src\database\operations\plugin.rs:767:24
    |
767 |             id: row.id.map(|id| id as i32).unwrap_or(0),
    |                        ^^^ `i64` is not an iterator
    |
    = note: the following trait bounds were not satisfied:
            `i64: Iterator`
            which is required by `&mut i64: Iterator`

error[E0599]: no method named `unwrap_or_else` found for 
struct `std::string::String` in the current scope
   --> src\database\operations\plugin.rs:768:28
    |
768 |             name: row.name.unwrap_or_else(|| 
String::new()),
    |                            ^^^^^^^^^^^^^^ method not 
found in `String`

error[E0599]: no variant or associated item named `General` 
found for enum `database::models::plugin::PluginCategory` in 
the current scope
   --> src\database\operations\plugin.rs:776:124
    |
776 |             category: row.category.and_then(|s| s.parse()
.ok()).unwrap_or(crate::database::models::plugin::PluginCategor
y::General),
    |                                                          
                                                               
   ^^^^^^^ variant or associated item not found in 
`PluginCategory`
    |
   ::: src\database\models\plugin.rs:63:1
    |
63  | pub enum PluginCategory {
    | ----------------------- variant or associated item 
`General` not found for this enum

error[E0599]: no method named `unwrap_or_else` found for 
struct `std::string::String` in the current scope
   --> src\database\operations\plugin.rs:782:34
    |
782 |             version: row.version.unwrap_or_else(|| 
String::new()),
    |                                  ^^^^^^^^^^^^^^ method 
not found in `String`

warning: unused variable: `settings`
  --> src\database\operations\canvas.rs:16:5
   |
16 |     settings: Option<Value>,
   |     ^^^^^^^^ help: if this is intentional, prefix it with 
an underscore: `_settings`

error[E0308]: mismatched types
   --> src\database\operations\canvas.rs:133:25
    |
133 |             created_at: row.created_at,
    |                         ^^^^^^^^^^^^^^ expected 
`DateTime<Utc>`, found `Option<NaiveDateTime>`
    |
    = note: expected struct `DateTime<Utc>`
                 found enum 
`std::option::Option<NaiveDateTime>`

error[E0605]: non-primitive cast: `std::option::Option<i64>` 
as `i32`
   --> src\database\operations\canvas.rs:128:20
    |
128 |             width: row.width as i32,
    |                    ^^^^^^^^^^^^^^^^ an `as` expression 
can be used to convert enum types to numeric types only if the 
enum type is unit-only or field-less
    |
    = note: see https://doc.rust-lang.org/reference/items/enume
rations.html#casting for more information

error[E0605]: non-primitive cast: `std::option::Option<i64>` 
as `i32`
   --> src\database\operations\canvas.rs:129:21
    |
129 |             height: row.height as i32,
    |                     ^^^^^^^^^^^^^^^^^ an `as` expression 
can be used to convert enum types to numeric types only if the 
enum type is unit-only or field-less
    |
    = note: see https://doc.rust-lang.org/reference/items/enume
rations.html#casting for more information

error[E0605]: non-primitive cast: `std::option::Option<f64>` 
as `f32`
   --> src\database\operations\canvas.rs:130:25
    |
130 |             zoom_level: row.zoom_level as f32,
    |                         ^^^^^^^^^^^^^^^^^^^^^ an `as` 
expression can be used to convert enum types to numeric types 
only if the enum type is unit-only or field-less
    |
    = note: see https://doc.rust-lang.org/reference/items/enume
rations.html#casting for more information

error[E0605]: non-primitive cast: `std::option::Option<f64>` 
as `f32`
   --> src\database\operations\canvas.rs:131:25
    |
131 |             viewport_x: row.viewport_x as f32,
    |                         ^^^^^^^^^^^^^^^^^^^^^ an `as` 
expression can be used to convert enum types to numeric types 
only if the enum type is unit-only or field-less
    |
    = note: see https://doc.rust-lang.org/reference/items/enume
rations.html#casting for more information

error[E0605]: non-primitive cast: `std::option::Option<f64>` 
as `f32`
   --> src\database\operations\canvas.rs:132:25
    |
132 |             viewport_y: row.viewport_y as f32,
    |                         ^^^^^^^^^^^^^^^^^^^^^ an `as` 
expression can be used to convert enum types to numeric types 
only if the enum type is unit-only or field-less
    |
    = note: see https://doc.rust-lang.org/reference/items/enume
rations.html#casting for more information

warning: unused variable: `created_by`
   --> src\database\operations\canvas.rs:332:5
    |
332 |     created_by: Option<&str>,
    |     ^^^^^^^^^^ help: if this is intentional, prefix it 
with an underscore: `_created_by`

error[E0308]: mismatched types
   --> src\database\operations\canvas.rs:486:17
    |
486 |             id: row.id,
    |                 ^^^^^^ expected `i32`, found 
`Option<i64>`
    |
    = note: expected type `i32`
               found enum `std::option::Option<i64>`

error[E0308]: mismatched types
   --> src\database\operations\canvas.rs:487:24
    |
487 |             canvas_id: row.canvas_id,
    |                        ^^^^^^^^^^^^^ expected `i32`, 
found `i64`

error[E0308]: mismatched types
   --> src\database\operations\canvas.rs:489:26
    |
489 |             canvas_data: row.canvas_data,
    |                          ^^^^^^^^^^^^^^^ expected 
`String`, found `Option<String>`
    |
    = note: expected struct `std::string::String`
                 found enum 
`std::option::Option<std::string::String>`
help: consider using `Option::expect` to unwrap the 
`std::option::Option<std::string::String>` value, panicking if 
the value is an `Option::None`
    |
489 |             canvas_data: 
row.canvas_data.expect("REASON"),
    |                                         +++++++++++++++++

error[E0308]: mismatched types
   --> src\database\operations\canvas.rs:490:25
    |
490 |             created_at: row.created_at,
    |                         ^^^^^^^^^^^^^^ expected 
`DateTime<Utc>`, found `Option<NaiveDateTime>`
    |
    = note: expected struct `DateTime<Utc>`
                 found enum 
`std::option::Option<NaiveDateTime>`

error[E0716]: temporary value dropped while borrowed
   --> src\database\operations\canvas.rs:515:13
    |
512 | /         sqlx::query!(
513 | |             "UPDATE canvas SET canvas_data = ?, 
updated_at = ? WHERE id = ?",
514 | |             snapshot.canvas_data,
515 | |             Utc::now(),
    | |             ^^^^^^^^^^ creates a temporary value which 
is freed while still in use
516 | |             snapshot.canvas_id
517 | |         )
    | |_________- temporary value is freed at the end of this 
statement
518 |           .execute(pool)
    |            ------- borrow later used by call
    |
    = note: consider using a `let` binding to create a longer 
lived value

error[E0308]: mismatched types
   --> src\database\operations\canvas.rs:556:20
    |
556 |         canvas_id: canvas_id.to_string(),
    |                    ^^^^^^^^^^^^^^^^^^^^^ expected `i64`, 
found `String`

error[E0560]: struct 
`database::models::canvas::CanvasCollaborationSession` has no 
field named `max_participants`
   --> src\database\operations\canvas.rs:559:9
    |
559 |         max_participants,
    |         ^^^^^^^^^^^^^^^^ unknown field
    |
help: a field with a similar name exists
    |
559 -         max_participants,
559 +         participants,
    |

error[E0560]: struct 
`database::models::canvas::CanvasCollaborationSession` has no 
field named `current_participants`
   --> src\database\operations\canvas.rs:560:9
    |
560 |         current_participants: 0,
    |         ^^^^^^^^^^^^^^^^^^^^ 
`database::models::canvas::CanvasCollaborationSession` does 
not have this field
    |
    = note: available fields are: `id`, `host_user`, 
`participants`, `updated_at`

error[E0382]: borrow of moved value: `export_data`
   --> src\database\operations\canvas.rs:699:20
    |
688 |     let export_data = serde_json::json!({
    |         ----------- move occurs because `export_data` 
has type `JsonValue`, which does not implement the `Copy` trait
...
698 |         data: export_data,
    |               ----------- value moved here
699 |         file_size: export_data.to_string().len() as i64,
    |                    ^^^^^^^^^^^ value borrowed here after 
move
    |
help: consider cloning the value if the performance cost is 
acceptable
    |
698 |         data: export_data.clone(),
    |                          ++++++++

error[E0716]: temporary value dropped while borrowed
   --> src\database\operations\canvas.rs:731:13
    |
729 | /         sqlx::query!(
730 | |             "UPDATE canvas SET settings = ?, 
updated_at = ? WHERE id = ?",
731 | |             s.to_string(), now, canvas_id
    | |             ^^^^^^^^^^^^^ creates a temporary value 
which is freed while still in use
732 | |         ).execute(pool).await?;
    | |         - ------- borrow later used by call
    | |_________|
    |           temporary value is freed at the end of this 
statement
    |
    = note: consider using a `let` binding to create a longer 
lived value

error[E0716]: temporary value dropped while borrowed
   --> src\database\operations\canvas.rs:745:9
    |
743 | /     sqlx::query!(
744 | |         "UPDATE canvas SET is_active = 0, updated_at = 
? WHERE id = ?",
745 | |         Utc::now(),
    | |         ^^^^^^^^^^ creates a temporary value which is 
freed while still in use
746 | |         canvas_id
747 | |     )
    | |_____- temporary value is freed at the end of this 
statement
748 |       .execute(pool)
    |        ------- borrow later used by call
    |
    = note: consider using a `let` binding to create a longer 
lived value

error[E0716]: temporary value dropped while borrowed
   --> src\database\operations\canvas.rs:767:9
    |
759 | /     sqlx::query!(
760 | |         r#"
761 | |         INSERT INTO canvas_operations (
762 | |             canvas_id, operation_type, element_id, 
data, user_token, timestamp
...   |
767 | |         operation.operation_type.to_string(),
    | |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a 
temporary value which is freed while still in use
...   |
771 | |         operation.timestamp
772 | |     )
    | |_____- temporary value is freed at the end of this 
statement
773 |       .execute(pool)
    |        ------- borrow later used by call
    |
    = note: consider using a `let` binding to create a longer 
lived value

error[E0308]: mismatched types
   --> src\database\operations\canvas.rs:820:25
    |
820 |             element_id: row.element_id,
    |                         ^^^^^^^^^^^^^^ expected 
`Option<i32>`, found `Option<String>`
    |
    = note: expected enum `std::option::Option<i32>`
               found enum 
`std::option::Option<std::string::String>`

error[E0308]: mismatched types
   --> src\database\operations\canvas.rs:822:25
    |
822 |             user_token: row.user_token,
    |                         ^^^^^^^^^^^^^^ expected 
`String`, found `Option<String>`
    |
    = note: expected struct `std::string::String`
                 found enum 
`std::option::Option<std::string::String>`
help: consider using `Option::expect` to unwrap the 
`std::option::Option<std::string::String>` value, panicking if 
the value is an `Option::None`
    |
822 |             user_token: row.user_token.expect("REASON"),
    |                                       +++++++++++++++++

error[E0599]: no method named `parse` found for enum 
`std::option::Option` in the current scope
   --> src\database\operations\canvas.rs:823:38
    |
823 |             timestamp: 
row.timestamp.parse().unwrap_or_default(),
    |                                      ^^^^^ method not 
found in `Option<NaiveDateTime>`

error[E0308]: mismatched types
  --> src\database\optimization\mod.rs:24:9
   |
24 |         index_manager,
   |         ^^^^^^^^^^^^^ expected `IndexManager`, found 
future

error[E0061]: this method takes 1 argument but 0 arguments 
were supplied
   --> src\database\optimization\mod.rs:62:28
    |
62  |         
self.index_manager.cleanup_unused_indexes().await?;
    |                            ^^^^^^^^^^^^^^^^^^^^^^-- 
argument #1 of type `f64` is missing
    |
note: method defined here
   --> src\database\optimization\index_manager.rs:415:18
    |
415 |     pub async fn cleanup_unused_indexes(&self, 
min_effectiveness_score: f64) -> Result<Vec<String>> {
    |                  ^^^^^^^^^^^^^^^^^^^^^^        
----------------------------
help: provide the argument
    |
62  |         self.index_manager.cleanup_unused_indexes(/* f64 
*/).await?;
    |                                                   
+++++++++

error[E0609]: no field `total_entries` on type 
`ai_response_cache::CacheStatistics`
   --> src\database\optimization\mod.rs:170:43
    |
170 |         let entries_before = stats_before.total_entries;
    |                                           ^^^^^^^^^^^^^ 
unknown field
    |
    = note: available fields are: `total_requests`, 
`cache_hits`, `cache_misses`, `similarity_matches`, 
`exact_matches` ... and 3 others

error[E0277]: the trait bound `std::string::String: 
From<std::option::Option<std::string::String>>` is not 
satisfied
   --> src\database\backup.rs:157:23
    |
157 |   ...   let backups = sqlx::query_as!(
    |  _____________________^
158 | | ...       BackupRecord,
159 | | ...       r#"SELECT id, filename, created_at as 
"created_at: DateTime<Utc>", is_auto as "is_auto: bool", 
comment FROM backups ORDER BY cr...
160 | | ...   )
    | |_______^ the trait 
`From<std::option::Option<std::string::String>>` is not 
implemented for `std::string::String`
    |
    = help: the following other types implement trait 
`From<T>`:
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements 
`From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<AssetKey>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, 
str>>`
              `std::string::String` implements `From<Uuid>`
              `std::string::String` implements `From<char>`
            and 8 others
    = note: required for 
`std::option::Option<std::string::String>` to implement 
`Into<std::string::String>`
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the 
expansion of the macro `sqlx::query_as` (in Nightly builds, 
run with -Z macro-backtrace for more info)

warning: unused variable: `settings`
  --> src\ai\write_processor.rs:53:9
   |
53 |         settings: &WriteSettings,
   |         ^^^^^^^^ help: if this is intentional, prefix it 
with an underscore: `_settings`

warning: variable does not need to be mutable
   --> src\ai\advanced_ai_manager.rs:265:13
    |
265 |         let mut generated_image = 
self.visualize_engine.generate_image(request).await?;
    |             ----^^^^^^^^^^^^^^^
    |             |
    |             help: remove this `mut`

error[E0308]: mismatched types
   --> src\ai\advanced_ai_manager.rs:625:70
    |
625 |         self.saliency_engine.build_context(project_id, 
text_context, story_bible).await
    |                              -------------               
            ^^^^^^^^^^^ expected `&StoryBibleElements`, found 
`StoryBibleElements`
    |                              |
    |                              arguments to this method 
are incorrect
    |
note: method defined here
   --> src\ai\saliency_engine.rs:101:12
    |
101 |     pub fn build_context(
    |            ^^^^^^^^^^^^^
...
105 |         story_bible_elements: &StoryBibleElements,
    |         -----------------------------------------
help: consider borrowing here
    |
625 |         self.saliency_engine.build_context(project_id, 
text_context, &story_bible).await
    |                                                          
            +

error[E0277]: `std::result::Result<SaliencyContext, Box<dyn 
StdError>>` is not a future
   --> src\ai\advanced_ai_manager.rs:625:83
    |
625 |         self.saliency_engine.build_context(project_id, 
text_context, story_bible).await
    |                                                          
                        -^^^^^
    |                                                          
                        ||
    |                                                          
                        |`std::result::Result<SaliencyContext, 
Box<dyn StdError>>` is not a future
    |                                                          
                        help: remove the `.await`
    |
    = help: the trait `futures_util::Future` is not 
implemented for `std::result::Result<SaliencyContext, Box<dyn 
StdError>>`
    = note: std::result::Result<SaliencyContext, Box<dyn 
StdError>> must be a future or must implement `IntoFuture` to 
be awaited
    = note: required for `std::result::Result<SaliencyContext, 
Box<dyn StdError>>` to implement `std::future::IntoFuture`

warning: unused variable: `request`
   --> src\ai\advanced_ai_manager.rs:630:9
    |
630 |         request: AdvancedGenerationRequest,
    |         ^^^^^^^ help: if this is intentional, prefix it 
with an underscore: `_request`

warning: unused variable: `story_bible`
   --> src\ai\advanced_ai_manager.rs:631:9
    |
631 |         story_bible: Option<StoryBibleElements>,
    |         ^^^^^^^^^^^ help: if this is intentional, prefix 
it with an underscore: `_story_bible`

warning: unused variable: `stream_id`
   --> src\ai\advanced_ai_manager.rs:641:9
    |
641 |         stream_id: &str,
    |         ^^^^^^^^^ help: if this is intentional, prefix 
it with an underscore: `_stream_id`

error[E0592]: duplicate definitions with name 
`cleanup_unused_indexes`
   --> src\database\optimization\index_manager.rs:550:5
    |
415 |     pub async fn cleanup_unused_indexes(&self, 
min_effectiveness_score: f64) -> Result<Vec<String>> {
    |     -----------------------------------------------------
------------------------------------------ other definition 
for `cleanup_unused_indexes`
...
550 |     pub async fn cleanup_unused_indexes(&self) -> 
Result<()> {
    |     
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 
duplicate definitions for `cleanup_unused_indexes`

error[E0277]: async commands that contain references as inputs 
must return a `Result`
   --> src\commands\advanced_ai_commands.rs:151:6
    |
151 | ) -> CommandResponse<GeneratedImage> {
    |      ^^^^^^^^^^^^^^^ the trait 
`advanced_ai_commands::_::AsyncCommandMustReturnResult` is not 
implemented for `CommandResponse<visualize::GeneratedImage>`
    |
    = help: the trait 
`advanced_ai_commands::_::AsyncCommandMustReturnResult` is 
implemented for `std::result::Result<A, B>`
    = note: required for the cast from 
`&CommandResponse<visualize::GeneratedImage>` to `&dyn 
advanced_ai_commands::_::AsyncCommandMustReturnResult`

error[E0277]: async commands that contain references as inputs 
must return a `Result`
   --> src\commands\advanced_ai_commands.rs:183:6
    |
183 | ) -> CommandResponse<String> {
    |      ^^^^^^^^^^^^^^^ the trait 
`advanced_ai_commands::_::AsyncCommandMustReturnResult` is not 
implemented for `CommandResponse<std::string::String>`
    |
    = help: the trait 
`advanced_ai_commands::_::AsyncCommandMustReturnResult` is 
implemented for `std::result::Result<A, B>`
    = note: required for the cast from 
`&CommandResponse<std::string::String>` to `&dyn 
advanced_ai_commands::_::AsyncCommandMustReturnResult`

error[E0277]: async commands that contain references as inputs 
must return a `Result`
   --> src\commands\advanced_ai_commands.rs:213:6
    |
213 | ) -> CommandResponse<Option<BrainstormSession>> {
    |      ^^^^^^^^^^^^^^^ unsatisfied trait bound
    |
    = help: the trait 
`advanced_ai_commands::_::AsyncCommandMustReturnResult` is not 
implemented for `CommandResponse<std::option::Option<brainstorm
::BrainstormSession>>`
    = help: the trait 
`advanced_ai_commands::_::AsyncCommandMustReturnResult` is 
implemented for `std::result::Result<A, B>`
    = note: required for the cast from `&CommandResponse<std::o
ption::Option<brainstorm::BrainstormSession>>` to `&dyn 
advanced_ai_commands::_::AsyncCommandMustReturnResult`

error[E0277]: async commands that contain references as inputs 
must return a `Result`
   --> src\commands\advanced_ai_commands.rs:232:6
    |
232 | ) -> CommandResponse<()> {
    |      ^^^^^^^^^^^^^^^ the trait 
`advanced_ai_commands::_::AsyncCommandMustReturnResult` is not 
implemented for `CommandResponse<()>`
    |
    = help: the trait 
`advanced_ai_commands::_::AsyncCommandMustReturnResult` is 
implemented for `std::result::Result<A, B>`
    = note: required for the cast from `&CommandResponse<()>` 
to `&dyn advanced_ai_commands::_::AsyncCommandMustReturnResult`

error[E0277]: async commands that contain references as inputs 
must return a `Result`
   --> src\commands\advanced_ai_commands.rs:254:6
    |
254 | ) -> CommandResponse<()> {
    |      ^^^^^^^^^^^^^^^ the trait 
`advanced_ai_commands::_::AsyncCommandMustReturnResult` is not 
implemented for `CommandResponse<()>`
    |
    = help: the trait 
`advanced_ai_commands::_::AsyncCommandMustReturnResult` is 
implemented for `std::result::Result<A, B>`
    = note: required for the cast from `&CommandResponse<()>` 
to `&dyn advanced_ai_commands::_::AsyncCommandMustReturnResult`

error[E0277]: async commands that contain references as inputs 
must return a `Result`
   --> src\commands\advanced_ai_commands.rs:275:6
    |
275 | ) -> CommandResponse<StyleExample> {
    |      ^^^^^^^^^^^^^^^ unsatisfied trait bound
    |
    = help: the trait 
`advanced_ai_commands::_::AsyncCommandMustReturnResult` is not 
implemented for 
`CommandResponse<advanced_ai_manager::StyleExample>`
    = help: the trait 
`advanced_ai_commands::_::AsyncCommandMustReturnResult` is 
implemented for `std::result::Result<A, B>`
    = note: required for the cast from 
`&CommandResponse<advanced_ai_manager::StyleExample>` to `&dyn 
advanced_ai_commands::_::AsyncCommandMustReturnResult`

error[E0308]: mismatched types
   --> src\commands\optimization_commands.rs:260:32
    |
260 |     if stats.memory_usage_mb > 512 {
    |        ---------------------   ^^^ expected `f64`, found 
integer
    |        |
    |        expected because this is `f64`
    |
help: use a float literal
    |
260 |     if stats.memory_usage_mb > 512.0 {
    |                                   ++

error[E0308]: mismatched types
   --> src\commands\optimization_commands.rs:295:32
    |
295 |     if stats.memory_usage_mb > 256 {
    |        ---------------------   ^^^ expected `f64`, found 
integer
    |        |
    |        expected because this is `f64`
    |
help: use a float literal
    |
295 |     if stats.memory_usage_mb > 256.0 {
    |                                   ++

error[E0277]: cannot subtract `{integer}` from `f64`
   --> src\commands\optimization_commands.rs:296:42
    |
296 |         score -= ((stats.memory_usage_mb - 256) as f64) 
* 0.1;
    |                                          ^ no 
implementation for `f64 - {integer}`
    |
    = help: the trait `Sub<{integer}>` is not implemented for 
`f64`
    = help: the following other types implement trait 
`Sub<Rhs>`:
              `&f64` implements `Sub<f64>`
              `&f64` implements `Sub`
              `f64` implements `Sub<&f64>`
              `f64` implements 
`Sub<zerocopy::byteorder::F64<O>>`
              `f64` implements `Sub`
help: consider using a floating-point literal by writing it 
with `.0`
    |
296 |         score -= ((stats.memory_usage_mb - 256.0) as 
f64) * 0.1;
    |                                               ++

error[E0308]: mismatched types
   --> src\ai\advanced_ai_manager.rs:604:63
    |
604 |         self.brainstorm_engine.rate_idea(session_id, 
idea_id, rating)
    |                                ---------                 
     ^^^^^^ expected `i32`, found `u32`
    |                                |
    |                                arguments to this method 
are incorrect
    |
note: method defined here
   --> src\ai\brainstorm.rs:419:12
    |
419 |     pub fn rate_idea(&mut self, session_id: &str, 
idea_id: &str, rating: i32) -> Result<(), Box<dyn 
std::error::Error>> {
    |            ^^^^^^^^^                                     
        -----------
help: you can convert a `u32` to an `i32` and panic if the 
converted value doesn't fit
    |
604 |         self.brainstorm_engine.rate_idea(session_id, 
idea_id, rating.try_into().unwrap())
    |                                                          
           ++++++++++++++++++++

error[E0061]: this method takes 2 arguments but 3 arguments 
were supplied
   --> src\ai\advanced_ai_manager.rs:608:32
    |
608 |         
self.brainstorm_engine.mark_as_keeper(session_id, idea_id, 
is_keeper)
    |                                ^^^^^^^^^^^^^^            
          --------- unexpected argument #3 of type `bool`
    |
note: method defined here
   --> src\ai\brainstorm.rs:387:12
    |
387 |     pub fn mark_as_keeper(&mut self, session_id: &str, 
idea_id: &str) -> Result<(), Box<dyn std::error::Error>> {
    |            ^^^^^^^^^^^^^^
help: remove the extra argument
    |
608 -         
self.brainstorm_engine.mark_as_keeper(session_id, idea_id, 
is_keeper)
608 +         
self.brainstorm_engine.mark_as_keeper(session_id, idea_id)
    |

warning: unused import: `Row`
 --> src\database\operations\ai_provider_ops.rs:5:26
  |
5 | use sqlx::{Pool, Sqlite, Row};
  |                          ^^^

warning: unused import: `Row`
 --> src\database\operations\ai_model_configuration_ops.rs:5:26
  |
5 | use sqlx::{Pool, Sqlite, Row};
  |                          ^^^

warning: unused import: `Row`
 --> src\database\operations\prose_mode_ops.rs:5:26
  |
5 | use sqlx::{Pool, Sqlite, Row};
  |                          ^^^

warning: unused import: `Row`
 --> src\database\operations\generated_image_ops.rs:5:26
  |
5 | use sqlx::{Pool, Sqlite, Row};
  |                          ^^^

warning: unused import: `Row`
 --> src\database\operations\brainstorm_session_ops.rs:5:26
  |
5 | use sqlx::{Pool, Sqlite, Row};
  |                          ^^^

warning: unused import: `Row`
 --> src\database\operations\streaming_session_ops.rs:5:26
  |
5 | use sqlx::{Pool, Sqlite, Row};
  |                          ^^^

warning: unused import: `Row`
 --> src\database\operations\collaboration.rs:5:12
  |
5 | use sqlx::{Row, SqlitePool};
  |            ^^^

warning: unused import: `AIProvider`
 --> src\background\ai_processor.rs:4:28
  |
4 | use crate::ai::{AIContext, AIProvider, AIProviderManager};
  |                            ^^^^^^^^^^

error[E0004]: non-exhaustive patterns: 
`&database::models::plugin::PluginCategory::Utility` not 
covered
   --> src\database\models\plugin.rs:269:15
    |
269 |         match self {
    |               ^^^^ pattern 
`&database::models::plugin::PluginCategory::Utility` not 
covered
    |
note: `database::models::plugin::PluginCategory` defined here
   --> src\database\models\plugin.rs:63:10
    |
63  | pub enum PluginCategory {
    |          ^^^^^^^^^^^^^^
...
91  |     Utility,
    |     ------- not covered
    = note: the matched value is of type 
`&database::models::plugin::PluginCategory`
help: ensure that all possible cases are being handled by 
adding a match arm with a wildcard pattern or an explicit 
pattern as shown
    |
283 ~             PluginCategory::Other => write!(f, "other"),
284 ~             
&database::models::plugin::PluginCategory::Utility => todo!(),
    |

warning: unused variable: `context`
   --> src\ai\openai.rs:145:36
    |
145 |     fn build_system_message(&self, context: &AIContext) 
-> ChatMessage {
    |                                    ^^^^^^^ help: if this 
is intentional, prefix it with an underscore: `_context`

warning: unused variable: `context`
   --> src\ai\claude.rs:126:36
    |
126 |     fn build_system_message(&self, context: &AIContext) 
-> String {
    |                                    ^^^^^^^ help: if this 
is intentional, prefix it with an underscore: `_context`

warning: unused variable: `text`
   --> src\ai\claude.rs:375:40
    |
375 |     async fn generate_embedding(&self, text: &str) -> 
Result<Vec<f32>> {
    |                                        ^^^^ help: if 
this is intentional, prefix it with an underscore: `_text`

warning: unused variable: `text`
   --> src\ai\gemini.rs:398:40
    |
398 |     async fn generate_embedding(&self, text: &str) -> 
Result<Vec<f32>> {
    |                                        ^^^^ help: if 
this is intentional, prefix it with an underscore: `_text`

warning: unused variable: `text_lower`
   --> src\ai\visualize.rs:111:13
    |
111 |         let text_lower = text.to_lowercase();
    |             ^^^^^^^^^^ help: if this is intentional, 
prefix it with an underscore: `_text_lower`

warning: unused variable: `base_prompt`
   --> src\ai\brainstorm.rs:207:5
    |
207 | let base_prompt = self.build_generation_prompt(request)?;
    |     ^^^^^^^^^^^ help: if this is intentional, prefix it 
with an underscore: `_base_prompt`

Some errors have detailed explanations: E0004, E0061, E0107, 
E0277, E0308, E0382, E0425, E0533, E0560...
For more information about an error, try `rustc --explain 
E0004`.
warning: `storyweaver` (lib) generated 116 warnings
error: could not compile `storyweaver` (lib) due to 232 
previous errors; 116 warnings emitted
