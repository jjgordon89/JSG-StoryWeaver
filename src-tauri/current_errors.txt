cargo :     Checking storyweaver v0.1.0 
(C:\Users\jjgor\JSG-StoryWeaver\src-tauri)
At line:1 char:1
+ cargo check 2>&1 | Out-File -FilePath "current_errors.txt" -Encoding  
...
+ ~~~~~~~~~~~~~~~~
    + CategoryInfo          : NotSpecified: (    Checking st...aver\src-t 
   auri):String) [], RemoteException
    + FullyQualifiedErrorId : NativeCommandError
 
error: error returned from database: (code: 1) no such column: p.series_id
   --> src\database\operations\series_ops.rs:141:22
    |
141 |           let series = sqlx::query_as!(
    |  ______________________^
142 | |             SeriesWithCount,
143 | |             r#"
144 | |             SELECT 
...   |
159 | |             "#
160 | |         )
    | |_________^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query_as` (in Nightly builds, run with -Z macro-backtrace 
for more info)

error: error returned from database: (code: 1) no such table: 
document_links
   --> src\database\operations\document_link_ops.rs:140:24
    |
140 |           let previous = sqlx::query_as!(
    |  ________________________^
141 | |             LinkedDocument,
142 | |             r#"
143 | |             SELECT 
...   |
157 | |             document_id
158 | |         )
    | |_________^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query_as` (in Nightly builds, run with -Z macro-backtrace 
for more info)

error: error returned from database: (code: 1) no such table: 
document_links
   --> src\database\operations\document_link_ops.rs:164:20
    |
164 |           let next = sqlx::query_as!(
    |  ____________________^
165 | |             LinkedDocument,
166 | |             r#"
167 | |             SELECT 
...   |
181 | |             document_id
182 | |         )
    | |_________^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query_as` (in Nightly builds, run with -Z macro-backtrace 
for more info)

error: error returned from database: (code: 1) no such table: 
background_tasks
  --> src\database\operations\background_task_ops.rs:71:22
   |
71 |           let record = sqlx::query!(
   |  ______________________^
72 | |             r#"
73 | |             SELECT id, task_type, description, status, priority, 
progress,
74 | |                    created_at, started_at, completed_at, 
error_message,
...  |
78 | |             task_id
79 | |         )
   | |_________^
   |
   = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) no such table: 
background_tasks
  --> src\database\operations\background_task_ops.rs:90:23
   |
90 |           let records = sqlx::query!(
   |  _______________________^
91 | |             r#"
92 | |             SELECT id, task_type, description, status, priority, 
progress,
93 | |                    created_at, started_at, completed_at, 
error_message,
...  |
96 | |             "#
97 | |         )
   | |_________^
   |
   = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) table generated_images has 
no column named prompt
  --> src\database\operations\generated_image_ops.rs:33:22
   |
33 |           let result = sqlx::query!(
   |  ______________________^
34 | |             r#"
35 | |             INSERT INTO generated_images (
36 | |                 project_id, prompt, negative_prompt, model_used, 
image_url, local_path,
...  |
55 | |             image.metadata
56 | |         )
   | |_________^
   |
   = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) no such column: prompt
  --> src\database\operations\generated_image_ops.rs:66:19
   |
66 |           let row = sqlx::query!(
   |  ___________________^
67 | |             r#"
68 | |             SELECT id, project_id, prompt, negative_prompt, 
model_used, image_url, local_path,
69 | |                    width, height, seed, steps, cfg_scale, style, 
generation_time, cost_credits, metadata, created_at
...  |
72 | |             id
73 | |         )
   | |_________^
   |
   = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) no such column: prompt
   --> src\database\operations\generated_image_ops.rs:101:20
    |
101 |           let rows = sqlx::query!(
    |  ____________________^
102 | |             r#"
103 | |             SELECT id, project_id, prompt, negative_prompt, 
model_used, image_url, local_path,
104 | |                    width, height, seed, steps, cfg_scale, style, 
generation_time, cost_credits, metadata, created_at
...   |
107 | |             project_id
108 | |         )
    | |_________^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) no such column: prompt
   --> src\database\operations\generated_image_ops.rs:136:20
    |
136 |           let rows = sqlx::query!(
    |  ____________________^
137 | |             r#"
138 | |             SELECT id, project_id, prompt, negative_prompt, 
model_used, image_url, local_path,
139 | |                    width, height, seed, steps, cfg_scale, style, 
generation_time, cost_credits, metadata, created_at
140 | |             FROM generated_images ORDER BY created_at DESC
141 | |             "#
142 | |         )
    | |_________^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) no such column: prompt
   --> src\database\operations\generated_image_ops.rs:170:9
    |
170 | /         sqlx::query!(
171 | |             r#"
172 | |             UPDATE generated_images 
173 | |             SET project_id = ?, prompt = ?, negative_prompt = ?, 
model_used = ?, image_url = ?, local_path = ?,
...   |
193 | |             id
194 | |         )
    | |_________^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) no such column: local_path
   --> src\database\operations\generated_image_ops.rs:214:9
    |
214 | /         sqlx::query!(
215 | |             "UPDATE generated_images SET local_path = ? WHERE id 
= ?",
216 | |             local_path,
217 | |             id
218 | |         )
    | |_________^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) no such column: prompt
   --> src\database\operations\generated_image_ops.rs:228:20
    |
228 |           let rows = sqlx::query!(
    |  ____________________^
229 | |             r#"
230 | |             SELECT id, project_id, prompt, negative_prompt, 
model_used, image_url, local_path,
231 | |                    width, height, seed, steps, cfg_scale, style, 
generation_time, cost_credits, metadata, created_at
...   |
234 | |             model_used
235 | |         )
    | |_________^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) no such column: prompt
   --> src\database\operations\generated_image_ops.rs:263:20
    |
263 |           let rows = sqlx::query!(
    |  ____________________^
264 | |             r#"
265 | |             SELECT id, project_id, prompt, negative_prompt, 
model_used, image_url, local_path,
266 | |                    width, height, seed, steps, cfg_scale, style, 
generation_time, cost_credits, metadata, created_at
...   |
269 | |             limit
270 | |         )
    | |_________^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) no such column: 
cost_credits
   --> src\database\operations\generated_image_ops.rs:298:19
    |
298 |           let row = sqlx::query!(
    |  ___________________^
299 | |             "SELECT COALESCE(SUM(cost_credits), 0.0) as 
total_cost FROM generated_images WHERE project_id = ?",
300 | |             project_id
301 | |         )
    | |_________^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) table brainstorm_sessions 
has no column named session_name
  --> src\database\operations\brainstorm_session_ops.rs:31:22
   |
31 |           let result = sqlx::query!(
   |  ______________________^
32 | |             r#"
33 | |             INSERT INTO brainstorm_sessions (
34 | |                 project_id, session_name, session_type, 
initial_prompt, context_data,
...  |
51 | |             session.status
52 | |         )
   | |_________^
   |
   = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) no such column: 
session_name
  --> src\database\operations\brainstorm_session_ops.rs:62:19
   |
62 |           let row = sqlx::query!(
   |  ___________________^
63 | |             r#"
64 | |             SELECT id, project_id, session_name, session_type, 
initial_prompt, context_data,
65 | |                    generated_ideas, selected_ideas, session_notes, 
model_used, total_tokens,
...  |
69 | |             id
70 | |         )
   | |_________^
   |
   = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) no such column: 
session_name
   --> src\database\operations\brainstorm_session_ops.rs:96:20
    |
96  |           let rows = sqlx::query!(
    |  ____________________^
97  | |             r#"
98  | |             SELECT id, project_id, session_name, session_type, 
initial_prompt, context_data,
99  | |                    generated_ideas, selected_ideas, 
session_notes, model_used, total_tokens,
...   |
103 | |             project_id
104 | |         )
    | |_________^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) no such column: 
session_name
   --> src\database\operations\brainstorm_session_ops.rs:130:20
    |
130 |           let rows = sqlx::query!(
    |  ____________________^
131 | |             r#"
132 | |             SELECT id, project_id, session_name, session_type, 
initial_prompt, context_data,
133 | |                    generated_ideas, selected_ideas, 
session_notes, model_used, total_tokens,
...   |
137 | |             session_type
138 | |         )
    | |_________^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) no such column: 
session_name
   --> src\database\operations\brainstorm_session_ops.rs:164:20
    |
164 |           let rows = sqlx::query!(
    |  ____________________^
165 | |             r#"
166 | |             SELECT id, project_id, session_name, session_type, 
initial_prompt, context_data,
167 | |                    generated_ideas, selected_ideas, 
session_notes, model_used, total_tokens,
...   |
171 | |             status
172 | |         )
    | |_________^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) no such column: 
session_name
   --> src\database\operations\brainstorm_session_ops.rs:198:20
    |
198 |           let rows = sqlx::query!(
    |  ____________________^
199 | |             r#"
200 | |             SELECT id, project_id, session_name, session_type, 
initial_prompt, context_data,
201 | |                    generated_ideas, selected_ideas, 
session_notes, model_used, total_tokens,
...   |
204 | |             "#
205 | |         )
    | |_________^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) no such column: 
session_name
   --> src\database\operations\brainstorm_session_ops.rs:231:9
    |
231 | /         sqlx::query!(
232 | |             r#"
233 | |             UPDATE brainstorm_sessions 
234 | |             SET project_id = ?, session_name = ?, session_type = 
?, initial_prompt = ?, context_data = ?,
...   |
251 | |             id
252 | |         )
    | |_________^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) no such column: 
generated_ideas
   --> src\database\operations\brainstorm_session_ops.rs:262:9
    |
262 | /         sqlx::query!(
263 | |             r#"
264 | |             UPDATE brainstorm_sessions 
265 | |             SET generated_ideas = ?, selected_ideas = ?, 
updated_at = CURRENT_TIMESTAMP
...   |
270 | |             id
271 | |         )
    | |_________^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) no such column: status
   --> src\database\operations\brainstorm_session_ops.rs:281:9
    |
281 | /         sqlx::query!(
282 | |             r#"
283 | |             UPDATE brainstorm_sessions 
284 | |             SET status = ?, updated_at = CURRENT_TIMESTAMP
...   |
288 | |             id
289 | |         )
    | |_________^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) no such column: 
session_notes
   --> src\database\operations\brainstorm_session_ops.rs:299:9
    |
299 | /         sqlx::query!(
300 | |             r#"
301 | |             UPDATE brainstorm_sessions 
302 | |             SET session_notes = ?, updated_at = CURRENT_TIMESTAMP
...   |
306 | |             id
307 | |         )
    | |_________^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) no such column: 
session_name
   --> src\database\operations\brainstorm_session_ops.rs:327:20
    |
327 |           let rows = sqlx::query!(
    |  ____________________^
328 | |             r#"
329 | |             SELECT id, project_id, session_name, session_type, 
initial_prompt, context_data,
330 | |                    generated_ideas, selected_ideas, 
session_notes, model_used, total_tokens,
...   |
334 | |             limit
335 | |         )
    | |_________^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) no such column: 
cost_credits
   --> src\database\operations\brainstorm_session_ops.rs:361:19
    |
361 |           let row = sqlx::query!(
    |  ___________________^
362 | |             "SELECT COALESCE(SUM(cost_credits), 0.0) as 
total_cost FROM brainstorm_sessions WHERE project_id = ?",
363 | |             project_id
364 | |         )
    | |_________^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) table credit_usage has no 
column named model_used
  --> src\database\operations\credit_usage_ops.rs:25:22
   |
25 |           let result = sqlx::query!(
   |  ______________________^
26 | |             r#"
27 | |             INSERT INTO credit_usage (
28 | |                 project_id, operation_type, model_used, 
tokens_used, credits_consumed,
...  |
39 | |             usage.session_id
40 | |         )
   | |_________^
   |
   = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) no such column: model_used
  --> src\database\operations\credit_usage_ops.rs:50:19
   |
50 |           let row = sqlx::query!(
   |  ___________________^
51 | |             r#"
52 | |             SELECT id, project_id, operation_type, model_used, 
tokens_used, credits_consumed,
53 | |                    operation_details, session_id, created_at
...  |
56 | |             id
57 | |         )
   | |_________^
   |
   = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) no such column: model_used
  --> src\database\operations\credit_usage_ops.rs:77:20
   |
77 |           let rows = sqlx::query!(
   |  ____________________^
78 | |             r#"
79 | |             SELECT id, project_id, operation_type, model_used, 
tokens_used, credits_consumed,
80 | |                    operation_details, session_id, created_at
...  |
83 | |             project_id
84 | |         )
   | |_________^
   |
   = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) no such column: model_used
   --> src\database\operations\credit_usage_ops.rs:104:20
    |
104 |           let rows = sqlx::query!(
    |  ____________________^
105 | |             r#"
106 | |             SELECT id, project_id, operation_type, model_used, 
tokens_used, credits_consumed,
107 | |                    operation_details, session_id, created_at
...   |
110 | |             operation_type
111 | |         )
    | |_________^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) no such column: model_used
   --> src\database\operations\credit_usage_ops.rs:131:20
    |
131 |           let rows = sqlx::query!(
    |  ____________________^
132 | |             r#"
133 | |             SELECT id, project_id, operation_type, model_used, 
tokens_used, credits_consumed,
134 | |                    operation_details, session_id, created_at
...   |
137 | |             session_id
138 | |         )
    | |_________^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) no such column: model_used
   --> src\database\operations\credit_usage_ops.rs:158:20
    |
158 |           let rows = sqlx::query!(
    |  ____________________^
159 | |             r#"
160 | |             SELECT id, project_id, operation_type, model_used, 
tokens_used, credits_consumed,
161 | |                    operation_details, session_id, created_at
162 | |             FROM credit_usage ORDER BY created_at DESC
163 | |             "#
164 | |         )
    | |_________^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) no such column: 
credits_consumed
   --> src\database\operations\credit_usage_ops.rs:194:19
    |
194 |           let row = sqlx::query!(
    |  ___________________^
195 | |             "SELECT COALESCE(SUM(credits_consumed), 0.0) as 
total_credits FROM credit_usage WHERE project_id = ?",
196 | |             project_id
197 | |         )
    | |_________^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) no such column: 
credits_consumed
   --> src\database\operations\credit_usage_ops.rs:207:19
    |
207 |           let row = sqlx::query!(
    |  ___________________^
208 | |             "SELECT COALESCE(SUM(credits_consumed), 0.0) as 
total_credits FROM credit_usage WHERE operation_type = ?",
209 | |             operation_type
210 | |         )
    | |_________^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) no such column: 
credits_consumed
   --> src\database\operations\credit_usage_ops.rs:220:19
    |
220 |           let row = sqlx::query!(
    |  ___________________^
221 | |             r#"
222 | |             SELECT COALESCE(SUM(credits_consumed), 0.0) as 
daily_credits 
223 | |             FROM credit_usage 
...   |
227 | |             date
228 | |         )
    | |_________^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) no such column: model_used
   --> src\database\operations\credit_usage_ops.rs:238:20
    |
238 |           let rows = sqlx::query!(
    |  ____________________^
239 | |             r#"
240 | |             SELECT id, project_id, operation_type, model_used, 
tokens_used, credits_consumed,
241 | |                    operation_details, session_id, created_at
...   |
248 | |             end_date
249 | |         )
    | |_________^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) no such column: model_used
   --> src\database\operations\credit_usage_ops.rs:269:20
    |
269 |           let rows = sqlx::query!(
    |  ____________________^
270 | |             r#"
271 | |             SELECT id, project_id, operation_type, model_used, 
tokens_used, credits_consumed,
272 | |                    operation_details, session_id, created_at
...   |
275 | |             limit
276 | |         )
    | |_________^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) no such column: model_used
   --> src\database\operations\credit_usage_ops.rs:296:20
    |
296 |           let rows = sqlx::query!(
    |  ____________________^
297 | |             r#"
298 | |             SELECT model_used, 
299 | |                    COALESCE(SUM(credits_consumed), 0.0) as 
total_credits,
...   |
304 | |             "#
305 | |         )
    | |_________^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) no such column: 
credits_consumed
   --> src\database\operations\credit_usage_ops.rs:315:20
    |
315 |           let rows = sqlx::query!(
    |  ____________________^
316 | |             r#"
317 | |             SELECT operation_type, 
318 | |                    COALESCE(SUM(credits_consumed), 0.0) as 
total_credits,
...   |
323 | |             "#
324 | |         )
    | |_________^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) no such table: 
streaming_sessions
  --> src\database\operations\streaming_session_ops.rs:31:22
   |
31 |           let result = sqlx::query!(
   |  ______________________^
32 | |             r#"
33 | |             INSERT INTO streaming_sessions (
34 | |                 session_id, project_id, model_used, prompt, 
status, generated_content,
...  |
49 | |             session.started_at
50 | |         )
   | |_________^
   |
   = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) no such table: 
streaming_sessions
  --> src\database\operations\streaming_session_ops.rs:60:19
   |
60 |           let row = sqlx::query!(
   |  ___________________^
61 | |             r#"
62 | |             SELECT id, session_id, project_id, model_used, prompt, 
status, generated_content,
63 | |                    tokens_generated, credits_consumed, 
error_message, metadata, started_at,
...  |
67 | |             id
68 | |         )
   | |_________^
   |
   = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) no such table: 
streaming_sessions
   --> src\database\operations\streaming_session_ops.rs:94:19
    |
94  |           let row = sqlx::query!(
    |  ___________________^
95  | |             r#"
96  | |             SELECT id, session_id, project_id, model_used, 
prompt, status, generated_content,
97  | |                    tokens_generated, credits_consumed, 
error_message, metadata, started_at,
...   |
101 | |             session_id
102 | |         )
    | |_________^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) no such table: 
streaming_sessions
   --> src\database\operations\streaming_session_ops.rs:128:20
    |
128 |           let rows = sqlx::query!(
    |  ____________________^
129 | |             r#"
130 | |             SELECT id, session_id, project_id, model_used, 
prompt, status, generated_content,
131 | |                    tokens_generated, credits_consumed, 
error_message, metadata, started_at,
...   |
135 | |             project_id
136 | |         )
    | |_________^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) no such table: 
streaming_sessions
   --> src\database\operations\streaming_session_ops.rs:162:20
    |
162 |           let rows = sqlx::query!(
    |  ____________________^
163 | |             r#"
164 | |             SELECT id, session_id, project_id, model_used, 
prompt, status, generated_content,
165 | |                    tokens_generated, credits_consumed, 
error_message, metadata, started_at,
...   |
169 | |             status
170 | |         )
    | |_________^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) no such table: 
streaming_sessions
   --> src\database\operations\streaming_session_ops.rs:196:20
    |
196 |           let rows = sqlx::query!(
    |  ____________________^
197 | |             r#"
198 | |             SELECT id, session_id, project_id, model_used, 
prompt, status, generated_content,
199 | |                    tokens_generated, credits_consumed, 
error_message, metadata, started_at,
...   |
202 | |             "#
203 | |         )
    | |_________^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) no such table: 
streaming_sessions
   --> src\database\operations\streaming_session_ops.rs:229:9
    |
229 | /         sqlx::query!(
230 | |             r#"
231 | |             UPDATE streaming_sessions 
232 | |             SET generated_content = ?, tokens_generated = ?, 
updated_at = CURRENT_TIMESTAMP
...   |
237 | |             session_id
238 | |         )
    | |_________^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) no such table: 
streaming_sessions
   --> src\database\operations\streaming_session_ops.rs:255:13
    |
255 | /             sqlx::query!(
256 | |                 r#"
257 | |                 UPDATE streaming_sessions 
258 | |                 SET status = ?, completed_at = CURRENT_TIMESTAMP, 
updated_at = CURRENT_TIMESTAMP
...   |
262 | |                 session_id
263 | |             )
    | |_____________^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) no such table: 
streaming_sessions
   --> src\database\operations\streaming_session_ops.rs:268:13
    |
268 | /             sqlx::query!(
269 | |                 r#"
270 | |                 UPDATE streaming_sessions 
271 | |                 SET status = ?, updated_at = CURRENT_TIMESTAMP
...   |
275 | |                 session_id
276 | |             )
    | |_____________^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) no such table: 
streaming_sessions
   --> src\database\operations\streaming_session_ops.rs:287:9
    |
287 | /         sqlx::query!(
288 | |             r#"
289 | |             UPDATE streaming_sessions 
290 | |             SET status = 'error', error_message = ?, completed_at 
= CURRENT_TIMESTAMP, updated_at = CURRENT_TIMESTAMP
...   |
294 | |             session_id
295 | |         )
    | |_________^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) no such table: 
streaming_sessions
   --> src\database\operations\streaming_session_ops.rs:305:9
    |
305 | /         sqlx::query!(
306 | |             r#"
307 | |             UPDATE streaming_sessions 
308 | |             SET credits_consumed = ?, updated_at = 
CURRENT_TIMESTAMP
...   |
312 | |             session_id
313 | |         )
    | |_________^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) no such table: 
streaming_sessions
   --> src\database\operations\streaming_session_ops.rs:323:9
    |
323 | /         sqlx::query!(
324 | |             r#"
325 | |             UPDATE streaming_sessions 
326 | |             SET metadata = ?, updated_at = CURRENT_TIMESTAMP
...   |
330 | |             session_id
331 | |         )
    | |_________^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) no such table: 
streaming_sessions
   --> src\database\operations\streaming_session_ops.rs:341:9
    |
341 |         sqlx::query!("DELETE FROM streaming_sessions WHERE id = ?", 
id)
    |         
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) no such table: 
streaming_sessions
   --> src\database\operations\streaming_session_ops.rs:351:9
    |
351 |         sqlx::query!("DELETE FROM streaming_sessions WHERE 
session_id = ?", session_id)
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
^^^^^^^^^^^^^^^^^^^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) no such table: 
streaming_sessions
   --> src\database\operations\streaming_session_ops.rs:361:20
    |
361 |           let rows = sqlx::query!(
    |  ____________________^
362 | |             r#"
363 | |             SELECT id, session_id, project_id, model_used, 
prompt, status, generated_content,
364 | |                    tokens_generated, credits_consumed, 
error_message, metadata, started_at,
...   |
367 | |             "#
368 | |         )
    | |_________^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) no such table: 
streaming_sessions
   --> src\database\operations\streaming_session_ops.rs:394:20
    |
394 |           let rows = sqlx::query!(
    |  ____________________^
395 | |             r#"
396 | |             SELECT id, session_id, project_id, model_used, 
prompt, status, generated_content,
397 | |                    tokens_generated, credits_consumed, 
error_message, metadata, started_at,
...   |
401 | |             limit
402 | |         )
    | |_________^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) no such table: 
streaming_sessions
   --> src\database\operations\streaming_session_ops.rs:428:19
    |
428 |           let row = sqlx::query!(
    |  ___________________^
429 | |             "SELECT COALESCE(SUM(credits_consumed), 0.0) as 
total_credits FROM streaming_sessions WHERE project_id = ?",
430 | |             project_id
431 | |         )
    | |_________^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) no such table: 
streaming_sessions
   --> src\database\operations\streaming_session_ops.rs:441:20
    |
441 |           let rows = sqlx::query!(
    |  ____________________^
442 | |             r#"
443 | |             SELECT status, 
444 | |                    COUNT(*) as session_count,
...   |
449 | |             "#
450 | |         )
    | |_________^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) no such table: 
streaming_sessions
   --> src\database\operations\streaming_session_ops.rs:460:22
    |
460 |           let result = sqlx::query!(
    |  ______________________^
461 | |             r#"
462 | |             DELETE FROM streaming_sessions 
463 | |             WHERE status IN ('completed', 'error', 'cancelled') 
...   |
466 | |             days_old
467 | |         )
    | |_________^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) table shared_documents has 
no column named share_type
  --> src\database\operations\collaboration.rs:22:18
   |
22 |       let result = sqlx::query!(
   |  __________________^
23 | |         r#"
24 | |         INSERT INTO shared_documents (
25 | |             document_id, project_id, share_token, share_type,
...  |
41 | |         now
42 | |     )
   | |_____^
   |
   = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) no such column: share_type
  --> src\database\operations\collaboration.rs:68:18
   |
68 |       let result = sqlx::query!(
   |  __________________^
69 | |         r#"
70 | |         SELECT id, document_id, project_id, share_token, 
share_type, 
71 | |                password_hash, expires_at, max_uses, current_uses, 
is_active, 
...  |
76 | |         token
77 | |     )
   | |_____^
   |
   = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) table document_comments 
has no column named position_start
   --> src\database\operations\collaboration.rs:129:18
    |
129 |       let result = sqlx::query!(
    |  __________________^
130 | |         r#"
131 | |         INSERT INTO document_comments (
132 | |             document_id, parent_comment_id, author_name, 
author_identifier,
...   |
151 | |         now
152 | |     )
    | |_____^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) no such column: 
position_start
   --> src\database\operations\collaboration.rs:181:16
    |
181 |       let rows = sqlx::query!(
    |  ________________^
182 | |         r#"
183 | |         SELECT id, document_id, parent_comment_id, author_name, 
author_identifier,
184 | |                content, position_start, position_end, 
selected_text, comment_type,
...   |
190 | |         document_id
191 | |     )
    | |_____^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) table 
collaboration_sessions has no column named max_participants
   --> src\database\operations\collaboration.rs:266:18
    |
266 |       let result = sqlx::query!(
    |  __________________^
267 | |         r#"
268 | |         INSERT INTO collaboration_sessions (
269 | |             document_id, session_token, max_participants, 
expires_at, created_at
...   |
278 | |         now
279 | |     )
    | |_____^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) no such column: 
session_name
   --> src\database\operations\collaboration.rs:301:15
    |
301 |       let row = sqlx::query!(
    |  _______________^
302 | |         r#"
303 | |         SELECT id, document_id, session_token, session_name, 
is_active,
304 | |                allow_anonymous, max_participants, created_at, 
expires_at
...   |
308 | |         token
309 | |     )
    | |_____^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) no such column: folder_id
   --> src\database\operations\collaboration.rs:427:15
    |
427 |       let row = sqlx::query!(
    |  _______________^
428 | |         r#"
429 | |         SELECT id, project_id, title, content, document_type,
430 | |                order_index, word_count, parent_id, created_at, 
updated_at, metadata, folder_id
...   |
434 | |         original_document_id
435 | |     )
    | |_____^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) table documents has no 
column named folder_id
   --> src\database\operations\collaboration.rs:458:5
    |
458 | /     sqlx::query!(
459 | |         r#"
460 | |         INSERT INTO documents (
461 | |             id, project_id, title, content, document_type, 
order_index,
...   |
477 | |         original.folder_id
478 | |     )
    | |_____^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) no such column: share_type
   --> src\database\operations\collaboration.rs:532:16
    |
532 |       let rows = sqlx::query!(
    |  ________________^
533 | |         r#"
534 | |         SELECT id, document_id, project_id, share_token, 
share_type, 
535 | |                password_hash, expires_at, max_uses, current_uses, 
is_active, 
...   |
541 | |         project_id
542 | |     )
    | |_____^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) no such table: 
collaboration_notifications
   --> src\database\operations\collaboration.rs:574:18
    |
574 |       let result = sqlx::query!(
    |  __________________^
575 | |         r#"
576 | |         INSERT INTO collaboration_notifications (
577 | |             document_id, notification_type, message, 
recipient_token, is_read, created_at
...   |
587 | |         now
588 | |     )
    | |_____^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) no such table: 
collaboration_notifications
   --> src\database\operations\collaboration.rs:611:19
    |
611 |       let results = sqlx::query!(
    |  ___________________^
612 | |         r#"
613 | |         SELECT id, document_id, notification_type, message, 
recipient_token, is_read, created_at
614 | |         FROM collaboration_notifications
...   |
620 | |         limit
621 | |     )
    | |_____^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) no such table: 
collaboration_notifications
   --> src\database\operations\collaboration.rs:657:5
    |
657 | /     sqlx::query!(
658 | |         "UPDATE collaboration_notifications SET is_read = true 
WHERE id = ?",
659 | |         notification_id
660 | |     )
    | |_____^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) no such table: 
collaboration_notifications
   --> src\database\operations\collaboration.rs:672:5
    |
672 | /     sqlx::query!(
673 | |         "UPDATE collaboration_notifications SET is_read = true 
WHERE recipient_token = ?",
674 | |         recipient_token
675 | |     )
    | |_____^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) no such table: 
collaboration_notifications
   --> src\database\operations\collaboration.rs:687:18
    |
687 |       let result = sqlx::query!(
    |  __________________^
688 | |         "SELECT COUNT(*) as count FROM 
collaboration_notifications WHERE recipient_token = ? AND is_read = 
false",
689 | |         recipient_token
690 | |     )
    | |_____^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) no such table: 
collaboration_notifications
   --> src\database\operations\collaboration.rs:705:5
    |
705 | /     sqlx::query!(
706 | |         "DELETE FROM collaboration_notifications WHERE created_at 
< ?",
707 | |         cutoff_date
708 | |     )
    | |_____^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) table plugins has no 
column named prompt_template
  --> src\database\operations\plugin.rs:30:18
   |
30 |       let result = sqlx::query!(
   |  __________________^
31 | |         r#"
32 | |         INSERT INTO plugins (
33 | |             name, description, prompt_template, variables, 
ai_model, temperature,
...  |
55 | |         now
56 | |     )
   | |_____^
   |
   = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) table plugins has no 
column named prompt_template
   --> src\database\operations\plugin.rs:91:18
    |
91  |       let result = sqlx::query!(
    |  __________________^
92  | |         r#"
93  | |         INSERT INTO plugins (
94  | |             name, description, prompt_template, variables, 
ai_model, temperature,
...   |
116 | |         now
117 | |     )
    | |_____^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) no such column: 
prompt_template
   --> src\database\operations\plugin.rs:150:18
    |
150 |       let result = sqlx::query!(
    |  __________________^
151 | |         r#"
152 | |         SELECT id, name, description, prompt_template, variables, 
ai_model,
153 | |                temperature, max_tokens, stop_sequences, category, 
tags,
...   |
159 | |         plugin_id
160 | |     )
    | |_____^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) no such column: 
download_count
   --> src\database\operations\plugin.rs:306:5
    |
306 | /     sqlx::query!(
307 | |         "UPDATE plugins SET download_count = download_count + 1, 
updated_at = ? WHERE id = ?",
308 | |         Utc::now(),
309 | |         plugin_id
310 | |     )
    | |_____^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) table plugin_ratings has 
no column named user_identifier
   --> src\database\operations\plugin.rs:328:5
    |
328 | /     sqlx::query!(
329 | |         r#"
330 | |         INSERT OR REPLACE INTO plugin_ratings (
331 | |             plugin_id, user_identifier, rating, review, 
created_at, updated_at
...   |
340 | |         now
341 | |     )
    | |_____^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) no such column: 
rating_average
   --> src\database\operations\plugin.rs:377:5
    |
377 | /     sqlx::query!(
378 | |         "UPDATE plugins SET rating_average = ?, rating_count = ?, 
updated_at = ? WHERE id = ?",
379 | |         avg_rating,
380 | |         count,
381 | |         Utc::now(),
382 | |         plugin_id
383 | |     )
    | |_____^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) table 
plugin_execution_history has no column named user_identifier
   --> src\database\operations\plugin.rs:399:5
    |
399 | /     sqlx::query!(
400 | |         r#"
401 | |         INSERT INTO plugin_execution_history (
402 | |             id, plugin_id, user_identifier, input_variables, 
output_result,
...   |
415 | |         now
416 | |     )
    | |_____^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) no such column: 
total_executions
   --> src\database\operations\plugin.rs:436:19
    |
436 |       let updated = sqlx::query!(
    |  ___________________^
437 | |         r#"
438 | |         UPDATE plugin_usage_stats
439 | |         SET total_executions = total_executions + 1,
...   |
449 | |         today
450 | |     )
    | |_____^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) table plugin_usage_stats 
has no column named date
   --> src\database\operations\plugin.rs:456:9
    |
456 | /         sqlx::query!(
457 | |             r#"
458 | |             INSERT INTO plugin_usage_stats (
459 | |                 plugin_id, date, total_executions, 
successful_executions,
...   |
469 | |             now
470 | |         )
    | |_________^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) no such column: date
   --> src\database\operations\plugin.rs:486:17
    |
486 |       let stats = sqlx::query_as!(
    |  _________________^
487 | |         PluginUsageStats,
488 | |         r#"
489 | |         SELECT plugin_id, date, total_executions, 
successful_executions,
...   |
496 | |         start_date
497 | |     )
    | |_____^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query_as` (in Nightly builds, run with -Z macro-backtrace 
for more info)

error: error returned from database: (code: 1) no such column: 
example_variables
   --> src\database\operations\plugin.rs:510:9
    |
510 | /         sqlx::query_as!(
511 | |             PluginTemplate,
512 | |             r#"
513 | |             SELECT id, name, description, category as "category: 
PluginCategory",
...   |
519 | |             cat.to_string()
520 | |         )
    | |_________^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query_as` (in Nightly builds, run with -Z macro-backtrace 
for more info)

error: error returned from database: (code: 1) no such column: 
example_variables
   --> src\database\operations\plugin.rs:524:9
    |
524 | /         sqlx::query_as!(
525 | |             PluginTemplate,
526 | |             r#"
527 | |             SELECT id, name, description, category as "category: 
PluginCategory",
...   |
531 | |             "#
532 | |         )
    | |_________^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query_as` (in Nightly builds, run with -Z macro-backtrace 
for more info)

error: error returned from database: (code: 1) no such column: 
example_variables
   --> src\database\operations\plugin.rs:545:20
    |
545 |       let template = sqlx::query_as!(
    |  ____________________^
546 | |         PluginTemplate,
547 | |         r#"
548 | |         SELECT id, name, description, category as "category: 
PluginCategory",
...   |
553 | |         template_id
554 | |     )
    | |_____^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query_as` (in Nightly builds, run with -Z macro-backtrace 
for more info)

error: error returned from database: (code: 1) table plugin_templates has 
no column named template_data
   --> src\database\operations\plugin.rs:573:18
    |
573 |       let result = sqlx::query!(
    |  __________________^
574 | |         r#"
575 | |         INSERT INTO plugin_templates (
576 | |             name, description, category, template_data, 
is_official,
...   |
586 | |         now
587 | |     )
    | |_____^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) no such column: is_active
   --> src\database\operations\plugin.rs:677:5
    |
677 | /     sqlx::query!(
678 | |         "UPDATE plugins SET is_active = 0, updated_at = ? WHERE 
id = ?",
679 | |         Utc::now(),
680 | |         plugin_id
681 | |     )
    | |_____^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) no such column: 
prompt_template
   --> src\database\operations\plugin.rs:693:19
    |
693 |       let results = sqlx::query!(
    |  ___________________^
694 | |         r#"
695 | |         SELECT id, name, description, prompt_template, variables, 
ai_model,
696 | |                temperature, max_tokens, stop_sequences, category, 
tags,
...   |
703 | |         creator_id
704 | |     )
    | |_____^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) table canvas has no column 
named template_type
  --> src\database\operations\canvas.rs:20:18
   |
20 |       let result = sqlx::query!(
   |  __________________^
21 | |         r#"
22 | |         INSERT INTO canvas (
23 | |             project_id, name, description, canvas_data, 
template_type, width, height,
...  |
39 | |         now
40 | |     )
   | |_____^
   |
   = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) no such column: 
template_type
  --> src\database\operations\canvas.rs:68:18
   |
68 |       let result = sqlx::query!(
   |  __________________^
69 | |         r#"
70 | |         SELECT id, project_id, canvas_data, template_type, width, 
height,
71 | |                zoom_level, viewport_x, viewport_y, created_at, 
updated_at
...  |
75 | |         canvas_id
76 | |     )
   | |_____^
   |
   = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) no such column: 
template_type
   --> src\database\operations\canvas.rs:106:19
    |
106 |       let results = sqlx::query!(
    |  ___________________^
107 | |         r#"
108 | |         SELECT id, project_id, canvas_data, template_type, width, 
height,
109 | |                zoom_level, viewport_x, viewport_y, created_at, 
updated_at
...   |
114 | |         project_id
115 | |     )
    | |_____^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) table canvas_elements has 
no column named title
   --> src\database\operations\canvas.rs:156:18
    |
156 |       let result = sqlx::query!(
    |  __________________^
157 | |         r#"
158 | |         INSERT INTO canvas_elements (
159 | |             canvas_id, element_type, position_x, position_y, 
width, height,
...   |
177 | |         now
178 | |     )
    | |_____^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) no such column: content
   --> src\database\operations\canvas.rs:208:19
    |
208 |       let results = sqlx::query!(
    |  ___________________^
209 | |         r#"
210 | |         SELECT id, canvas_id, element_type, position_x, 
position_y, width, height,
211 | |                content, created_at, updated_at
...   |
216 | |         canvas_id
217 | |     )
    | |_____^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) no such column: content
   --> src\database\operations\canvas.rs:291:9
    |
291 | /         sqlx::query!(
292 | |             "UPDATE canvas_elements SET content = ?, updated_at = 
? WHERE id = ?",
293 | |             c.to_string(), now, element_id
294 | |         ).execute(pool).await?;
    | |_________^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) table outline_templates 
has no column named structure
   --> src\database\operations\canvas.rs:328:5
    |
328 | /     sqlx::query!(
329 | |         r#"
330 | |         INSERT INTO outline_templates (
331 | |             id, name, description, template_type, structure, 
is_public,
...   |
345 | |         now
346 | |     )
    | |_____^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) no such column: usage_count
   --> src\database\operations\canvas.rs:413:5
    |
413 | /     sqlx::query!(
414 | |         "UPDATE outline_templates SET usage_count = usage_count + 
1, updated_at = ? WHERE id = ?",
415 | |         Utc::now(),
416 | |         template_id
417 | |     )
    | |_____^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) table canvas_snapshots has 
no column named canvas_data
   --> src\database\operations\canvas.rs:435:18
    |
435 |       let result = sqlx::query!(
    |  __________________^
436 | |         r#"
437 | |         INSERT INTO canvas_snapshots (
438 | |             canvas_id, snapshot_name, canvas_data, created_at
...   |
445 | |         now
446 | |     )
    | |_____^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) no such column: canvas_data
   --> src\database\operations\canvas.rs:468:19
    |
468 |       let results = sqlx::query!(
    |  ___________________^
469 | |         r#"
470 | |         SELECT id, canvas_id, snapshot_name, canvas_data, 
created_at
471 | |         FROM canvas_snapshots
...   |
475 | |         canvas_id_int
476 | |     )
    | |_____^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) no such column: canvas_data
   --> src\database\operations\canvas.rs:500:20
    |
500 |       let snapshot = sqlx::query!(
    |  ____________________^
501 | |         "SELECT canvas_id, canvas_data FROM canvas_snapshots 
WHERE id = ?",
502 | |         snapshot_id
503 | |     )
    | |_____^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) no such table: 
canvas_operations
   --> src\database\operations\canvas.rs:736:5
    |
736 | /     sqlx::query!(
737 | |         r#"
738 | |         INSERT INTO canvas_operations (
739 | |             canvas_id, operation_type, element_id, data, 
user_token, timestamp
...   |
748 | |         operation.timestamp
749 | |     )
    | |_____^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) no such table: 
canvas_operations
   --> src\database\operations\canvas.rs:766:16
    |
766 |       let rows = sqlx::query!(
    |  ________________^
767 | |         r#"
768 | |         SELECT operation_type, element_id, data, user_token, 
timestamp
769 | |         FROM canvas_operations
...   |
776 | |         offset
777 | |     )
    | |_____^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: no rules expected `.`
   --> src\database\optimization\mod.rs:114:13
    |
114 |             .into_iter()
    |             ^ no rules expected this token in macro call
    |
    = note: while trying to match end of macro

error: error returned from database: (code: 1) no such table: audit_logs
   --> src\security\audit.rs:91:24
    |
91  |           let event_id = sqlx::query!(
    |  ________________________^
92  | |             r#"
93  | |             INSERT INTO audit_logs (
94  | |                 event_type, category, severity, description, 
context_data, 
...   |
106 | |             event.document_id
107 | |         )
    | |_________^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error: error returned from database: (code: 1) no such table: audit_logs
   --> src\security\audit.rs:127:20
    |
127 |           let rows = sqlx::query!(
    |  ____________________^
128 | |             r#"
129 | |             SELECT 
130 | |                 id, event_type, category, severity, description, 
...   |
143 | |             limit_val
144 | |         )
    | |_________^
    |
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for 
more info)

error[E0432]: unresolved import `crate::database::operations::AICardOps`
 --> src\commands\ai_cards.rs:3:33
  |
3 | use crate::database::{get_pool, operations::AICardOps};
  |                                 ^^^^^^^^^^^^^^^^^^^^^ no `AICardOps` 
in `database::operations`

error[E0432]: unresolved imports 
`crate::models::ai_card::CreateAIResponseCardRequest`, 
`crate::models::ai_card::UpdateAIResponseCardRequest`
 --> src\commands\ai_cards.rs:6:46
  |
6 | use crate::models::ai_card::{AIResponseCard, 
CreateAIResponseCardRequest, UpdateAIResponseCardRequest};
  |                                              
^^^^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^ no 
`UpdateAIResponseCardRequest` in `models::ai_card`
  |                                              |
  |                                              no 
`CreateAIResponseCardRequest` in `models::ai_card`
  |
help: a similar name exists in the module
  |
6 - use crate::models::ai_card::{AIResponseCard, 
CreateAIResponseCardRequest, UpdateAIResponseCardRequest};
6 + use crate::models::ai_card::{AIResponseCard, CreateAICardRequest, 
UpdateAIResponseCardRequest};
  |
help: a similar name exists in the module
  |
6 - use crate::models::ai_card::{AIResponseCard, 
CreateAIResponseCardRequest, UpdateAIResponseCardRequest};
6 + use crate::models::ai_card::{AIResponseCard, 
CreateAIResponseCardRequest, UpdateAICardRequest};
  |

error[E0432]: unresolved import `tracing`
 --> src\database\optimization\index_manager.rs:8:5
  |
8 | use tracing::{info, warn, error};
  |     ^^^^^^^ use of unresolved module or unlinked crate `tracing`
  |
  = help: if you wanted to use a crate named `tracing`, use `cargo add 
tracing` to add it to your `Cargo.toml`

error[E0432]: unresolved import `lru`
 --> src\database\optimization\memory_optimizer.rs:5:5
  |
5 | use lru::LruCache;
  |     ^^^ use of unresolved module or unlinked crate `lru`
  |
  = help: if you wanted to use a crate named `lru`, use `cargo add lru` 
to add it to your `Cargo.toml`

error[E0432]: unresolved import `tracing`
  --> src\database\optimization\memory_optimizer.rs:11:5
   |
11 | use tracing::{info, warn, debug};
   |     ^^^^^^^ use of unresolved module or unlinked crate `tracing`
   |
   = help: if you wanted to use a crate named `tracing`, use `cargo add 
tracing` to add it to your `Cargo.toml`

error[E0432]: unresolved import `dashmap`
 --> src\database\optimization\ai_response_cache.rs:5:5
  |
5 | use dashmap::DashMap;
  |     ^^^^^^^ use of unresolved module or unlinked crate `dashmap`
  |
  = help: if you wanted to use a crate named `dashmap`, use `cargo add 
dashmap` to add it to your `Cargo.toml`

error[E0432]: unresolved import `tracing`
  --> src\database\optimization\ai_response_cache.rs:10:5
   |
10 | use tracing::{info, debug, warn};
   |     ^^^^^^^ use of unresolved module or unlinked crate `tracing`
   |
   = help: if you wanted to use a crate named `tracing`, use `cargo add 
tracing` to add it to your `Cargo.toml`

error[E0432]: unresolved import `sha2`
  --> src\database\optimization\ai_response_cache.rs:11:5
   |
11 | use sha2::{Sha256, Digest};
   |     ^^^^ use of unresolved module or unlinked crate `sha2`
   |
   = help: if you wanted to use a crate named `sha2`, use `cargo add 
sha2` to add it to your `Cargo.toml`

error[E0432]: unresolved import `tracing`
  --> src\database\optimization\mod.rs:13:5
   |
13 | use tracing::info;
   |     ^^^^^^^ use of unresolved module or unlinked crate `tracing`
   |
   = help: if you wanted to use a crate named `tracing`, use `cargo add 
tracing` to add it to your `Cargo.toml`

error[E0433]: failed to resolve: could not find `__cmd__create_ai_card` 
in `ai_cards`
   --> src\lib.rs:192:33
    |
192 |             commands::ai_cards::create_ai_card,
    |                                 ^^^^^^^^^^^^^^ could not find 
`__cmd__create_ai_card` in `ai_cards`

error[E0433]: failed to resolve: could not find `__cmd__get_ai_card` in 
`ai_cards`
   --> src\lib.rs:193:33
    |
193 |             commands::ai_cards::get_ai_card,
    |                                 ^^^^^^^^^^^ could not find 
`__cmd__get_ai_card` in `ai_cards`

error[E0433]: failed to resolve: could not find `__cmd__get_ai_cards` in 
`ai_cards`
   --> src\lib.rs:194:33
    |
194 |             commands::ai_cards::get_ai_cards,
    |                                 ^^^^^^^^^^^^ could not find 
`__cmd__get_ai_cards` in `ai_cards`

error[E0433]: failed to resolve: could not find `__cmd__update_ai_card` 
in `ai_cards`
   --> src\lib.rs:195:33
    |
195 |             commands::ai_cards::update_ai_card,
    |                                 ^^^^^^^^^^^^^^ could not find 
`__cmd__update_ai_card` in `ai_cards`

error[E0433]: failed to resolve: could not find `__cmd__delete_ai_card` 
in `ai_cards`
   --> src\lib.rs:196:33
    |
196 |             commands::ai_cards::delete_ai_card,
    |                                 ^^^^^^^^^^^^^^ could not find 
`__cmd__delete_ai_card` in `ai_cards`

error[E0433]: failed to resolve: could not find 
`__cmd__get_ai_cards_by_project` in `ai_cards`
   --> src\lib.rs:197:33
    |
197 |             commands::ai_cards::get_ai_cards_by_project,
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^ could not 
find `__cmd__get_ai_cards_by_project` in `ai_cards`

error[E0433]: failed to resolve: could not find 
`__cmd__get_ai_cards_by_document` in `ai_cards`
   --> src\lib.rs:198:33
    |
198 |             commands::ai_cards::get_ai_cards_by_document,
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^ could not 
find `__cmd__get_ai_cards_by_document` in `ai_cards`

error[E0433]: failed to resolve: could not find 
`__cmd__get_stacked_ai_cards` in `ai_cards`
   --> src\lib.rs:199:33
    |
199 |             commands::ai_cards::get_stacked_ai_cards,
    |                                 ^^^^^^^^^^^^^^^^^^^^ could not find 
`__cmd__get_stacked_ai_cards` in `ai_cards`

error[E0433]: failed to resolve: could not find 
`__cmd__get_starred_ai_cards` in `ai_cards`
   --> src\lib.rs:200:33
    |
200 |             commands::ai_cards::get_starred_ai_cards,
    |                                 ^^^^^^^^^^^^^^^^^^^^ could not find 
`__cmd__get_starred_ai_cards` in `ai_cards`

error[E0433]: failed to resolve: could not find 
`__cmd__toggle_ai_card_stack` in `ai_cards`
   --> src\lib.rs:201:33
    |
201 |             commands::ai_cards::toggle_ai_card_stack,
    |                                 ^^^^^^^^^^^^^^^^^^^^ could not find 
`__cmd__toggle_ai_card_stack` in `ai_cards`

error[E0433]: failed to resolve: could not find 
`__cmd__toggle_ai_card_star` in `ai_cards`
   --> src\lib.rs:202:33
    |
202 |             commands::ai_cards::toggle_ai_card_star,
    |                                 ^^^^^^^^^^^^^^^^^^^ could not find 
`__cmd__toggle_ai_card_star` in `ai_cards`

error[E0433]: failed to resolve: could not find 
`__cmd__toggle_ai_card_collapse` in `ai_cards`
   --> src\lib.rs:203:33
    |
203 |             commands::ai_cards::toggle_ai_card_collapse,
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^ could not 
find `__cmd__toggle_ai_card_collapse` in `ai_cards`

error[E0433]: failed to resolve: could not find 
`__cmd__update_plugin_usage_stats` in `plugin`
   --> src\lib.rs:313:31
    |
313 |             commands::plugin::update_plugin_usage_stats,
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^ could not 
find `__cmd__update_plugin_usage_stats` in `plugin`

error[E0433]: failed to resolve: could not find `__cmd__get_canvases` in 
`canvas`
   --> src\lib.rs:322:31
    |
322 |             commands::canvas::get_canvases,
    |                               ^^^^^^^^^^^^ could not find 
`__cmd__get_canvases` in `canvas`

error[E0425]: cannot find value `custom_prompt` in this scope
   --> src\commands\story_bible_ai.rs:315:22
    |
315 |         let prompt = custom_prompt.unwrap_or_else(|| "Analyze the 
writing style and generate a style prompt".to_string());
    |                      ^^^^^^^^^^^^^ not found in this scope

error[E0425]: cannot find value `custom_prompt` in this scope
   --> src\commands\story_bible_ai.rs:353:22
    |
353 |         let prompt = custom_prompt.unwrap_or_else(|| "Generate an 
outline from the provided text".to_string());
    |                      ^^^^^^^^^^^^^ not found in this scope

error[E0412]: cannot find type `CommandResponse` in this scope
   --> src\commands\advanced_ai_commands.rs:117:6
    |
117 | ) -> CommandResponse<AdvancedGenerationResult> {
    |      ^^^^^^^^^^^^^^^ not found in this scope
    |
help: consider importing this struct
    |
1   + use crate::commands::CommandResponse;
    |

error[E0412]: cannot find type `CommandResponse` in this scope
   --> src\commands\advanced_ai_commands.rs:148:6
    |
148 | ) -> CommandResponse<GeneratedImage> {
    |      ^^^^^^^^^^^^^^^ not found in this scope
    |
help: consider importing this struct
    |
1   + use crate::commands::CommandResponse;
    |

error[E0412]: cannot find type `CommandResponse` in this scope
   --> src\commands\advanced_ai_commands.rs:179:6
    |
179 | ) -> CommandResponse<String> {
    |      ^^^^^^^^^^^^^^^ not found in this scope
    |
help: consider importing this struct
    |
1   + use crate::commands::CommandResponse;
    |

error[E0412]: cannot find type `CommandResponse` in this scope
   --> src\commands\advanced_ai_commands.rs:206:6
    |
206 | ) -> CommandResponse<Option<BrainstormSession>> {
    |      ^^^^^^^^^^^^^^^ not found in this scope
    |
help: consider importing this struct
    |
1   + use crate::commands::CommandResponse;
    |

error[E0412]: cannot find type `CommandResponse` in this scope
   --> src\commands\advanced_ai_commands.rs:222:6
    |
222 | ) -> CommandResponse<()> {
    |      ^^^^^^^^^^^^^^^ not found in this scope
    |
help: consider importing this struct
    |
1   + use crate::commands::CommandResponse;
    |

error[E0412]: cannot find type `CommandResponse` in this scope
   --> src\commands\advanced_ai_commands.rs:240:6
    |
240 | ) -> CommandResponse<()> {
    |      ^^^^^^^^^^^^^^^ not found in this scope
    |
help: consider importing this struct
    |
1   + use crate::commands::CommandResponse;
    |

error[E0412]: cannot find type `CommandResponse` in this scope
   --> src\commands\advanced_ai_commands.rs:257:6
    |
257 | ) -> CommandResponse<StyleExample> {
    |      ^^^^^^^^^^^^^^^ not found in this scope
    |
help: consider importing this struct
    |
1   + use crate::commands::CommandResponse;
    |

error[E0422]: cannot find struct, variant or union type `CommentRequest` 
in this scope
   --> src\commands\collaboration.rs:125:19
    |
125 |     let request = CommentRequest {
    |                   ^^^^^^^^^^^^^^ not found in this scope
    |
help: consider importing this struct through its public re-export
    |
3   + use crate::database::models::CommentRequest;
    |

error[E0412]: cannot find type `Plugin` in this scope
  --> src\commands\plugin.rs:22:13
   |
22 | ) -> Result<Plugin, StoryWeaverError> {
   |             ^^^^^^ not found in this scope
   |
help: consider importing one of these items
   |
3  + use crate::database::models::Plugin;
   |
3  + use tauri::plugin::Plugin;
   |

error[E0433]: failed to resolve: use of undeclared type `PluginCategory`
  --> src\commands\plugin.rs:26:22
   |
26 |         "writing" => PluginCategory::Writing,
   |                      ^^^^^^^^^^^^^^ use of undeclared type 
`PluginCategory`
   |
help: consider importing this enum through its public re-export
   |
3  + use crate::database::models::PluginCategory;
   |

error[E0433]: failed to resolve: use of undeclared type `PluginCategory`
  --> src\commands\plugin.rs:27:22
   |
27 |         "editing" => PluginCategory::Editing,
   |                      ^^^^^^^^^^^^^^ use of undeclared type 
`PluginCategory`
   |
help: consider importing this enum through its public re-export
   |
3  + use crate::database::models::PluginCategory;
   |

error[E0433]: failed to resolve: use of undeclared type `PluginCategory`
  --> src\commands\plugin.rs:28:23
   |
28 |         "analysis" => PluginCategory::Analysis,
   |                       ^^^^^^^^^^^^^^ use of undeclared type 
`PluginCategory`
   |
help: consider importing this enum through its public re-export
   |
3  + use crate::database::models::PluginCategory;
   |

error[E0433]: failed to resolve: use of undeclared type `PluginCategory`
  --> src\commands\plugin.rs:29:28
   |
29 |         "brainstorming" => PluginCategory::Brainstorming,
   |                            ^^^^^^^^^^^^^^ use of undeclared type 
`PluginCategory`
   |
help: consider importing this enum through its public re-export
   |
3  + use crate::database::models::PluginCategory;
   |

error[E0433]: failed to resolve: use of undeclared type `PluginCategory`
  --> src\commands\plugin.rs:30:23
   |
30 |         "research" => PluginCategory::Research,
   |                       ^^^^^^^^^^^^^^ use of undeclared type 
`PluginCategory`
   |
help: consider importing this enum through its public re-export
   |
3  + use crate::database::models::PluginCategory;
   |

error[E0433]: failed to resolve: use of undeclared type `PluginCategory`
  --> src\commands\plugin.rs:31:25
   |
31 |         "formatting" => PluginCategory::Formatting,
   |                         ^^^^^^^^^^^^^^ use of undeclared type 
`PluginCategory`
   |
help: consider importing this enum through its public re-export
   |
3  + use crate::database::models::PluginCategory;
   |

error[E0433]: failed to resolve: use of undeclared type `PluginCategory`
  --> src\commands\plugin.rs:32:20
   |
32 |         "other" => PluginCategory::Other,
   |                    ^^^^^^^^^^^^^^ use of undeclared type 
`PluginCategory`
   |
help: consider importing this enum through its public re-export
   |
3  + use crate::database::models::PluginCategory;
   |

error[E0433]: failed to resolve: use of undeclared type `PluginVisibility`
  --> src\commands\plugin.rs:37:24
   |
37 |         "published" => PluginVisibility::Published,
   |                        ^^^^^^^^^^^^^^^^ use of undeclared type 
`PluginVisibility`
   |
help: consider importing this enum through its public re-export
   |
3  + use crate::database::models::PluginVisibility;
   |

error[E0433]: failed to resolve: use of undeclared type `PluginVisibility`
  --> src\commands\plugin.rs:38:22
   |
38 |         "private" => PluginVisibility::Private,
   |                      ^^^^^^^^^^^^^^^^ use of undeclared type 
`PluginVisibility`
   |
help: consider importing this enum through its public re-export
   |
3  + use crate::database::models::PluginVisibility;
   |

error[E0433]: failed to resolve: use of undeclared type `PluginVisibility`
  --> src\commands\plugin.rs:39:23
   |
39 |         "unlisted" => PluginVisibility::Unlisted,
   |                       ^^^^^^^^^^^^^^^^ use of undeclared type 
`PluginVisibility`
   |
help: consider importing this enum through its public re-export
   |
3  + use crate::database::models::PluginVisibility;
   |

error[E0422]: cannot find struct, variant or union type `Plugin` in this 
scope
  --> src\commands\plugin.rs:43:18
   |
43 |     let plugin = Plugin {
   |                  ^^^^^^ not found in this scope
   |
help: consider importing this struct through its public re-export
   |
3  + use crate::database::models::Plugin;
   |

error[E0433]: failed to resolve: use of undeclared type `PluginVisibility`
  --> src\commands\plugin.rs:58:39
   |
58 |         is_public: visibility_enum == PluginVisibility::Published,
   |                                       ^^^^^^^^^^^^^^^^ use of 
undeclared type `PluginVisibility`
   |
help: consider importing this enum through its public re-export
   |
3  + use crate::database::models::PluginVisibility;
   |

error[E0412]: cannot find type `Plugin` in this scope
  --> src\commands\plugin.rs:73:20
   |
73 | ) -> Result<Option<Plugin>, StoryWeaverError> {
   |                    ^^^^^^ not found in this scope
   |
help: consider importing one of these items
   |
3  + use crate::database::models::Plugin;
   |
3  + use tauri::plugin::Plugin;
   |

error[E0412]: cannot find type `PluginSearchResult` in this scope
  --> src\commands\plugin.rs:91:17
   |
91 | ) -> Result<Vec<PluginSearchResult>, StoryWeaverError> {
   |                 ^^^^^^^^^^^^^^^^^^ not found in this scope
   |
help: consider importing this struct through its public re-export
   |
3  + use crate::database::models::PluginSearchResult;
   |

error[E0433]: failed to resolve: use of undeclared type `PluginCategory`
  --> src\commands\plugin.rs:96:34
   |
96 |             "text_processing" => PluginCategory::TextProcessing,
   |                                  ^^^^^^^^^^^^^^ use of undeclared 
type `PluginCategory`
   |
help: consider importing this enum through its public re-export
   |
3  + use crate::database::models::PluginCategory;
   |

error[E0433]: failed to resolve: use of undeclared type `PluginCategory`
  --> src\commands\plugin.rs:97:33
   |
97 |             "ai_integration" => PluginCategory::AIIntegration,
   |                                 ^^^^^^^^^^^^^^ use of undeclared 
type `PluginCategory`
   |
help: consider importing this enum through its public re-export
   |
3  + use crate::database::models::PluginCategory;
   |

error[E0433]: failed to resolve: use of undeclared type `PluginCategory`
  --> src\commands\plugin.rs:98:25
   |
98 |             "export" => PluginCategory::Export,
   |                         ^^^^^^^^^^^^^^ use of undeclared type 
`PluginCategory`
   |
help: consider importing this enum through its public re-export
   |
3  + use crate::database::models::PluginCategory;
   |

error[E0433]: failed to resolve: use of undeclared type `PluginCategory`
  --> src\commands\plugin.rs:99:25
   |
99 |             "import" => PluginCategory::Import,
   |                         ^^^^^^^^^^^^^^ use of undeclared type 
`PluginCategory`
   |
help: consider importing this enum through its public re-export
   |
3  + use crate::database::models::PluginCategory;
   |

error[E0433]: failed to resolve: use of undeclared type `PluginCategory`
   --> src\commands\plugin.rs:100:29
    |
100 |             "formatting" => PluginCategory::Formatting,
    |                             ^^^^^^^^^^^^^^ use of undeclared type 
`PluginCategory`
    |
help: consider importing this enum through its public re-export
    |
3   + use crate::database::models::PluginCategory;
    |

error[E0433]: failed to resolve: use of undeclared type `PluginCategory`
   --> src\commands\plugin.rs:101:27
    |
101 |             "analysis" => PluginCategory::Analysis,
    |                           ^^^^^^^^^^^^^^ use of undeclared type 
`PluginCategory`
    |
help: consider importing this enum through its public re-export
    |
3   + use crate::database::models::PluginCategory;
    |

error[E0433]: failed to resolve: use of undeclared type `PluginCategory`
   --> src\commands\plugin.rs:102:26
    |
102 |             "utility" => PluginCategory::Utility,
    |                          ^^^^^^^^^^^^^^ use of undeclared type 
`PluginCategory`
    |
help: consider importing this enum through its public re-export
    |
3   + use crate::database::models::PluginCategory;
    |

error[E0433]: failed to resolve: use of undeclared type `PluginCategory`
   --> src\commands\plugin.rs:103:24
    |
103 |             "theme" => PluginCategory::Theme,
    |                        ^^^^^^^^^^^^^^ use of undeclared type 
`PluginCategory`
    |
help: consider importing this enum through its public re-export
    |
3   + use crate::database::models::PluginCategory;
    |

error[E0433]: failed to resolve: use of undeclared type `PluginCategory`
   --> src\commands\plugin.rs:104:27
    |
104 |             "workflow" => PluginCategory::Workflow,
    |                           ^^^^^^^^^^^^^^ use of undeclared type 
`PluginCategory`
    |
help: consider importing this enum through its public re-export
    |
3   + use crate::database::models::PluginCategory;
    |

error[E0433]: failed to resolve: use of undeclared type `PluginCategory`
   --> src\commands\plugin.rs:105:32
    |
105 |             "collaboration" => PluginCategory::Collaboration,
    |                                ^^^^^^^^^^^^^^ use of undeclared 
type `PluginCategory`
    |
help: consider importing this enum through its public re-export
    |
3   + use crate::database::models::PluginCategory;
    |

error[E0433]: failed to resolve: use of undeclared type `PluginSortOrder`
   --> src\commands\plugin.rs:114:23
    |
114 |             "name" => PluginSortOrder::Name,
    |                       ^^^^^^^^^^^^^^^ use of undeclared type 
`PluginSortOrder`
    |
help: consider importing this enum through its public re-export
    |
3   + use crate::database::models::PluginSortOrder;
    |

error[E0433]: failed to resolve: use of undeclared type `PluginSortOrder`
   --> src\commands\plugin.rs:115:25
    |
115 |             "rating" => PluginSortOrder::Rating,
    |                         ^^^^^^^^^^^^^^^ use of undeclared type 
`PluginSortOrder`
    |
help: consider importing this enum through its public re-export
    |
3   + use crate::database::models::PluginSortOrder;
    |

error[E0433]: failed to resolve: use of undeclared type `PluginSortOrder`
   --> src\commands\plugin.rs:116:28
    |
116 |             "downloads" => PluginSortOrder::Downloads,
    |                            ^^^^^^^^^^^^^^^ use of undeclared type 
`PluginSortOrder`
    |
help: consider importing this enum through its public re-export
    |
3   + use crate::database::models::PluginSortOrder;
    |

error[E0433]: failed to resolve: use of undeclared type `PluginSortOrder`
   --> src\commands\plugin.rs:117:25
    |
117 |             "recent" => PluginSortOrder::Recent,
    |                         ^^^^^^^^^^^^^^^ use of undeclared type 
`PluginSortOrder`
    |
help: consider importing this enum through its public re-export
    |
3   + use crate::database::models::PluginSortOrder;
    |

error[E0433]: failed to resolve: use of undeclared type `PluginSortOrder`
   --> src\commands\plugin.rs:118:28
    |
118 |             "relevance" => PluginSortOrder::Relevance,
    |                            ^^^^^^^^^^^^^^^ use of undeclared type 
`PluginSortOrder`
    |
help: consider importing this enum through its public re-export
    |
3   + use crate::database::models::PluginSortOrder;
    |

error[E0433]: failed to resolve: use of undeclared type `PluginSortOrder`
   --> src\commands\plugin.rs:119:18
    |
119 |             _ => PluginSortOrder::Rating,
    |                  ^^^^^^^^^^^^^^^ use of undeclared type 
`PluginSortOrder`
    |
help: consider importing this enum through its public re-export
    |
3   + use crate::database::models::PluginSortOrder;
    |

error[E0433]: failed to resolve: use of undeclared type `PluginSortOrder`
   --> src\commands\plugin.rs:122:9
    |
122 |         PluginSortOrder::Rating
    |         ^^^^^^^^^^^^^^^ use of undeclared type `PluginSortOrder`
    |
help: consider importing this enum through its public re-export
    |
3   + use crate::database::models::PluginSortOrder;
    |

error[E0433]: failed to resolve: use of undeclared type `PluginCategory`
   --> src\commands\plugin.rs:159:34
    |
159 |             "text_processing" => PluginCategory::TextProcessing,
    |                                  ^^^^^^^^^^^^^^ use of undeclared 
type `PluginCategory`
    |
help: consider importing this enum through its public re-export
    |
3   + use crate::database::models::PluginCategory;
    |

error[E0433]: failed to resolve: use of undeclared type `PluginCategory`
   --> src\commands\plugin.rs:160:33
    |
160 |             "ai_integration" => PluginCategory::AIIntegration,
    |                                 ^^^^^^^^^^^^^^ use of undeclared 
type `PluginCategory`
    |
help: consider importing this enum through its public re-export
    |
3   + use crate::database::models::PluginCategory;
    |

error[E0433]: failed to resolve: use of undeclared type `PluginCategory`
   --> src\commands\plugin.rs:161:25
    |
161 |             "export" => PluginCategory::Export,
    |                         ^^^^^^^^^^^^^^ use of undeclared type 
`PluginCategory`
    |
help: consider importing this enum through its public re-export
    |
3   + use crate::database::models::PluginCategory;
    |

error[E0433]: failed to resolve: use of undeclared type `PluginCategory`
   --> src\commands\plugin.rs:162:25
    |
162 |             "import" => PluginCategory::Import,
    |                         ^^^^^^^^^^^^^^ use of undeclared type 
`PluginCategory`
    |
help: consider importing this enum through its public re-export
    |
3   + use crate::database::models::PluginCategory;
    |

error[E0433]: failed to resolve: use of undeclared type `PluginCategory`
   --> src\commands\plugin.rs:163:29
    |
163 |             "formatting" => PluginCategory::Formatting,
    |                             ^^^^^^^^^^^^^^ use of undeclared type 
`PluginCategory`
    |
help: consider importing this enum through its public re-export
    |
3   + use crate::database::models::PluginCategory;
    |

error[E0433]: failed to resolve: use of undeclared type `PluginCategory`
   --> src\commands\plugin.rs:164:27
    |
164 |             "analysis" => PluginCategory::Analysis,
    |                           ^^^^^^^^^^^^^^ use of undeclared type 
`PluginCategory`
    |
help: consider importing this enum through its public re-export
    |
3   + use crate::database::models::PluginCategory;
    |

error[E0433]: failed to resolve: use of undeclared type `PluginCategory`
   --> src\commands\plugin.rs:165:26
    |
165 |             "utility" => PluginCategory::Utility,
    |                          ^^^^^^^^^^^^^^ use of undeclared type 
`PluginCategory`
    |
help: consider importing this enum through its public re-export
    |
3   + use crate::database::models::PluginCategory;
    |

error[E0433]: failed to resolve: use of undeclared type `PluginCategory`
   --> src\commands\plugin.rs:166:24
    |
166 |             "theme" => PluginCategory::Theme,
    |                        ^^^^^^^^^^^^^^ use of undeclared type 
`PluginCategory`
    |
help: consider importing this enum through its public re-export
    |
3   + use crate::database::models::PluginCategory;
    |

error[E0433]: failed to resolve: use of undeclared type `PluginCategory`
   --> src\commands\plugin.rs:167:27
    |
167 |             "workflow" => PluginCategory::Workflow,
    |                           ^^^^^^^^^^^^^^ use of undeclared type 
`PluginCategory`
    |
help: consider importing this enum through its public re-export
    |
3   + use crate::database::models::PluginCategory;
    |

error[E0433]: failed to resolve: use of undeclared type `PluginCategory`
   --> src\commands\plugin.rs:168:32
    |
168 |             "collaboration" => PluginCategory::Collaboration,
    |                                ^^^^^^^^^^^^^^ use of undeclared 
type `PluginCategory`
    |
help: consider importing this enum through its public re-export
    |
3   + use crate::database::models::PluginCategory;
    |

error[E0433]: failed to resolve: use of undeclared type `PluginVisibility`
   --> src\commands\plugin.rs:177:25
    |
177 |             "public" => PluginVisibility::Public,
    |                         ^^^^^^^^^^^^^^^^ use of undeclared type 
`PluginVisibility`
    |
help: consider importing this enum through its public re-export
    |
3   + use crate::database::models::PluginVisibility;
    |

error[E0433]: failed to resolve: use of undeclared type `PluginVisibility`
   --> src\commands\plugin.rs:178:26
    |
178 |             "private" => PluginVisibility::Private,
    |                          ^^^^^^^^^^^^^^^^ use of undeclared type 
`PluginVisibility`
    |
help: consider importing this enum through its public re-export
    |
3   + use crate::database::models::PluginVisibility;
    |

error[E0433]: failed to resolve: use of undeclared type `PluginVisibility`
   --> src\commands\plugin.rs:179:27
    |
179 |             "unlisted" => PluginVisibility::Unlisted,
    |                           ^^^^^^^^^^^^^^^^ use of undeclared type 
`PluginVisibility`
    |
help: consider importing this enum through its public re-export
    |
3   + use crate::database::models::PluginVisibility;
    |

error[E0412]: cannot find type `PluginExecutionResult` in this scope
   --> src\commands\plugin.rs:224:13
    |
224 | ) -> Result<PluginExecutionResult, StoryWeaverError> {
    |             ^^^^^^^^^^^^^^^^^^^^^ not found in this scope
    |
help: consider importing this struct through its public re-export
    |
3   + use crate::database::models::PluginExecutionResult;
    |

error[E0422]: cannot find struct, variant or union type 
`PluginExecutionRequest` in this scope
   --> src\commands\plugin.rs:234:19
    |
234 |     let request = PluginExecutionRequest {
    |                   ^^^^^^^^^^^^^^^^^^^^^^ not found in this scope
    |
help: consider importing this struct through its public re-export
    |
3   + use crate::database::models::PluginExecutionRequest;
    |

error[E0422]: cannot find struct, variant or union type 
`PluginExecutionResult` in this scope
   --> src\commands\plugin.rs:243:18
    |
243 |     let result = PluginExecutionResult {
    |                  ^^^^^^^^^^^^^^^^^^^^^ not found in this scope
    |
help: consider importing this struct through its public re-export
    |
3   + use crate::database::models::PluginExecutionResult;
    |

error[E0422]: cannot find struct, variant or union type `PluginRating` in 
this scope
   --> src\commands\plugin.rs:283:25
    |
283 |     let plugin_rating = PluginRating {
    |                         ^^^^^^^^^^^^ not found in this scope
    |
help: consider importing this struct through its public re-export
    |
3   + use crate::database::models::PluginRating;
    |

error[E0412]: cannot find type `PluginRating` in this scope
   --> src\commands\plugin.rs:303:17
    |
303 | ) -> Result<Vec<PluginRating>, StoryWeaverError> {
    |                 ^^^^^^^^^^^^ not found in this scope
    |
help: consider importing this struct through its public re-export
    |
3   + use crate::database::models::PluginRating;
    |

error[E0412]: cannot find type `PluginUsageStats` in this scope
   --> src\commands\plugin.rs:315:20
    |
315 | ) -> Result<Option<PluginUsageStats>, StoryWeaverError> {
    |                    ^^^^^^^^^^^^^^^^ not found in this scope
    |
help: consider importing this struct through its public re-export
    |
3   + use crate::database::models::PluginUsageStats;
    |

error[E0412]: cannot find type `PluginExecutionHistory` in this scope
   --> src\commands\plugin.rs:330:17
    |
330 | ) -> Result<Vec<PluginExecutionHistory>, StoryWeaverError> {
    |                 ^^^^^^^^^^^^^^^^^^^^^^ not found in this scope
    |
help: consider importing this struct through its public re-export
    |
3   + use crate::database::models::PluginExecutionHistory;
    |

error[E0412]: cannot find type `PluginTemplate` in this scope
   --> src\commands\plugin.rs:348:17
    |
348 | ) -> Result<Vec<PluginTemplate>, StoryWeaverError> {
    |                 ^^^^^^^^^^^^^^ not found in this scope
    |
help: consider importing this struct through its public re-export
    |
3   + use crate::database::models::PluginTemplate;
    |

error[E0433]: failed to resolve: use of undeclared type `PluginCategory`
   --> src\commands\plugin.rs:353:34
    |
353 |             "text_processing" => PluginCategory::TextProcessing,
    |                                  ^^^^^^^^^^^^^^ use of undeclared 
type `PluginCategory`
    |
help: consider importing this enum through its public re-export
    |
3   + use crate::database::models::PluginCategory;
    |

error[E0433]: failed to resolve: use of undeclared type `PluginCategory`
   --> src\commands\plugin.rs:354:33
    |
354 |             "ai_integration" => PluginCategory::AIIntegration,
    |                                 ^^^^^^^^^^^^^^ use of undeclared 
type `PluginCategory`
    |
help: consider importing this enum through its public re-export
    |
3   + use crate::database::models::PluginCategory;
    |

error[E0433]: failed to resolve: use of undeclared type `PluginCategory`
   --> src\commands\plugin.rs:355:25
    |
355 |             "export" => PluginCategory::Export,
    |                         ^^^^^^^^^^^^^^ use of undeclared type 
`PluginCategory`
    |
help: consider importing this enum through its public re-export
    |
3   + use crate::database::models::PluginCategory;
    |

error[E0433]: failed to resolve: use of undeclared type `PluginCategory`
   --> src\commands\plugin.rs:356:25
    |
356 |             "import" => PluginCategory::Import,
    |                         ^^^^^^^^^^^^^^ use of undeclared type 
`PluginCategory`
    |
help: consider importing this enum through its public re-export
    |
3   + use crate::database::models::PluginCategory;
    |

error[E0433]: failed to resolve: use of undeclared type `PluginCategory`
   --> src\commands\plugin.rs:357:29
    |
357 |             "formatting" => PluginCategory::Formatting,
    |                             ^^^^^^^^^^^^^^ use of undeclared type 
`PluginCategory`
    |
help: consider importing this enum through its public re-export
    |
3   + use crate::database::models::PluginCategory;
    |

error[E0433]: failed to resolve: use of undeclared type `PluginCategory`
   --> src\commands\plugin.rs:358:27
    |
358 |             "analysis" => PluginCategory::Analysis,
    |                           ^^^^^^^^^^^^^^ use of undeclared type 
`PluginCategory`
    |
help: consider importing this enum through its public re-export
    |
3   + use crate::database::models::PluginCategory;
    |

error[E0433]: failed to resolve: use of undeclared type `PluginCategory`
   --> src\commands\plugin.rs:359:26
    |
359 |             "utility" => PluginCategory::Utility,
    |                          ^^^^^^^^^^^^^^ use of undeclared type 
`PluginCategory`
    |
help: consider importing this enum through its public re-export
    |
3   + use crate::database::models::PluginCategory;
    |

error[E0433]: failed to resolve: use of undeclared type `PluginCategory`
   --> src\commands\plugin.rs:360:24
    |
360 |             "theme" => PluginCategory::Theme,
    |                        ^^^^^^^^^^^^^^ use of undeclared type 
`PluginCategory`
    |
help: consider importing this enum through its public re-export
    |
3   + use crate::database::models::PluginCategory;
    |

error[E0433]: failed to resolve: use of undeclared type `PluginCategory`
   --> src\commands\plugin.rs:361:27
    |
361 |             "workflow" => PluginCategory::Workflow,
    |                           ^^^^^^^^^^^^^^ use of undeclared type 
`PluginCategory`
    |
help: consider importing this enum through its public re-export
    |
3   + use crate::database::models::PluginCategory;
    |

error[E0433]: failed to resolve: use of undeclared type `PluginCategory`
   --> src\commands\plugin.rs:362:32
    |
362 |             "collaboration" => PluginCategory::Collaboration,
    |                                ^^^^^^^^^^^^^^ use of undeclared 
type `PluginCategory`
    |
help: consider importing this enum through its public re-export
    |
3   + use crate::database::models::PluginCategory;
    |

error[E0412]: cannot find type `Plugin` in this scope
   --> src\commands\plugin.rs:380:17
    |
380 | ) -> Result<Vec<Plugin>, StoryWeaverError> {
    |                 ^^^^^^ not found in this scope
    |
help: consider importing one of these items
    |
3   + use crate::database::models::Plugin;
    |
3   + use tauri::plugin::Plugin;
    |

error[E0433]: failed to resolve: use of undeclared type `PluginCategory`
   --> src\commands\plugin.rs:385:26
    |
385 |             "writing" => PluginCategory::Writing,
    |                          ^^^^^^^^^^^^^^ use of undeclared type 
`PluginCategory`
    |
help: consider importing this enum through its public re-export
    |
3   + use crate::database::models::PluginCategory;
    |

error[E0433]: failed to resolve: use of undeclared type `PluginCategory`
   --> src\commands\plugin.rs:386:26
    |
386 |             "editing" => PluginCategory::Editing,
    |                          ^^^^^^^^^^^^^^ use of undeclared type 
`PluginCategory`
    |
help: consider importing this enum through its public re-export
    |
3   + use crate::database::models::PluginCategory;
    |

error[E0433]: failed to resolve: use of undeclared type `PluginCategory`
   --> src\commands\plugin.rs:387:27
    |
387 |             "analysis" => PluginCategory::Analysis,
    |                           ^^^^^^^^^^^^^^ use of undeclared type 
`PluginCategory`
    |
help: consider importing this enum through its public re-export
    |
3   + use crate::database::models::PluginCategory;
    |

error[E0433]: failed to resolve: use of undeclared type `PluginCategory`
   --> src\commands\plugin.rs:388:32
    |
388 |             "brainstorming" => PluginCategory::Brainstorming,
    |                                ^^^^^^^^^^^^^^ use of undeclared 
type `PluginCategory`
    |
help: consider importing this enum through its public re-export
    |
3   + use crate::database::models::PluginCategory;
    |

error[E0433]: failed to resolve: use of undeclared type `PluginCategory`
   --> src\commands\plugin.rs:389:27
    |
389 |             "research" => PluginCategory::Research,
    |                           ^^^^^^^^^^^^^^ use of undeclared type 
`PluginCategory`
    |
help: consider importing this enum through its public re-export
    |
3   + use crate::database::models::PluginCategory;
    |

error[E0433]: failed to resolve: use of undeclared type `PluginCategory`
   --> src\commands\plugin.rs:390:29
    |
390 |             "formatting" => PluginCategory::Formatting,
    |                             ^^^^^^^^^^^^^^ use of undeclared type 
`PluginCategory`
    |
help: consider importing this enum through its public re-export
    |
3   + use crate::database::models::PluginCategory;
    |

error[E0433]: failed to resolve: use of undeclared type `PluginCategory`
   --> src\commands\plugin.rs:391:24
    |
391 |             "other" => PluginCategory::Other,
    |                        ^^^^^^^^^^^^^^ use of undeclared type 
`PluginCategory`
    |
help: consider importing this enum through its public re-export
    |
3   + use crate::database::models::PluginCategory;
    |

error[E0422]: cannot find struct, variant or union type 
`PluginExecutionRequest` in this scope
   --> src\commands\plugin.rs:416:19
    |
416 |     let request = PluginExecutionRequest {
    |                   ^^^^^^^^^^^^^^^^^^^^^^ not found in this scope
    |
help: consider importing this struct through its public re-export
    |
3   + use crate::database::models::PluginExecutionRequest;
    |

error[E0422]: cannot find struct, variant or union type 
`PluginExecutionResult` in this scope
   --> src\commands\plugin.rs:423:18
    |
423 |     let result = PluginExecutionResult {
    |                  ^^^^^^^^^^^^^^^^^^^^^ not found in this scope
    |
help: consider importing this struct through its public re-export
    |
3   + use crate::database::models::PluginExecutionResult;
    |

error[E0412]: cannot find type `Plugin` in this scope
   --> src\commands\plugin.rs:447:13
    |
447 | ) -> Result<Plugin, StoryWeaverError> {
    |             ^^^^^^ not found in this scope
    |
help: consider importing one of these items
    |
3   + use crate::database::models::Plugin;
    |
3   + use tauri::plugin::Plugin;
    |

error[E0422]: cannot find struct, variant or union type `Plugin` in this 
scope
   --> src\commands\plugin.rs:457:18
    |
457 |     let plugin = Plugin {
    |                  ^^^^^^ not found in this scope
    |
help: consider importing this struct through its public re-export
    |
3   + use crate::database::models::Plugin;
    |

error[E0412]: cannot find type `PluginTemplate` in this scope
   --> src\commands\plugin.rs:492:13
    |
492 | ) -> Result<PluginTemplate, StoryWeaverError> {
    |             ^^^^^^^^^^^^^^ not found in this scope
    |
help: consider importing this struct through its public re-export
    |
3   + use crate::database::models::PluginTemplate;
    |

error[E0433]: failed to resolve: use of undeclared type `PluginCategory`
   --> src\commands\plugin.rs:496:22
    |
496 |         "writing" => PluginCategory::Writing,
    |                      ^^^^^^^^^^^^^^ use of undeclared type 
`PluginCategory`
    |
help: consider importing this enum through its public re-export
    |
3   + use crate::database::models::PluginCategory;
    |

error[E0433]: failed to resolve: use of undeclared type `PluginCategory`
   --> src\commands\plugin.rs:497:22
    |
497 |         "editing" => PluginCategory::Editing,
    |                      ^^^^^^^^^^^^^^ use of undeclared type 
`PluginCategory`
    |
help: consider importing this enum through its public re-export
    |
3   + use crate::database::models::PluginCategory;
    |

error[E0433]: failed to resolve: use of undeclared type `PluginCategory`
   --> src\commands\plugin.rs:498:23
    |
498 |         "analysis" => PluginCategory::Analysis,
    |                       ^^^^^^^^^^^^^^ use of undeclared type 
`PluginCategory`
    |
help: consider importing this enum through its public re-export
    |
3   + use crate::database::models::PluginCategory;
    |

error[E0433]: failed to resolve: use of undeclared type `PluginCategory`
   --> src\commands\plugin.rs:499:28
    |
499 |         "brainstorming" => PluginCategory::Brainstorming,
    |                            ^^^^^^^^^^^^^^ use of undeclared type 
`PluginCategory`
    |
help: consider importing this enum through its public re-export
    |
3   + use crate::database::models::PluginCategory;
    |

error[E0433]: failed to resolve: use of undeclared type `PluginCategory`
   --> src\commands\plugin.rs:500:23
    |
500 |         "research" => PluginCategory::Research,
    |                       ^^^^^^^^^^^^^^ use of undeclared type 
`PluginCategory`
    |
help: consider importing this enum through its public re-export
    |
3   + use crate::database::models::PluginCategory;
    |

error[E0433]: failed to resolve: use of undeclared type `PluginCategory`
   --> src\commands\plugin.rs:501:25
    |
501 |         "formatting" => PluginCategory::Formatting,
    |                         ^^^^^^^^^^^^^^ use of undeclared type 
`PluginCategory`
    |
help: consider importing this enum through its public re-export
    |
3   + use crate::database::models::PluginCategory;
    |

error[E0433]: failed to resolve: use of undeclared type `PluginCategory`
   --> src\commands\plugin.rs:502:20
    |
502 |         "other" => PluginCategory::Other,
    |                    ^^^^^^^^^^^^^^ use of undeclared type 
`PluginCategory`
    |
help: consider importing this enum through its public re-export
    |
3   + use crate::database::models::PluginCategory;
    |

error[E0422]: cannot find struct, variant or union type `PluginTemplate` 
in this scope
   --> src\commands\plugin.rs:506:20
    |
506 |     let template = PluginTemplate {
    |                    ^^^^^^^^^^^^^^ not found in this scope
    |
help: consider importing this struct through its public re-export
    |
3   + use crate::database::models::PluginTemplate;
    |

error[E0433]: failed to resolve: use of undeclared type `CanvasType`
  --> src\commands\canvas.rs:21:28
   |
21 |         "story_outline" => CanvasType::StoryOutline,
   |                            ^^^^^^^^^^ use of undeclared type 
`CanvasType`
   |
help: consider importing this enum through its public re-export
   |
3  + use crate::database::models::CanvasType;
   |

error[E0433]: failed to resolve: use of undeclared type `CanvasType`
  --> src\commands\canvas.rs:22:28
   |
22 |         "character_map" => CanvasType::CharacterMap,
   |                            ^^^^^^^^^^ use of undeclared type 
`CanvasType`
   |
help: consider importing this enum through its public re-export
   |
3  + use crate::database::models::CanvasType;
   |

error[E0433]: failed to resolve: use of undeclared type `CanvasType`
  --> src\commands\canvas.rs:23:29
   |
23 |         "world_building" => CanvasType::WorldBuilding,
   |                             ^^^^^^^^^^ use of undeclared type 
`CanvasType`
   |
help: consider importing this enum through its public re-export
   |
3  + use crate::database::models::CanvasType;
   |

error[E0433]: failed to resolve: use of undeclared type `CanvasType`
  --> src\commands\canvas.rs:24:23
   |
24 |         "timeline" => CanvasType::Timeline,
   |                       ^^^^^^^^^^ use of undeclared type `CanvasType`
   |
help: consider importing this enum through its public re-export
   |
3  + use crate::database::models::CanvasType;
   |

error[E0433]: failed to resolve: use of undeclared type `CanvasType`
  --> src\commands\canvas.rs:25:29
   |
25 |         "plot_structure" => CanvasType::PlotStructure,
   |                             ^^^^^^^^^^ use of undeclared type 
`CanvasType`
   |
help: consider importing this enum through its public re-export
   |
3  + use crate::database::models::CanvasType;
   |

error[E0433]: failed to resolve: use of undeclared type `CanvasType`
  --> src\commands\canvas.rs:26:23
   |
26 |         "mind_map" => CanvasType::MindMap,
   |                       ^^^^^^^^^^ use of undeclared type `CanvasType`
   |
help: consider importing this enum through its public re-export
   |
3  + use crate::database::models::CanvasType;
   |

error[E0433]: failed to resolve: use of undeclared type `CanvasType`
  --> src\commands\canvas.rs:27:24
   |
27 |         "free_form" => CanvasType::FreeForm,
   |                        ^^^^^^^^^^ use of undeclared type `CanvasType`
   |
help: consider importing this enum through its public re-export
   |
3  + use crate::database::models::CanvasType;
   |

error[E0425]: cannot find function `get_canvases_by_project` in module 
`crate::database::operations::canvas`
  --> src\commands\canvas.rs:55:42
   |
55 |     
crate::database::operations::canvas::get_canvases_by_project(&pool, 
&project_id)
   |                                          ^^^^^^^^^^^^^^^^^^^^^^^ not 
found in `crate::database::operations::canvas`

error[E0433]: failed to resolve: use of undeclared type 
`CanvasElementType`
   --> src\commands\canvas.rs:103:23
    |
103 |         "text_box" => CanvasElementType::TextBox,
    |                       ^^^^^^^^^^^^^^^^^ use of undeclared type 
`CanvasElementType`
    |
help: consider importing this enum through its public re-export
    |
3   + use crate::database::models::CanvasElementType;
    |

error[E0433]: failed to resolve: use of undeclared type 
`CanvasElementType`
   --> src\commands\canvas.rs:104:26
    |
104 |         "sticky_note" => CanvasElementType::StickyNote,
    |                          ^^^^^^^^^^^^^^^^^ use of undeclared type 
`CanvasElementType`
    |
help: consider importing this enum through its public re-export
    |
3   + use crate::database::models::CanvasElementType;
    |

error[E0433]: failed to resolve: use of undeclared type 
`CanvasElementType`
   --> src\commands\canvas.rs:105:29
    |
105 |         "character_card" => CanvasElementType::CharacterCard,
    |                             ^^^^^^^^^^^^^^^^^ use of undeclared 
type `CanvasElementType`
    |
help: consider importing this enum through its public re-export
    |
3   + use crate::database::models::CanvasElementType;
    |

error[E0433]: failed to resolve: use of undeclared type 
`CanvasElementType`
   --> src\commands\canvas.rs:106:25
    |
106 |         "scene_card" => CanvasElementType::SceneCard,
    |                         ^^^^^^^^^^^^^^^^^ use of undeclared type 
`CanvasElementType`
    |
help: consider importing this enum through its public re-export
    |
3   + use crate::database::models::CanvasElementType;
    |

error[E0433]: failed to resolve: use of undeclared type 
`CanvasElementType`
   --> src\commands\canvas.rs:107:25
    |
107 |         "plot_point" => CanvasElementType::PlotPoint,
    |                         ^^^^^^^^^^^^^^^^^ use of undeclared type 
`CanvasElementType`
    |
help: consider importing this enum through its public re-export
    |
3   + use crate::database::models::CanvasElementType;
    |

error[E0433]: failed to resolve: use of undeclared type 
`CanvasElementType`
   --> src\commands\canvas.rs:108:29
    |
108 |         "timeline_event" => CanvasElementType::TimelineEvent,
    |                             ^^^^^^^^^^^^^^^^^ use of undeclared 
type `CanvasElementType`
    |
help: consider importing this enum through its public re-export
    |
3   + use crate::database::models::CanvasElementType;
    |

error[E0433]: failed to resolve: use of undeclared type 
`CanvasElementType`
   --> src\commands\canvas.rs:109:30
    |
109 |         "connection_line" => CanvasElementType::ConnectionLine,
    |                              ^^^^^^^^^^^^^^^^^ use of undeclared 
type `CanvasElementType`
    |
help: consider importing this enum through its public re-export
    |
3   + use crate::database::models::CanvasElementType;
    |

error[E0433]: failed to resolve: use of undeclared type 
`CanvasElementType`
   --> src\commands\canvas.rs:110:20
    |
110 |         "image" => CanvasElementType::Image,
    |                    ^^^^^^^^^^^^^^^^^ use of undeclared type 
`CanvasElementType`
    |
help: consider importing this enum through its public re-export
    |
3   + use crate::database::models::CanvasElementType;
    |

error[E0433]: failed to resolve: use of undeclared type 
`CanvasElementType`
   --> src\commands\canvas.rs:111:20
    |
111 |         "shape" => CanvasElementType::Shape,
    |                    ^^^^^^^^^^^^^^^^^ use of undeclared type 
`CanvasElementType`
    |
help: consider importing this enum through its public re-export
    |
3   + use crate::database::models::CanvasElementType;
    |

error[E0433]: failed to resolve: use of undeclared type 
`CanvasElementType`
   --> src\commands\canvas.rs:112:20
    |
112 |         "group" => CanvasElementType::Group,
    |                    ^^^^^^^^^^^^^^^^^ use of undeclared type 
`CanvasElementType`
    |
help: consider importing this enum through its public re-export
    |
3   + use crate::database::models::CanvasElementType;
    |

error[E0422]: cannot find struct, variant or union type 
`CanvasExportRequest` in this scope
   --> src\commands\canvas.rs:295:19
    |
295 |     let request = CanvasExportRequest {
    |                   ^^^^^^^^^^^^^^^^^^^ not found in this scope
    |
help: consider importing this struct through its public re-export
    |
3   + use crate::database::models::CanvasExportRequest;
    |

error[E0433]: failed to resolve: use of undeclared type 
`CanvasOperationType`
   --> src\commands\canvas.rs:508:29
    |
508 |         "create_element" => CanvasOperationType::CreateElement,
    |                             ^^^^^^^^^^^^^^^^^^^ use of undeclared 
type `CanvasOperationType`
    |
help: consider importing this enum through its public re-export
    |
3   + use crate::database::models::CanvasOperationType;
    |

error[E0433]: failed to resolve: use of undeclared type 
`CanvasOperationType`
   --> src\commands\canvas.rs:509:29
    |
509 |         "update_element" => CanvasOperationType::UpdateElement,
    |                             ^^^^^^^^^^^^^^^^^^^ use of undeclared 
type `CanvasOperationType`
    |
help: consider importing this enum through its public re-export
    |
3   + use crate::database::models::CanvasOperationType;
    |

error[E0433]: failed to resolve: use of undeclared type 
`CanvasOperationType`
   --> src\commands\canvas.rs:510:29
    |
510 |         "delete_element" => CanvasOperationType::DeleteElement,
    |                             ^^^^^^^^^^^^^^^^^^^ use of undeclared 
type `CanvasOperationType`
    |
help: consider importing this enum through its public re-export
    |
3   + use crate::database::models::CanvasOperationType;
    |

error[E0433]: failed to resolve: use of undeclared type 
`CanvasOperationType`
   --> src\commands\canvas.rs:511:27
    |
511 |         "move_element" => CanvasOperationType::MoveElement,
    |                           ^^^^^^^^^^^^^^^^^^^ use of undeclared 
type `CanvasOperationType`
    |
help: consider importing this enum through its public re-export
    |
3   + use crate::database::models::CanvasOperationType;
    |

error[E0433]: failed to resolve: use of undeclared type 
`CanvasOperationType`
   --> src\commands\canvas.rs:512:29
    |
512 |         "resize_element" => CanvasOperationType::ResizeElement,
    |                             ^^^^^^^^^^^^^^^^^^^ use of undeclared 
type `CanvasOperationType`
    |
help: consider importing this enum through its public re-export
    |
3   + use crate::database::models::CanvasOperationType;
    |

error[E0433]: failed to resolve: use of undeclared type 
`CanvasOperationType`
   --> src\commands\canvas.rs:513:28
    |
513 |         "update_canvas" => CanvasOperationType::UpdateCanvas,
    |                            ^^^^^^^^^^^^^^^^^^^ use of undeclared 
type `CanvasOperationType`
    |
help: consider importing this enum through its public re-export
    |
3   + use crate::database::models::CanvasOperationType;
    |

error[E0412]: cannot find type `MemoryStats` in this scope
   --> src\database\optimization\mod.rs:179:17
    |
179 |     pub memory: MemoryStats,
    |                 ^^^^^^^^^^^ not found in this scope

error[E0603]: module `plugin` is private
  --> src\commands\plugin.rs:3:41
   |
3  | use crate::database::{get_pool, models::plugin::*, 
operations::plugin::*};
   |                                         ^^^^^^ private module
   |
note: the module `plugin` is defined here
  --> src\database\models.rs:18:1
   |
18 | mod plugin;
   | ^^^^^^^^^^^

error[E0603]: module `canvas` is private
  --> src\commands\canvas.rs:3:41
   |
3  | use crate::database::{get_pool, models::canvas::*, 
operations::canvas::*};
   |                                         ^^^^^^ private module
   |
note: the module `canvas` is defined here
  --> src\database\models.rs:19:1
   |
19 | mod canvas;
   | ^^^^^^^^^^^

error[E0603]: module `canvas` is private
  --> src\commands\canvas.rs:4:30
   |
4  | use crate::database::models::canvas::{Canvas, CanvasElement, 
OutlineTemplate, CanvasCollaborationSession, CanvasSnapshot, 
CanvasExportRes...
   |                              ^^^^^^ private module
   |
note: the module `canvas` is defined here
  --> src\database\models.rs:19:1
   |
19 | mod canvas;
   | ^^^^^^^^^^^

error[E0603]: module `canvas` is private
  --> src\commands\canvas.rs:4:30
   |
4  | use crate::database::models::canvas::{Canvas, CanvasElement, 
OutlineTemplate, CanvasCollaborationSession, CanvasSnapshot, 
CanvasExportRes...
   |                              ^^^^^^ private module
   |
help: consider importing this enum through its public re-export instead:
      crate::database::models::OutlineTemplateType
  --> src\commands\canvas.rs:4:160
   |
4  | ...on, CanvasSnapshot, CanvasExportResult, CanvasOperation, 
OutlineTemplateType, ExportFormat};
   |                                                             
^^^^^^^^^^^^^^^^^^^
note: the module `canvas` is defined here
  --> src\database\models.rs:19:1
   |
19 | mod canvas;
   | ^^^^^^^^^^^

error[E0603]: module `canvas` is private
  --> src\commands\canvas.rs:4:30
   |
4  | use crate::database::models::canvas::{Canvas, CanvasElement, 
OutlineTemplate, CanvasCollaborationSession, CanvasSnapshot, 
CanvasExportRes...
   |                              ^^^^^^ private module
   |
help: consider importing this enum through its public re-export instead:
      crate::database::models::ExportFormat
  --> src\commands\canvas.rs:4:181
   |
4  | ...t, CanvasExportResult, CanvasOperation, OutlineTemplateType, 
ExportFormat};
   |                                                                 
^^^^^^^^^^^^
note: the module `canvas` is defined here
  --> src\database\models.rs:19:1
   |
19 | mod canvas;
   | ^^^^^^^^^^^

warning: unused imports: `models::*` and `operations::*`
 --> src\commands\mod.rs:4:33
  |
4 | use crate::database::{get_pool, models::*, operations::*};
  |                                 ^^^^^^^^^  ^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `tauri::State`
 --> src\commands\mod.rs:7:5
  |
7 | use tauri::State;
  |     ^^^^^^^^^^^^

warning: unused import: `Serialize`
 --> src\commands\story_bible.rs:6:26
  |
6 | use serde::{Deserialize, Serialize};
  |                          ^^^^^^^^^

warning: unused import: `StoryWeaverError`
 --> src\commands\story_bible_ai.rs:4:20
  |
4 | use crate::error::{StoryWeaverError, Result};
  |                    ^^^^^^^^^^^^^^^^

warning: unused import: `WorldElementOps`
 --> src\commands\story_bible_ai.rs:7:69
  |
7 | use crate::database::operations::{StoryBibleOps, CharacterTraitOps, 
WorldElementOps, StyleExampleOps};
  |                                                                     
^^^^^^^^^^^^^^^

warning: unused imports: `CharacterTrait`, `StoryBible`, `StyleExample`, 
and `WorldElement`
 --> src\commands\story_bible_ai.rs:8:31
  |
8 | use crate::database::models::{StoryBible, CharacterTrait, 
WorldElement, StyleExample};
  |                               ^^^^^^^^^^  ^^^^^^^^^^^^^^  
^^^^^^^^^^^^  ^^^^^^^^^^^^

warning: unused import: `crate::commands::CommandResponse`
 --> src\commands\ai_history.rs:3:5
  |
3 | use crate::commands::CommandResponse;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::commands::CommandResponse`
 --> src\commands\ai_writing.rs:3:5
  |
3 | use crate::commands::CommandResponse;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `RewriteStyle`
 --> src\commands\ai_writing.rs:5:47
  |
5 | use crate::ai::{AIProviderManager, AIContext, RewriteStyle, 
TextStream};
  |                                               ^^^^^^^^^^^^

warning: unused import: `Manager`
 --> src\commands\ai_writing.rs:7:29
  |
7 | use tauri::{Emitter, State, Manager, Window};
  |                             ^^^^^^^

warning: unused imports: `Deserialize` and `Serialize`
 --> src\commands\ai_cards.rs:7:13
  |
7 | use serde::{Deserialize, Serialize};
  |             ^^^^^^^^^^^  ^^^^^^^^^

warning: unused import: `tauri::State`
 --> src\commands\ai_cards.rs:8:5
  |
8 | use tauri::State;
  |     ^^^^^^^^^^^^

warning: unused import: `Serialize`
 --> src\commands\folder_commands.rs:6:26
  |
6 | use serde::{Deserialize, Serialize};
  |                          ^^^^^^^^^

warning: unused import: `Serialize`
 --> src\commands\series_commands.rs:6:26
  |
6 | use serde::{Deserialize, Serialize};
  |                          ^^^^^^^^^

warning: unused import: `Serialize`
 --> src\commands\document_link_commands.rs:6:26
  |
6 | use serde::{Deserialize, Serialize};
  |                          ^^^^^^^^^

warning: unused import: `Serialize`
 --> src\commands\settings_commands.rs:4:26
  |
4 | use serde::{Deserialize, Serialize};
  |                          ^^^^^^^^^

warning: unused import: `crate::commands::CommandResponse`
 --> src\commands\performance_commands.rs:7:5
  |
7 | use crate::commands::CommandResponse;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `Deserialize` and `Serialize`
 --> src\commands\performance_commands.rs:9:13
  |
9 | use serde::{Deserialize, Serialize};
  |             ^^^^^^^^^^^  ^^^^^^^^^

warning: unused import: `tauri::State`
  --> src\commands\performance_commands.rs:10:5
   |
10 | use tauri::State;
   |     ^^^^^^^^^^^^

warning: unused import: `std::sync::Arc`
  --> src\commands\performance_commands.rs:11:5
   |
11 | use std::sync::Arc;
   |     ^^^^^^^^^^^^^^

warning: unused import: `Deserialize`
 --> src\commands\project_preview_commands.rs:6:13
  |
6 | use serde::{Deserialize, Serialize};
  |             ^^^^^^^^^^^

warning: unused imports: `CharacterTemplateTrait` and 
`WorldBuildingTemplateProperty`
 --> src\commands\templates.rs:4:49
  |
4 |     character_template_ops::{CharacterTemplate, 
CharacterTemplateTrait},
  |                                                 ^^^^^^^^^^^^^^^^^^^^^^
5 |     worldbuilding_template_ops::{WorldBuildingTemplate, 
WorldBuildingTemplateProperty}
  |                                                         
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `Deserialize` and `Serialize`
 --> src\commands\templates.rs:9:13
  |
9 | use serde::{Deserialize, Serialize};
  |             ^^^^^^^^^^^  ^^^^^^^^^

warning: unused import: `tauri::State`
  --> src\commands\templates.rs:11:5
   |
11 | use tauri::State;
   |     ^^^^^^^^^^^^

warning: unused import: `BrainstormIdea`
 --> src\commands\advanced_ai_commands.rs:9:47
  |
9 |     StyleExample, ProseMode, SaliencyContext, BrainstormIdea,
  |                                               ^^^^^^^^^^^^^^

warning: unused import: `serde_json::Value`
 --> src\commands\collaboration.rs:7:5
  |
7 | use serde_json::Value;
  |     ^^^^^^^^^^^^^^^^^

warning: unused import: `std::path::PathBuf`
 --> src\database\mod.rs:6:5
  |
6 | use std::path::PathBuf;
  |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `uuid::Uuid`
 --> src\database\operations\background_task_ops.rs:7:5
  |
7 | use uuid::Uuid;
  |     ^^^^^^^^^^

warning: unused import: `serde_json::json`
 --> src\database\operations\performance_metric_ops.rs:7:5
  |
7 | use serde_json::json;
  |     ^^^^^^^^^^^^^^^^

warning: unused import: `uuid::Uuid`
 --> src\database\operations\performance_metric_ops.rs:9:5
  |
9 | use uuid::Uuid;
  |     ^^^^^^^^^^

warning: unused import: `uuid::Uuid`
 --> src\database\operations\character_template_ops.rs:7:5
  |
7 | use uuid::Uuid;
  |     ^^^^^^^^^^

warning: unused import: `Row`
 --> src\database\operations\generated_image_ops.rs:5:26
  |
5 | use sqlx::{Pool, Sqlite, Row};
  |                          ^^^

warning: unused import: `Row`
 --> src\database\operations\brainstorm_session_ops.rs:5:26
  |
5 | use sqlx::{Pool, Sqlite, Row};
  |                          ^^^

warning: unused import: `Row`
 --> src\database\operations\credit_usage_ops.rs:5:26
  |
5 | use sqlx::{Pool, Sqlite, Row};
  |                          ^^^

warning: unused import: `Row`
 --> src\database\operations\streaming_session_ops.rs:5:26
  |
5 | use sqlx::{Pool, Sqlite, Row};
  |                          ^^^

warning: unused import: `DateTime`
 --> src\database\operations\plugin.rs:4:14
  |
4 | use chrono::{DateTime, Utc};
  |              ^^^^^^^^

warning: unused import: `DateTime`
 --> src\database\operations\canvas.rs:4:14
  |
4 | use chrono::{DateTime, Utc};
  |              ^^^^^^^^

warning: unused import: `deleted_item_ops::*`
  --> src\database\operations\mod.rs:46:9
   |
46 | pub use deleted_item_ops::*;
   |         ^^^^^^^^^^^^^^^^^^^

warning: unused import: `project_ops::*`
  --> src\database\operations\mod.rs:48:9
   |
48 | pub use project_ops::*;
   |         ^^^^^^^^^^^^^^

warning: unused import: `document_ops::*`
  --> src\database\operations\mod.rs:49:9
   |
49 | pub use document_ops::*;
   |         ^^^^^^^^^^^^^^^

warning: unused import: `character_ops::*`
  --> src\database\operations\mod.rs:50:9
   |
50 | pub use character_ops::*;
   |         ^^^^^^^^^^^^^^^^

warning: unused import: `location_ops::*`
  --> src\database\operations\mod.rs:51:9
   |
51 | pub use location_ops::*;
   |         ^^^^^^^^^^^^^^^

warning: unused import: `background_task_ops::*`
  --> src\database\operations\mod.rs:52:9
   |
52 | pub use background_task_ops::*;
   |         ^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `performance_metric_ops::*`
  --> src\database\operations\mod.rs:53:9
   |
53 | pub use performance_metric_ops::*;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `story_bible_ops::*`
  --> src\database\operations\mod.rs:54:9
   |
54 | pub use story_bible_ops::*;
   |         ^^^^^^^^^^^^^^^^^^

warning: unused import: `timeline_ops::*`
  --> src\database\operations\mod.rs:55:9
   |
55 | pub use timeline_ops::*;
   |         ^^^^^^^^^^^^^^^

warning: unused import: `plot_thread_ops::*`
  --> src\database\operations\mod.rs:56:9
   |
56 | pub use plot_thread_ops::*;
   |         ^^^^^^^^^^^^^^^^^^

warning: unused import: `character_trait_ops::*`
  --> src\database\operations\mod.rs:57:9
   |
57 | pub use character_trait_ops::*;
   |         ^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `world_element_ops::*`
  --> src\database\operations\mod.rs:58:9
   |
58 | pub use world_element_ops::*;
   |         ^^^^^^^^^^^^^^^^^^^^

warning: unused import: `outline_ops::*`
  --> src\database\operations\mod.rs:59:9
   |
59 | pub use outline_ops::*;
   |         ^^^^^^^^^^^^^^

warning: unused import: `outline_act_ops::*`
  --> src\database\operations\mod.rs:60:9
   |
60 | pub use outline_act_ops::*;
   |         ^^^^^^^^^^^^^^^^^^

warning: unused import: `scene_ops::*`
  --> src\database\operations\mod.rs:61:9
   |
61 | pub use scene_ops::*;
   |         ^^^^^^^^^^^^

warning: unused import: `series_consistency_ops::*`
  --> src\database\operations\mod.rs:62:9
   |
62 | pub use series_consistency_ops::*;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `style_example_ops::*`
  --> src\database\operations\mod.rs:63:9
   |
63 | pub use style_example_ops::*;
   |         ^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ai_history_ops::*`
  --> src\database\operations\mod.rs:64:9
   |
64 | pub use ai_history_ops::*;
   |         ^^^^^^^^^^^^^^^^^

warning: unused import: `character_template_ops::*`
  --> src\database\operations\mod.rs:65:9
   |
65 | pub use character_template_ops::*;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `worldbuilding_template_ops::*`
  --> src\database\operations\mod.rs:66:9
   |
66 | pub use worldbuilding_template_ops::*;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ai_provider_ops::*`
  --> src\database\operations\mod.rs:69:9
   |
69 | pub use ai_provider_ops::*;
   |         ^^^^^^^^^^^^^^^^^^

warning: unused import: `ai_model_configuration_ops::*`
  --> src\database\operations\mod.rs:70:9
   |
70 | pub use ai_model_configuration_ops::*;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `prose_mode_ops::*`
  --> src\database\operations\mod.rs:71:9
   |
71 | pub use prose_mode_ops::*;
   |         ^^^^^^^^^^^^^^^^^

warning: unused import: `generated_image_ops::*`
  --> src\database\operations\mod.rs:72:9
   |
72 | pub use generated_image_ops::*;
   |         ^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `brainstorm_session_ops::*`
  --> src\database\operations\mod.rs:73:9
   |
73 | pub use brainstorm_session_ops::*;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `credit_usage_ops::*`
  --> src\database\operations\mod.rs:74:9
   |
74 | pub use credit_usage_ops::*;
   |         ^^^^^^^^^^^^^^^^^^^

warning: unused import: `streaming_session_ops::*`
  --> src\database\operations\mod.rs:75:9
   |
75 | pub use streaming_session_ops::*;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `collaboration::*`
  --> src\database\operations\mod.rs:78:9
   |
78 | pub use collaboration::*;
   |         ^^^^^^^^^^^^^^^^

warning: unused import: `plugin::*`
  --> src\database\operations\mod.rs:79:9
   |
79 | pub use plugin::*;
   |         ^^^^^^^^^

warning: unused import: `canvas::*`
  --> src\database\operations\mod.rs:80:9
   |
80 | pub use canvas::*;
   |         ^^^^^^^^^

warning: unused import: `StoryWeaverError`
 --> src\database\optimization\ai_response_cache.rs:4:28
  |
4 | use crate::error::{Result, StoryWeaverError};
  |                            ^^^^^^^^^^^^^^^^

warning: unused import: `std::fmt`
 --> src\error.rs:5:5
  |
5 | use std::fmt;
  |     ^^^^^^^^

warning: unused import: `ai_card::*`
 --> src\models\mod.rs:5:9
  |
5 | pub use ai_card::*;
  |         ^^^^^^^^^^

warning: unused imports: `RewriteStyle` and `WritingFeature`
 --> src\ai\write_processor.rs:3:36
  |
3 | use super::{AIProvider, AIContext, WritingFeature, RewriteStyle};
  |                                    ^^^^^^^^^^^^^^  ^^^^^^^^^^^^

warning: unused import: `document_ops`
 --> src\ai\write_processor.rs:5:35
  |
5 | use crate::database::operations::{document_ops, DocumentOps};
  |                                   ^^^^^^^^^^^^

warning: unused import: `Context as AnyhowContext`
 --> src\ai\write_processor.rs:7:22
  |
7 | use anyhow::{Result, Context as AnyhowContext};
  |                      ^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `uuid::Uuid`
 --> src\ai\prose_modes.rs:3:5
  |
3 | use uuid::Uuid;
  |     ^^^^^^^^^^

warning: unused imports: `GenerationSettings` and `TextStream`
  --> src\ai\advanced_ai_manager.rs:6:38
   |
6  |     prose_modes::{ProseModelManager, GenerationSettings, ProseMode},
   |                                      ^^^^^^^^^^^^^^^^^^
...
10 |     AIProvider, AIContext, TextStream,
   |                            ^^^^^^^^^^

warning: unused import: `tokio::sync::Mutex`
  --> src\ai\mod.rs:21:5
   |
21 | use tokio::sync::Mutex;
   |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `performance_monitor::*`
 --> src\utils\mod.rs:7:9
  |
7 | pub use performance_monitor::*;
  |         ^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `NaiveDateTime`
 --> src\security\audit.rs:9:29
  |
9 | use chrono::{DateTime, Utc, NaiveDateTime};
  |                             ^^^^^^^^^^^^^

warning: unused import: `tokio::sync::RwLock`
  --> src\security\audit.rs:12:5
   |
12 | use tokio::sync::RwLock;
   |     ^^^^^^^^^^^^^^^^^^^

warning: unused import: `decrypt_string`
 --> src\security\privacy.rs:7:51
  |
7 | use crate::security::encryption::{encrypt_string, decrypt_string};
  |                                                   ^^^^^^^^^^^^^^

warning: unused variable: `tree`
   --> src\commands\documents.rs:181:17
    |
181 |         let mut tree: Vec<DocumentTree> = Vec::new();
    |                 ^^^^ help: if this is intentional, prefix it with 
an underscore: `_tree`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: variable does not need to be mutable
   --> src\commands\documents.rs:181:13
    |
181 |         let mut tree: Vec<DocumentTree> = Vec::new();
    |             ----^^^^
    |             |
    |             help: remove this `mut`
    |
    = note: `#[warn(unused_mut)]` on by default

warning: irrefutable `if let` pattern
   --> src\commands\locations.rs:330:16
    |
330 |             if let (current_type, other_type) = 
(&location.location_type, &other_location.location_type) {
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this pattern will always match, so the `if let` is useless
    = help: consider replacing the `if let` with a `let`
    = note: `#[warn(irrefutable_let_patterns)]` on by default

error[E0599]: no method named `into_inner` found for struct 
`tauri::State<'_, Arc<AIProviderManager>>` in the current scope
   --> src\commands\story_bible_ai.rs:120:34
    |
120 |     generate(request, ai_manager.into_inner()).await.into()
    |                                  ^^^^^^^^^^ this is an associated 
function, not a method
    |
    = note: found the following associated functions; to be used as 
methods, functions must have a `self` parameter
    = note: the candidate is defined in an impl for the type `Arc<T, A>`
    = help: items from traits can only be used if the trait is 
implemented and in scope
    = note: the following traits define an item `into_inner`, perhaps you 
need to implement one of them:
            candidate #1: `std::sys_common::IntoInner`
            candidate #2: `windows_core::IUnknownImpl`
            candidate #3: `windows_core::unknown::IUnknownImpl`
help: use associated function syntax instead
    |
120 -     generate(request, ai_manager.into_inner()).await.into()
120 +     generate(request, 
Arc::<AIProviderManager>::into_inner(ai_manager)).await.into()
    |
help: there is a method `inner` with a similar name
    |
120 -     generate(request, ai_manager.into_inner()).await.into()
120 +     generate(request, ai_manager.inner()).await.into()
    |

error[E0308]: mismatched types
   --> src\commands\story_bible_ai.rs:101:25
    |
101 |             project_id: request.project_id.clone(),
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected 
`Option<String>`, found `String`
    |
    = note: expected enum `std::option::Option<std::string::String>`
             found struct `std::string::String`
help: try wrapping the expression in `Some`
    |
101 |             project_id: Some(request.project_id.clone()),
    |                         +++++                          +

error[E0560]: struct `AIContext` has no field named `story_bible`
   --> src\commands\story_bible_ai.rs:102:13
    |
102 |             story_bible: Some(story_bible),
    |             ^^^^^^^^^^^ `AIContext` does not have this field
    |
    = note: available fields are: `document_id`, `preceding_text`, 
`following_text`, `selected_text`, `story_context` ... and 11 others

error[E0560]: struct `AIContext` has no field named `current_document`
   --> src\commands\story_bible_ai.rs:103:13
    |
103 |             current_document: None,
    |             ^^^^^^^^^^^^^^^^ `AIContext` does not have this field
    |
    = note: available fields are: `document_id`, `preceding_text`, 
`following_text`, `selected_text`, `story_context` ... and 11 others

error[E0308]: mismatched types
   --> src\commands\story_bible_ai.rs:104:31
    |
104 |             user_preferences: HashMap::new(),
    |                               ^^^^^^^^^^^^^^ expected 
`Option<HashMap<String, String>>`, found `HashMap<_, _>`
    |
    = note: expected enum 
`std::option::Option<HashMap<std::string::String, std::string::String>>`
             found struct `HashMap<_, _>`
help: try wrapping the expression in `Some`
    |
104 |             user_preferences: Some(HashMap::new()),
    |                               +++++              +

error[E0560]: struct `AIContext` has no field named `writing_feature`
   --> src\commands\story_bible_ai.rs:105:13
    |
105 |             writing_feature: WritingFeature::SynopsisGeneration,
    |             ^^^^^^^^^^^^^^^ unknown field
    |
help: a field with a similar name exists
    |
105 -             writing_feature: WritingFeature::SynopsisGeneration,
105 +             writing_style: WritingFeature::SynopsisGeneration,
    |

error[E0599]: no variant or associated item named `SynopsisGeneration` 
found for enum `WritingFeature` in the current scope
   --> src\commands\story_bible_ai.rs:105:46
    |
105 |             writing_feature: WritingFeature::SynopsisGeneration,
    |                                              ^^^^^^^^^^^^^^^^^^ 
variant or associated item not found in `WritingFeature`
    |
   ::: src\ai\mod.rs:122:1
    |
122 | pub enum WritingFeature {
    | ----------------------- variant or associated item 
`SynopsisGeneration` not found for this enum

error[E0308]: arguments to this method are incorrect
   --> src\commands\story_bible_ai.rs:109:33
    |
109 |         let result = ai_manager.generate_text(&context, 
&request.braindump).await?;
    |                                 ^^^^^^^^^^^^^ --------  
------------------ expected `&AIContext`, found `&std::string::String`
    |                                               |
    |                                               expected `&str`, 
found `&AIContext`
    |
note: method defined here
   --> src\ai\mod.rs:137:14
    |
137 |     async fn generate_text(&self, prompt: &str, context: 
&AIContext) -> anyhow::Result<String>;
    |              ^^^^^^^^^^^^^
help: swap these arguments
    |
109 -         let result = ai_manager.generate_text(&context, 
&request.braindump).await?;
109 +         let result = ai_manager.generate_text(&request.braindump, 
&context).await?;
    |

error[E0277]: `?` couldn't convert the error to `StoryWeaverError`
   --> src\commands\story_bible_ai.rs:109:82
    |
109 |         let result = ai_manager.generate_text(&context, 
&request.braindump).await?;
    |                      
------------------------------------------------------------^ the trait 
`From<anyhow::Error>` is not implemented for `StoryWeaverError`
    |                      |
    |                      this can't be annotated with `?` because it 
has type `Result<_, anyhow::Error>`
    |
note: `StoryWeaverError` needs to implement `From<anyhow::Error>`
   --> src\error.rs:11:1
    |
11  | pub enum StoryWeaverError {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a 
conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              `StoryWeaverError` implements `From<&str>`
              `StoryWeaverError` implements `From<NaiveDateTime>`
              `StoryWeaverError` implements `From<i32>`
              `StoryWeaverError` implements `From<i64>`
              `StoryWeaverError` implements `From<reqwest::Error>`
              `StoryWeaverError` implements `From<serde_json::Error>`
              `StoryWeaverError` implements `From<sqlx::Error>`
              `StoryWeaverError` implements `From<std::io::Error>`
              `StoryWeaverError` implements `From<std::string::String>`

error[E0609]: no field `content` on type `std::string::String`
   --> src\commands\story_bible_ai.rs:112:39
    |
112 |             generated_content: result.content,
    |                                       ^^^^^^^ unknown field

error[E0609]: no field `tokens_used` on type `std::string::String`
   --> src\commands\story_bible_ai.rs:113:33
    |
113 |             tokens_used: result.tokens_used,
    |                                 ^^^^^^^^^^^ unknown field

error[E0609]: no field `cost_estimate` on type `std::string::String`
   --> src\commands\story_bible_ai.rs:114:35
    |
114 |             cost_estimate: result.cost_estimate,
    |                                   ^^^^^^^^^^^^^ unknown field

error[E0609]: no field `provider` on type `std::string::String`
   --> src\commands\story_bible_ai.rs:115:30
    |
115 |             provider: result.provider,
    |                              ^^^^^^^^ unknown field

error[E0609]: no field `model` on type `std::string::String`
   --> src\commands\story_bible_ai.rs:116:27
    |
116 |             model: result.model,
    |                           ^^^^^ unknown field

error[E0599]: no method named `into_inner` found for struct 
`tauri::State<'_, Arc<AIProviderManager>>` in the current scope
   --> src\commands\story_bible_ai.rs:165:34
    |
165 |     generate(request, ai_manager.into_inner()).await.into()
    |                                  ^^^^^^^^^^ this is an associated 
function, not a method
    |
    = note: found the following associated functions; to be used as 
methods, functions must have a `self` parameter
    = note: the candidate is defined in an impl for the type `Arc<T, A>`
    = help: items from traits can only be used if the trait is 
implemented and in scope
    = note: the following traits define an item `into_inner`, perhaps you 
need to implement one of them:
            candidate #1: `std::sys_common::IntoInner`
            candidate #2: `windows_core::IUnknownImpl`
            candidate #3: `windows_core::unknown::IUnknownImpl`
help: use associated function syntax instead
    |
165 -     generate(request, ai_manager.into_inner()).await.into()
165 +     generate(request, 
Arc::<AIProviderManager>::into_inner(ai_manager)).await.into()
    |
help: there is a method `inner` with a similar name
    |
165 -     generate(request, ai_manager.into_inner()).await.into()
165 +     generate(request, ai_manager.inner()).await.into()
    |

error[E0599]: no function or associated item named `get_character` found 
for struct `operations::CharacterTraitOps` in the current scope
   --> src\commands\story_bible_ai.rs:133:44
    |
133 |         let character = CharacterTraitOps::get_character(&pool, 
&request.character_id).await?;
    |                                            ^^^^^^^^^^^^^ function 
or associated item not found in `CharacterTraitOps`
    |
   ::: src\database\operations\mod.rs:98:1
    |
98  | pub struct CharacterTraitOps;
    | ---------------------------- function or associated item 
`get_character` not found for this struct
    |
help: there is an associated function `get_by_character` with a similar 
name
    |
133 |         let character = CharacterTraitOps::get_by_character(&pool, 
&request.character_id).await?;
    |                                                +++

error[E0560]: struct `AIContext` has no field named `story_bible`
   --> src\commands\story_bible_ai.rs:139:13
    |
139 |             story_bible: Some(story_bible),
    |             ^^^^^^^^^^^ `AIContext` does not have this field
    |
    = note: available fields are: `document_id`, `preceding_text`, 
`following_text`, `selected_text`, `story_context` ... and 11 others

error[E0560]: struct `AIContext` has no field named `current_document`
   --> src\commands\story_bible_ai.rs:140:13
    |
140 |             current_document: None,
    |             ^^^^^^^^^^^^^^^^ `AIContext` does not have this field
    |
    = note: available fields are: `document_id`, `preceding_text`, 
`following_text`, `selected_text`, `story_context` ... and 11 others

error[E0308]: mismatched types
   --> src\commands\story_bible_ai.rs:141:31
    |
141 |             user_preferences: HashMap::new(),
    |                               ^^^^^^^^^^^^^^ expected 
`Option<HashMap<String, String>>`, found `HashMap<_, _>`
    |
    = note: expected enum 
`std::option::Option<HashMap<std::string::String, std::string::String>>`
             found struct `HashMap<_, _>`
help: try wrapping the expression in `Some`
    |
141 |             user_preferences: Some(HashMap::new()),
    |                               +++++              +

error[E0560]: struct `AIContext` has no field named `writing_feature`
   --> src\commands\story_bible_ai.rs:142:13
    |
142 |             writing_feature: WritingFeature::CharacterDevelopment,
    |             ^^^^^^^^^^^^^^^ unknown field
    |
help: a field with a similar name exists
    |
142 -             writing_feature: WritingFeature::CharacterDevelopment,
142 +             writing_style: WritingFeature::CharacterDevelopment,
    |

error[E0599]: no variant or associated item named `CharacterDevelopment` 
found for enum `WritingFeature` in the current scope
   --> src\commands\story_bible_ai.rs:142:46
    |
142 |             writing_feature: WritingFeature::CharacterDevelopment,
    |                                              ^^^^^^^^^^^^^^^^^^^^ 
variant or associated item not found in `WritingFeature`
    |
   ::: src\ai\mod.rs:122:1
    |
122 | pub enum WritingFeature {
    | ----------------------- variant or associated item 
`CharacterDevelopment` not found for this enum

error[E0308]: mismatched types
   --> src\commands\story_bible_ai.rs:146:58
    |
146 |         let result = ai_manager.generate_text(&context, 
&format!("Generate character traits for {}", 
request.character_name)).await?;
    |                                                          
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 
expected `AIContext`, found `String`
    |
    = note: this error originates in the macro `format` (in Nightly 
builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
   --> src\commands\story_bible_ai.rs:146:47
    |
146 |         let result = ai_manager.generate_text(&context, 
&format!("Generate character traits for {}", 
request.character_name)).await?;
    |                                 ------------- ^^^^^^^^ expected 
`&str`, found `&AIContext`
    |                                 |
    |                                 arguments to this method are 
incorrect
    |
    = note: expected reference `&str`
               found reference `&AIContext`
note: method defined here
   --> src\ai\mod.rs:137:14
    |
137 |     async fn generate_text(&self, prompt: &str, context: 
&AIContext) -> anyhow::Result<String>;
    |              ^^^^^^^^^^^^^        ------

error[E0277]: `?` couldn't convert the error to `StoryWeaverError`
   --> src\commands\story_bible_ai.rs:146:132
    |
146 |         let result = ai_manager.generate_text(&context, 
&format!("Generate character traits for {}", 
request.character_name)).await?;
    |                      -----------------------------------------------
---------------------------------------------------------------^ the 
trait `From<anyhow::Error>` is not implemented for `StoryWeaverError`
    |                      |
    |                      this can't be annotated with `?` because it 
has type `Result<_, anyhow::Error>`
    |
note: `StoryWeaverError` needs to implement `From<anyhow::Error>`
   --> src\error.rs:11:1
    |
11  | pub enum StoryWeaverError {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a 
conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              `StoryWeaverError` implements `From<&str>`
              `StoryWeaverError` implements `From<NaiveDateTime>`
              `StoryWeaverError` implements `From<i32>`
              `StoryWeaverError` implements `From<i64>`
              `StoryWeaverError` implements `From<reqwest::Error>`
              `StoryWeaverError` implements `From<serde_json::Error>`
              `StoryWeaverError` implements `From<sqlx::Error>`
              `StoryWeaverError` implements `From<std::io::Error>`
              `StoryWeaverError` implements `From<std::string::String>`

error[E0609]: no field `content` on type `std::string::String`
   --> src\commands\story_bible_ai.rs:149:29
    |
149 |         let traits = result.content
    |                             ^^^^^^^ unknown field

error[E0599]: no method named `into_inner` found for struct 
`tauri::State<'_, Arc<AIProviderManager>>` in the current scope
   --> src\commands\story_bible_ai.rs:202:34
    |
202 |     generate(request, ai_manager.into_inner()).await.into()
    |                                  ^^^^^^^^^^ this is an associated 
function, not a method
    |
    = note: found the following associated functions; to be used as 
methods, functions must have a `self` parameter
    = note: the candidate is defined in an impl for the type `Arc<T, A>`
    = help: items from traits can only be used if the trait is 
implemented and in scope
    = note: the following traits define an item `into_inner`, perhaps you 
need to implement one of them:
            candidate #1: `std::sys_common::IntoInner`
            candidate #2: `windows_core::IUnknownImpl`
            candidate #3: `windows_core::unknown::IUnknownImpl`
help: use associated function syntax instead
    |
202 -     generate(request, ai_manager.into_inner()).await.into()
202 +     generate(request, 
Arc::<AIProviderManager>::into_inner(ai_manager)).await.into()
    |
help: there is a method `inner` with a similar name
    |
202 -     generate(request, ai_manager.into_inner()).await.into()
202 +     generate(request, ai_manager.inner()).await.into()
    |

error[E0308]: mismatched types
   --> src\commands\story_bible_ai.rs:182:25
    |
182 |             project_id: request.project_id.clone(),
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected 
`Option<String>`, found `String`
    |
    = note: expected enum `std::option::Option<std::string::String>`
             found struct `std::string::String`
help: try wrapping the expression in `Some`
    |
182 |             project_id: Some(request.project_id.clone()),
    |                         +++++                          +

error[E0560]: struct `AIContext` has no field named `story_bible`
   --> src\commands\story_bible_ai.rs:183:13
    |
183 |             story_bible: Some(story_bible),
    |             ^^^^^^^^^^^ `AIContext` does not have this field
    |
    = note: available fields are: `document_id`, `preceding_text`, 
`following_text`, `selected_text`, `story_context` ... and 11 others

error[E0560]: struct `AIContext` has no field named `current_document`
   --> src\commands\story_bible_ai.rs:184:13
    |
184 |             current_document: None,
    |             ^^^^^^^^^^^^^^^^ `AIContext` does not have this field
    |
    = note: available fields are: `document_id`, `preceding_text`, 
`following_text`, `selected_text`, `story_context` ... and 11 others

error[E0308]: mismatched types
   --> src\commands\story_bible_ai.rs:185:31
    |
185 |             user_preferences: HashMap::new(),
    |                               ^^^^^^^^^^^^^^ expected 
`Option<HashMap<String, String>>`, found `HashMap<_, _>`
    |
    = note: expected enum 
`std::option::Option<HashMap<std::string::String, std::string::String>>`
             found struct `HashMap<_, _>`
help: try wrapping the expression in `Some`
    |
185 |             user_preferences: Some(HashMap::new()),
    |                               +++++              +

error[E0560]: struct `AIContext` has no field named `writing_feature`
   --> src\commands\story_bible_ai.rs:186:13
    |
186 |             writing_feature: WritingFeature::WorldBuilding,
    |             ^^^^^^^^^^^^^^^ unknown field
    |
help: a field with a similar name exists
    |
186 -             writing_feature: WritingFeature::WorldBuilding,
186 +             writing_style: WritingFeature::WorldBuilding,
    |

error[E0599]: no variant or associated item named `WorldBuilding` found 
for enum `WritingFeature` in the current scope
   --> src\commands\story_bible_ai.rs:186:46
    |
186 |             writing_feature: WritingFeature::WorldBuilding,
    |                                              ^^^^^^^^^^^^^ variant 
or associated item not found in `WritingFeature`
    |
   ::: src\ai\mod.rs:122:1
    |
122 | pub enum WritingFeature {
    | ----------------------- variant or associated item `WorldBuilding` 
not found for this enum

error[E0308]: arguments to this method are incorrect
   --> src\commands\story_bible_ai.rs:191:33
    |
191 |         let result = ai_manager.generate_text(&context, 
&prompt).await?;
    |                                 ^^^^^^^^^^^^^ --------  ------- 
expected `&AIContext`, found `&std::string::String`
    |                                               |
    |                                               expected `&str`, 
found `&AIContext`
    |
note: method defined here
   --> src\ai\mod.rs:137:14
    |
137 |     async fn generate_text(&self, prompt: &str, context: 
&AIContext) -> anyhow::Result<String>;
    |              ^^^^^^^^^^^^^
help: swap these arguments
    |
191 -         let result = ai_manager.generate_text(&context, 
&prompt).await?;
191 +         let result = ai_manager.generate_text(&prompt, 
&context).await?;
    |

error[E0277]: `?` couldn't convert the error to `StoryWeaverError`
   --> src\commands\story_bible_ai.rs:191:71
    |
191 |         let result = ai_manager.generate_text(&context, 
&prompt).await?;
    |                      
-------------------------------------------------^ the trait 
`From<anyhow::Error>` is not implemented for `StoryWeaverError`
    |                      |
    |                      this can't be annotated with `?` because it 
has type `Result<_, anyhow::Error>`
    |
note: `StoryWeaverError` needs to implement `From<anyhow::Error>`
   --> src\error.rs:11:1
    |
11  | pub enum StoryWeaverError {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a 
conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              `StoryWeaverError` implements `From<&str>`
              `StoryWeaverError` implements `From<NaiveDateTime>`
              `StoryWeaverError` implements `From<i32>`
              `StoryWeaverError` implements `From<i64>`
              `StoryWeaverError` implements `From<reqwest::Error>`
              `StoryWeaverError` implements `From<serde_json::Error>`
              `StoryWeaverError` implements `From<sqlx::Error>`
              `StoryWeaverError` implements `From<std::io::Error>`
              `StoryWeaverError` implements `From<std::string::String>`

error[E0609]: no field `content` on type `std::string::String`
   --> src\commands\story_bible_ai.rs:194:39
    |
194 |             generated_content: result.content,
    |                                       ^^^^^^^ unknown field

error[E0609]: no field `tokens_used` on type `std::string::String`
   --> src\commands\story_bible_ai.rs:195:33
    |
195 |             tokens_used: result.tokens_used,
    |                                 ^^^^^^^^^^^ unknown field

error[E0609]: no field `cost_estimate` on type `std::string::String`
   --> src\commands\story_bible_ai.rs:196:35
    |
196 |             cost_estimate: result.cost_estimate,
    |                                   ^^^^^^^^^^^^^ unknown field

error[E0609]: no field `provider` on type `std::string::String`
   --> src\commands\story_bible_ai.rs:197:30
    |
197 |             provider: result.provider,
    |                              ^^^^^^^^ unknown field

error[E0609]: no field `model` on type `std::string::String`
   --> src\commands\story_bible_ai.rs:198:27
    |
198 |             model: result.model,
    |                           ^^^^^ unknown field

error[E0599]: no method named `into_inner` found for struct 
`tauri::State<'_, Arc<AIProviderManager>>` in the current scope
   --> src\commands\story_bible_ai.rs:241:64
    |
241 |     generate(project_id, custom_prompt, creativity, 
ai_manager.into_inner()).await.into()
    |                                                                
^^^^^^^^^^ this is an associated function, not a method
    |
    = note: found the following associated functions; to be used as 
methods, functions must have a `self` parameter
    = note: the candidate is defined in an impl for the type `Arc<T, A>`
    = help: items from traits can only be used if the trait is 
implemented and in scope
    = note: the following traits define an item `into_inner`, perhaps you 
need to implement one of them:
            candidate #1: `std::sys_common::IntoInner`
            candidate #2: `windows_core::IUnknownImpl`
            candidate #3: `windows_core::unknown::IUnknownImpl`
help: use associated function syntax instead
    |
241 -     generate(project_id, custom_prompt, creativity, 
ai_manager.into_inner()).await.into()
241 +     generate(project_id, custom_prompt, creativity, 
Arc::<AIProviderManager>::into_inner(ai_manager)).await.into()
    |
help: there is a method `inner` with a similar name
    |
241 -     generate(project_id, custom_prompt, creativity, 
ai_manager.into_inner()).await.into()
241 +     generate(project_id, custom_prompt, creativity, 
ai_manager.inner()).await.into()
    |

error[E0308]: mismatched types
   --> src\commands\story_bible_ai.rs:221:25
    |
221 |             project_id: project_id.clone(),
    |                         ^^^^^^^^^^^^^^^^^^ expected 
`Option<String>`, found `String`
    |
    = note: expected enum `std::option::Option<std::string::String>`
             found struct `std::string::String`
help: try wrapping the expression in `Some`
    |
221 |             project_id: Some(project_id.clone()),
    |                         +++++                  +

error[E0560]: struct `AIContext` has no field named `story_bible`
   --> src\commands\story_bible_ai.rs:222:13
    |
222 |             story_bible: Some(story_bible),
    |             ^^^^^^^^^^^ `AIContext` does not have this field
    |
    = note: available fields are: `document_id`, `preceding_text`, 
`following_text`, `selected_text`, `story_context` ... and 11 others

error[E0560]: struct `AIContext` has no field named `current_document`
   --> src\commands\story_bible_ai.rs:223:13
    |
223 |             current_document: None,
    |             ^^^^^^^^^^^^^^^^ `AIContext` does not have this field
    |
    = note: available fields are: `document_id`, `preceding_text`, 
`following_text`, `selected_text`, `story_context` ... and 11 others

error[E0308]: mismatched types
   --> src\commands\story_bible_ai.rs:224:31
    |
224 |             user_preferences: HashMap::new(),
    |                               ^^^^^^^^^^^^^^ expected 
`Option<HashMap<String, String>>`, found `HashMap<_, _>`
    |
    = note: expected enum 
`std::option::Option<HashMap<std::string::String, std::string::String>>`
             found struct `HashMap<_, _>`
help: try wrapping the expression in `Some`
    |
224 |             user_preferences: Some(HashMap::new()),
    |                               +++++              +

error[E0560]: struct `AIContext` has no field named `writing_feature`
   --> src\commands\story_bible_ai.rs:225:13
    |
225 |             writing_feature: WritingFeature::OutlineGeneration,
    |             ^^^^^^^^^^^^^^^ unknown field
    |
help: a field with a similar name exists
    |
225 -             writing_feature: WritingFeature::OutlineGeneration,
225 +             writing_style: WritingFeature::OutlineGeneration,
    |

error[E0599]: no variant or associated item named `OutlineGeneration` 
found for enum `WritingFeature` in the current scope
   --> src\commands\story_bible_ai.rs:225:46
    |
225 |             writing_feature: WritingFeature::OutlineGeneration,
    |                                              ^^^^^^^^^^^^^^^^^ 
variant or associated item not found in `WritingFeature`
    |
   ::: src\ai\mod.rs:122:1
    |
122 | pub enum WritingFeature {
    | ----------------------- variant or associated item 
`OutlineGeneration` not found for this enum

error[E0308]: arguments to this method are incorrect
   --> src\commands\story_bible_ai.rs:230:33
    |
230 |         let result = ai_manager.generate_text(&context, 
&prompt).await?;
    |                                 ^^^^^^^^^^^^^ --------  ------- 
expected `&AIContext`, found `&std::string::String`
    |                                               |
    |                                               expected `&str`, 
found `&AIContext`
    |
note: method defined here
   --> src\ai\mod.rs:137:14
    |
137 |     async fn generate_text(&self, prompt: &str, context: 
&AIContext) -> anyhow::Result<String>;
    |              ^^^^^^^^^^^^^
help: swap these arguments
    |
230 -         let result = ai_manager.generate_text(&context, 
&prompt).await?;
230 +         let result = ai_manager.generate_text(&prompt, 
&context).await?;
    |

error[E0277]: `?` couldn't convert the error to `StoryWeaverError`
   --> src\commands\story_bible_ai.rs:230:71
    |
230 |         let result = ai_manager.generate_text(&context, 
&prompt).await?;
    |                      
-------------------------------------------------^ the trait 
`From<anyhow::Error>` is not implemented for `StoryWeaverError`
    |                      |
    |                      this can't be annotated with `?` because it 
has type `Result<_, anyhow::Error>`
    |
note: `StoryWeaverError` needs to implement `From<anyhow::Error>`
   --> src\error.rs:11:1
    |
11  | pub enum StoryWeaverError {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a 
conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              `StoryWeaverError` implements `From<&str>`
              `StoryWeaverError` implements `From<NaiveDateTime>`
              `StoryWeaverError` implements `From<i32>`
              `StoryWeaverError` implements `From<i64>`
              `StoryWeaverError` implements `From<reqwest::Error>`
              `StoryWeaverError` implements `From<serde_json::Error>`
              `StoryWeaverError` implements `From<sqlx::Error>`
              `StoryWeaverError` implements `From<std::io::Error>`
              `StoryWeaverError` implements `From<std::string::String>`

error[E0609]: no field `content` on type `std::string::String`
   --> src\commands\story_bible_ai.rs:233:39
    |
233 |             generated_content: result.content,
    |                                       ^^^^^^^ unknown field

error[E0609]: no field `tokens_used` on type `std::string::String`
   --> src\commands\story_bible_ai.rs:234:33
    |
234 |             tokens_used: result.tokens_used,
    |                                 ^^^^^^^^^^^ unknown field

error[E0609]: no field `cost_estimate` on type `std::string::String`
   --> src\commands\story_bible_ai.rs:235:35
    |
235 |             cost_estimate: result.cost_estimate,
    |                                   ^^^^^^^^^^^^^ unknown field

error[E0609]: no field `provider` on type `std::string::String`
   --> src\commands\story_bible_ai.rs:236:30
    |
236 |             provider: result.provider,
    |                              ^^^^^^^^ unknown field

error[E0609]: no field `model` on type `std::string::String`
   --> src\commands\story_bible_ai.rs:237:27
    |
237 |             model: result.model,
    |                           ^^^^^ unknown field

error[E0599]: no method named `into_inner` found for struct 
`tauri::State<'_, Arc<AIProviderManager>>` in the current scope
   --> src\commands\story_bible_ai.rs:290:92
    |
290 |     generate(outline_id, scene_title, scene_summary, custom_prompt, 
creativity, ai_manager.into_inner()).await.into()
    |                                                                     
                       ^^^^^^^^^^ this is an associated function, not a 
method
    |
    = note: found the following associated functions; to be used as 
methods, functions must have a `self` parameter
    = note: the candidate is defined in an impl for the type `Arc<T, A>`
    = help: items from traits can only be used if the trait is 
implemented and in scope
    = note: the following traits define an item `into_inner`, perhaps you 
need to implement one of them:
            candidate #1: `std::sys_common::IntoInner`
            candidate #2: `windows_core::IUnknownImpl`
            candidate #3: `windows_core::unknown::IUnknownImpl`
help: use associated function syntax instead
    |
290 -     generate(outline_id, scene_title, scene_summary, custom_prompt, 
creativity, ai_manager.into_inner()).await.into()
290 +     generate(outline_id, scene_title, scene_summary, custom_prompt, 
creativity, Arc::<AIProviderManager>::into_inner(ai_manager)).await.into()
    |
help: there is a method `inner` with a similar name
    |
290 -     generate(outline_id, scene_title, scene_summary, custom_prompt, 
creativity, ai_manager.into_inner()).await.into()
290 +     generate(outline_id, scene_title, scene_summary, custom_prompt, 
creativity, ai_manager.inner()).await.into()
    |

error[E0599]: no function or associated item named `get_outline` found 
for struct `StyleExampleOps` in the current scope
   --> src\commands\story_bible_ai.rs:265:40
    |
265 |         let outline = StyleExampleOps::get_outline(&pool, 
&outline_id).await?;
    |                                        ^^^^^^^^^^^ function or 
associated item not found in `StyleExampleOps`
    |
   ::: src\database\operations\mod.rs:104:1
    |
104 | pub struct StyleExampleOps;
    | -------------------------- function or associated item 
`get_outline` not found for this struct

error[E0560]: struct `AIContext` has no field named `story_bible`
   --> src\commands\story_bible_ai.rs:271:13
    |
271 |             story_bible: Some(story_bible),
    |             ^^^^^^^^^^^ `AIContext` does not have this field
    |
    = note: available fields are: `document_id`, `preceding_text`, 
`following_text`, `selected_text`, `story_context` ... and 11 others

error[E0560]: struct `AIContext` has no field named `current_document`
   --> src\commands\story_bible_ai.rs:272:13
    |
272 |             current_document: None,
    |             ^^^^^^^^^^^^^^^^ `AIContext` does not have this field
    |
    = note: available fields are: `document_id`, `preceding_text`, 
`following_text`, `selected_text`, `story_context` ... and 11 others

error[E0308]: mismatched types
   --> src\commands\story_bible_ai.rs:273:31
    |
273 |             user_preferences: HashMap::new(),
    |                               ^^^^^^^^^^^^^^ expected 
`Option<HashMap<String, String>>`, found `HashMap<_, _>`
    |
    = note: expected enum 
`std::option::Option<HashMap<std::string::String, std::string::String>>`
             found struct `HashMap<_, _>`
help: try wrapping the expression in `Some`
    |
273 |             user_preferences: Some(HashMap::new()),
    |                               +++++              +

error[E0560]: struct `AIContext` has no field named `writing_feature`
   --> src\commands\story_bible_ai.rs:274:13
    |
274 |             writing_feature: WritingFeature::SceneGeneration,
    |             ^^^^^^^^^^^^^^^ unknown field
    |
help: a field with a similar name exists
    |
274 -             writing_feature: WritingFeature::SceneGeneration,
274 +             writing_style: WritingFeature::SceneGeneration,
    |

error[E0599]: no variant or associated item named `SceneGeneration` found 
for enum `WritingFeature` in the current scope
   --> src\commands\story_bible_ai.rs:274:46
    |
274 |             writing_feature: WritingFeature::SceneGeneration,
    |                                              ^^^^^^^^^^^^^^^ 
variant or associated item not found in `WritingFeature`
    |
   ::: src\ai\mod.rs:122:1
    |
122 | pub enum WritingFeature {
    | ----------------------- variant or associated item 
`SceneGeneration` not found for this enum

error[E0308]: arguments to this method are incorrect
   --> src\commands\story_bible_ai.rs:279:33
    |
279 |         let result = ai_manager.generate_text(&context, 
&prompt).await?;
    |                                 ^^^^^^^^^^^^^ --------  ------- 
expected `&AIContext`, found `&std::string::String`
    |                                               |
    |                                               expected `&str`, 
found `&AIContext`
    |
note: method defined here
   --> src\ai\mod.rs:137:14
    |
137 |     async fn generate_text(&self, prompt: &str, context: 
&AIContext) -> anyhow::Result<String>;
    |              ^^^^^^^^^^^^^
help: swap these arguments
    |
279 -         let result = ai_manager.generate_text(&context, 
&prompt).await?;
279 +         let result = ai_manager.generate_text(&prompt, 
&context).await?;
    |

error[E0277]: `?` couldn't convert the error to `StoryWeaverError`
   --> src\commands\story_bible_ai.rs:279:71
    |
279 |         let result = ai_manager.generate_text(&context, 
&prompt).await?;
    |                      
-------------------------------------------------^ the trait 
`From<anyhow::Error>` is not implemented for `StoryWeaverError`
    |                      |
    |                      this can't be annotated with `?` because it 
has type `Result<_, anyhow::Error>`
    |
note: `StoryWeaverError` needs to implement `From<anyhow::Error>`
   --> src\error.rs:11:1
    |
11  | pub enum StoryWeaverError {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a 
conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              `StoryWeaverError` implements `From<&str>`
              `StoryWeaverError` implements `From<NaiveDateTime>`
              `StoryWeaverError` implements `From<i32>`
              `StoryWeaverError` implements `From<i64>`
              `StoryWeaverError` implements `From<reqwest::Error>`
              `StoryWeaverError` implements `From<serde_json::Error>`
              `StoryWeaverError` implements `From<sqlx::Error>`
              `StoryWeaverError` implements `From<std::io::Error>`
              `StoryWeaverError` implements `From<std::string::String>`

error[E0609]: no field `content` on type `std::string::String`
   --> src\commands\story_bible_ai.rs:282:39
    |
282 |             generated_content: result.content,
    |                                       ^^^^^^^ unknown field

error[E0609]: no field `tokens_used` on type `std::string::String`
   --> src\commands\story_bible_ai.rs:283:33
    |
283 |             tokens_used: result.tokens_used,
    |                                 ^^^^^^^^^^^ unknown field

error[E0609]: no field `cost_estimate` on type `std::string::String`
   --> src\commands\story_bible_ai.rs:284:35
    |
284 |             cost_estimate: result.cost_estimate,
    |                                   ^^^^^^^^^^^^^ unknown field

error[E0609]: no field `provider` on type `std::string::String`
   --> src\commands\story_bible_ai.rs:285:30
    |
285 |             provider: result.provider,
    |                              ^^^^^^^^ unknown field

error[E0609]: no field `model` on type `std::string::String`
   --> src\commands\story_bible_ai.rs:286:27
    |
286 |             model: result.model,
    |                           ^^^^^ unknown field

error[E0599]: no method named `into_inner` found for struct 
`tauri::State<'_, Arc<AIProviderManager>>` in the current scope
   --> src\commands\story_bible_ai.rs:328:33
    |
328 |     analyze(request, ai_manager.into_inner()).await.into()
    |                                 ^^^^^^^^^^ this is an associated 
function, not a method
    |
    = note: found the following associated functions; to be used as 
methods, functions must have a `self` parameter
    = note: the candidate is defined in an impl for the type `Arc<T, A>`
    = help: items from traits can only be used if the trait is 
implemented and in scope
    = note: the following traits define an item `into_inner`, perhaps you 
need to implement one of them:
            candidate #1: `std::sys_common::IntoInner`
            candidate #2: `windows_core::IUnknownImpl`
            candidate #3: `windows_core::unknown::IUnknownImpl`
help: use associated function syntax instead
    |
328 -     analyze(request, ai_manager.into_inner()).await.into()
328 +     analyze(request, 
Arc::<AIProviderManager>::into_inner(ai_manager)).await.into()
    |
help: there is a method `inner` with a similar name
    |
328 -     analyze(request, ai_manager.into_inner()).await.into()
328 +     analyze(request, ai_manager.inner()).await.into()
    |

error[E0308]: mismatched types
   --> src\commands\story_bible_ai.rs:307:25
    |
307 |             project_id: request.project_id.clone(),
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected 
`Option<String>`, found `String`
    |
    = note: expected enum `std::option::Option<std::string::String>`
             found struct `std::string::String`
help: try wrapping the expression in `Some`
    |
307 |             project_id: Some(request.project_id.clone()),
    |                         +++++                          +

error[E0560]: struct `AIContext` has no field named `story_bible`
   --> src\commands\story_bible_ai.rs:308:13
    |
308 |             story_bible: Some(story_bible),
    |             ^^^^^^^^^^^ `AIContext` does not have this field
    |
    = note: available fields are: `document_id`, `preceding_text`, 
`following_text`, `selected_text`, `story_context` ... and 11 others

error[E0560]: struct `AIContext` has no field named `current_document`
   --> src\commands\story_bible_ai.rs:309:13
    |
309 |             current_document: None,
    |             ^^^^^^^^^^^^^^^^ `AIContext` does not have this field
    |
    = note: available fields are: `document_id`, `preceding_text`, 
`following_text`, `selected_text`, `story_context` ... and 11 others

error[E0308]: mismatched types
   --> src\commands\story_bible_ai.rs:310:31
    |
310 |             user_preferences: HashMap::new(),
    |                               ^^^^^^^^^^^^^^ expected 
`Option<HashMap<String, String>>`, found `HashMap<_, _>`
    |
    = note: expected enum 
`std::option::Option<HashMap<std::string::String, std::string::String>>`
             found struct `HashMap<_, _>`
help: try wrapping the expression in `Some`
    |
310 |             user_preferences: Some(HashMap::new()),
    |                               +++++              +

error[E0560]: struct `AIContext` has no field named `writing_feature`
   --> src\commands\story_bible_ai.rs:311:13
    |
311 |             writing_feature: WritingFeature::StyleAnalysis,
    |             ^^^^^^^^^^^^^^^ unknown field
    |
help: a field with a similar name exists
    |
311 -             writing_feature: WritingFeature::StyleAnalysis,
311 +             writing_style: WritingFeature::StyleAnalysis,
    |

error[E0599]: no variant or associated item named `StyleAnalysis` found 
for enum `WritingFeature` in the current scope
   --> src\commands\story_bible_ai.rs:311:46
    |
311 |             writing_feature: WritingFeature::StyleAnalysis,
    |                                              ^^^^^^^^^^^^^ variant 
or associated item not found in `WritingFeature`
    |
   ::: src\ai\mod.rs:122:1
    |
122 | pub enum WritingFeature {
    | ----------------------- variant or associated item `StyleAnalysis` 
not found for this enum

error[E0308]: mismatched types
   --> src\commands\story_bible_ai.rs:316:47
    |
316 |         let result = ai_manager.generate_text(&context, 
&prompt).await?;
    |                                 ------------- ^^^^^^^^ expected 
`&str`, found `&AIContext`
    |                                 |
    |                                 arguments to this method are 
incorrect
    |
    = note: expected reference `&str`
               found reference `&AIContext`
note: method defined here
   --> src\ai\mod.rs:137:14
    |
137 |     async fn generate_text(&self, prompt: &str, context: 
&AIContext) -> anyhow::Result<String>;
    |              ^^^^^^^^^^^^^        ------

error[E0277]: `?` couldn't convert the error to `StoryWeaverError`
   --> src\commands\story_bible_ai.rs:316:71
    |
316 |         let result = ai_manager.generate_text(&context, 
&prompt).await?;
    |                      
-------------------------------------------------^ the trait 
`From<anyhow::Error>` is not implemented for `StoryWeaverError`
    |                      |
    |                      this can't be annotated with `?` because it 
has type `Result<_, anyhow::Error>`
    |
note: `StoryWeaverError` needs to implement `From<anyhow::Error>`
   --> src\error.rs:11:1
    |
11  | pub enum StoryWeaverError {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a 
conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              `StoryWeaverError` implements `From<&str>`
              `StoryWeaverError` implements `From<NaiveDateTime>`
              `StoryWeaverError` implements `From<i32>`
              `StoryWeaverError` implements `From<i64>`
              `StoryWeaverError` implements `From<reqwest::Error>`
              `StoryWeaverError` implements `From<serde_json::Error>`
              `StoryWeaverError` implements `From<sqlx::Error>`
              `StoryWeaverError` implements `From<std::io::Error>`
              `StoryWeaverError` implements `From<std::string::String>`

error[E0609]: no field `content` on type `std::string::String`
   --> src\commands\story_bible_ai.rs:319:37
    |
319 |             analysis_result: result.content.clone(),
    |                                     ^^^^^^^ unknown field

error[E0609]: no field `content` on type `std::string::String`
   --> src\commands\story_bible_ai.rs:320:44
    |
320 |             generated_style_prompt: result.content,
    |                                            ^^^^^^^ unknown field

error[E0609]: no field `tokens_used` on type `std::string::String`
   --> src\commands\story_bible_ai.rs:321:33
    |
321 |             tokens_used: result.tokens_used,
    |                                 ^^^^^^^^^^^ unknown field

error[E0609]: no field `cost_estimate` on type `std::string::String`
   --> src\commands\story_bible_ai.rs:322:35
    |
322 |             cost_estimate: result.cost_estimate,
    |                                   ^^^^^^^^^^^^^ unknown field

error[E0609]: no field `provider` on type `std::string::String`
   --> src\commands\story_bible_ai.rs:323:30
    |
323 |             provider: result.provider,
    |                              ^^^^^^^^ unknown field

error[E0609]: no field `model` on type `std::string::String`
   --> src\commands\story_bible_ai.rs:324:27
    |
324 |             model: result.model,
    |                           ^^^^^ unknown field

error[E0599]: no method named `into_inner` found for struct 
`tauri::State<'_, Arc<AIProviderManager>>` in the current scope
   --> src\commands\story_bible_ai.rs:365:34
    |
365 |     generate(request, ai_manager.into_inner()).await.into()
    |                                  ^^^^^^^^^^ this is an associated 
function, not a method
    |
    = note: found the following associated functions; to be used as 
methods, functions must have a `self` parameter
    = note: the candidate is defined in an impl for the type `Arc<T, A>`
    = help: items from traits can only be used if the trait is 
implemented and in scope
    = note: the following traits define an item `into_inner`, perhaps you 
need to implement one of them:
            candidate #1: `std::sys_common::IntoInner`
            candidate #2: `windows_core::IUnknownImpl`
            candidate #3: `windows_core::unknown::IUnknownImpl`
help: use associated function syntax instead
    |
365 -     generate(request, ai_manager.into_inner()).await.into()
365 +     generate(request, 
Arc::<AIProviderManager>::into_inner(ai_manager)).await.into()
    |
help: there is a method `inner` with a similar name
    |
365 -     generate(request, ai_manager.into_inner()).await.into()
365 +     generate(request, ai_manager.inner()).await.into()
    |

error[E0308]: mismatched types
   --> src\commands\story_bible_ai.rs:345:25
    |
345 |             project_id: request.project_id.clone(),
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected 
`Option<String>`, found `String`
    |
    = note: expected enum `std::option::Option<std::string::String>`
             found struct `std::string::String`
help: try wrapping the expression in `Some`
    |
345 |             project_id: Some(request.project_id.clone()),
    |                         +++++                          +

error[E0560]: struct `AIContext` has no field named `story_bible`
   --> src\commands\story_bible_ai.rs:346:13
    |
346 |             story_bible: Some(story_bible),
    |             ^^^^^^^^^^^ `AIContext` does not have this field
    |
    = note: available fields are: `document_id`, `preceding_text`, 
`following_text`, `selected_text`, `story_context` ... and 11 others

error[E0560]: struct `AIContext` has no field named `current_document`
   --> src\commands\story_bible_ai.rs:347:13
    |
347 |             current_document: None,
    |             ^^^^^^^^^^^^^^^^ `AIContext` does not have this field
    |
    = note: available fields are: `document_id`, `preceding_text`, 
`following_text`, `selected_text`, `story_context` ... and 11 others

error[E0308]: mismatched types
   --> src\commands\story_bible_ai.rs:348:31
    |
348 |             user_preferences: HashMap::new(),
    |                               ^^^^^^^^^^^^^^ expected 
`Option<HashMap<String, String>>`, found `HashMap<_, _>`
    |
    = note: expected enum 
`std::option::Option<HashMap<std::string::String, std::string::String>>`
             found struct `HashMap<_, _>`
help: try wrapping the expression in `Some`
    |
348 |             user_preferences: Some(HashMap::new()),
    |                               +++++              +

error[E0560]: struct `AIContext` has no field named `writing_feature`
   --> src\commands\story_bible_ai.rs:349:13
    |
349 |             writing_feature: WritingFeature::OutlineGeneration,
    |             ^^^^^^^^^^^^^^^ unknown field
    |
help: a field with a similar name exists
    |
349 -             writing_feature: WritingFeature::OutlineGeneration,
349 +             writing_style: WritingFeature::OutlineGeneration,
    |

error[E0599]: no variant or associated item named `OutlineGeneration` 
found for enum `WritingFeature` in the current scope
   --> src\commands\story_bible_ai.rs:349:46
    |
349 |             writing_feature: WritingFeature::OutlineGeneration,
    |                                              ^^^^^^^^^^^^^^^^^ 
variant or associated item not found in `WritingFeature`
    |
   ::: src\ai\mod.rs:122:1
    |
122 | pub enum WritingFeature {
    | ----------------------- variant or associated item 
`OutlineGeneration` not found for this enum

error[E0308]: mismatched types
   --> src\commands\story_bible_ai.rs:354:47
    |
354 |         let result = ai_manager.generate_text(&context, 
&prompt).await?;
    |                                 ------------- ^^^^^^^^ expected 
`&str`, found `&AIContext`
    |                                 |
    |                                 arguments to this method are 
incorrect
    |
    = note: expected reference `&str`
               found reference `&AIContext`
note: method defined here
   --> src\ai\mod.rs:137:14
    |
137 |     async fn generate_text(&self, prompt: &str, context: 
&AIContext) -> anyhow::Result<String>;
    |              ^^^^^^^^^^^^^        ------

error[E0277]: `?` couldn't convert the error to `StoryWeaverError`
   --> src\commands\story_bible_ai.rs:354:71
    |
354 |         let result = ai_manager.generate_text(&context, 
&prompt).await?;
    |                      
-------------------------------------------------^ the trait 
`From<anyhow::Error>` is not implemented for `StoryWeaverError`
    |                      |
    |                      this can't be annotated with `?` because it 
has type `Result<_, anyhow::Error>`
    |
note: `StoryWeaverError` needs to implement `From<anyhow::Error>`
   --> src\error.rs:11:1
    |
11  | pub enum StoryWeaverError {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a 
conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              `StoryWeaverError` implements `From<&str>`
              `StoryWeaverError` implements `From<NaiveDateTime>`
              `StoryWeaverError` implements `From<i32>`
              `StoryWeaverError` implements `From<i64>`
              `StoryWeaverError` implements `From<reqwest::Error>`
              `StoryWeaverError` implements `From<serde_json::Error>`
              `StoryWeaverError` implements `From<sqlx::Error>`
              `StoryWeaverError` implements `From<std::io::Error>`
              `StoryWeaverError` implements `From<std::string::String>`

error[E0609]: no field `content` on type `std::string::String`
   --> src\commands\story_bible_ai.rs:357:39
    |
357 |             generated_content: result.content,
    |                                       ^^^^^^^ unknown field

error[E0609]: no field `tokens_used` on type `std::string::String`
   --> src\commands\story_bible_ai.rs:358:33
    |
358 |             tokens_used: result.tokens_used,
    |                                 ^^^^^^^^^^^ unknown field

error[E0609]: no field `cost_estimate` on type `std::string::String`
   --> src\commands\story_bible_ai.rs:359:35
    |
359 |             cost_estimate: result.cost_estimate,
    |                                   ^^^^^^^^^^^^^ unknown field

error[E0609]: no field `provider` on type `std::string::String`
   --> src\commands\story_bible_ai.rs:360:30
    |
360 |             provider: result.provider,
    |                              ^^^^^^^^ unknown field

error[E0609]: no field `model` on type `std::string::String`
   --> src\commands\story_bible_ai.rs:361:27
    |
361 |             model: result.model,
    |                           ^^^^^ unknown field

warning: unused variable: `settings`
  --> src\commands\ai_writing.rs:64:85
   |
64 | ...2, cursor_position: usize, settings: WriteSettings) -> 
crate::error::Result<TextStream> {
   |                               ^^^^^^^^ help: if this is intentional, 
prefix it with an underscore: `_settings`

warning: unused variable: `settings`
  --> src\commands\ai_writing.rs:81:82
   |
81 | ...d: i32, user_prompt: &str, settings: WriteSettings) -> 
crate::error::Result<TextStream> {
   |                               ^^^^^^^^ help: if this is intentional, 
prefix it with an underscore: `_settings`

warning: unused variable: `settings`
  --> src\commands\ai_writing.rs:98:78
   |
98 | ...2, cursor_position: usize, settings: WriteSettings) -> 
crate::error::Result<WriteResult> { // Changed return type to Result
   |                               ^^^^^^^^ help: if this is intentional, 
prefix it with an underscore: `_settings`

warning: unused variable: `settings`
   --> src\commands\ai_writing.rs:119:75
    |
119 | ...d: i32, user_prompt: &str, settings: WriteSettings) -> 
crate::error::Result<WriteResult> { // Changed return type to Result
    |                               ^^^^^^^^ help: if this is 
intentional, prefix it with an underscore: `_settings`

warning: variable does not need to be mutable
   --> src\commands\ai_writing.rs:208:16
    |
208 |             Ok(mut stream) => {
    |                ----^^^^^^
    |                |
    |                help: remove this `mut`

warning: variable does not need to be mutable
   --> src\commands\ai_writing.rs:266:16
    |
266 |             Ok(mut stream) => {
    |                ----^^^^^^
    |                |
    |                help: remove this `mut`

error[E0599]: no variant or associated item named `ai` found for enum 
`StoryWeaverError` in the current scope
   --> src\commands\ai_writing.rs:351:90
    |
351 |             provider.rewrite_text(&text, 
&rewrite_style).await.map_err(StoryWeaverError::ai)
    |                                                                     
                     ^^ variant or associated item not found in 
`StoryWeaverError`
    |
   ::: src\error.rs:11:1
    |
11  | pub enum StoryWeaverError {
    | ------------------------- variant or associated item `ai` not found 
for this enum

error[E0599]: no variant or associated item named `ai` found for enum 
`StoryWeaverError` in the current scope
   --> src\commands\ai_writing.rs:353:39
    |
353 |         None => Err(StoryWeaverError::ai("No AI provider 
available")),
    |                                       ^^ variant or associated item 
not found in `StoryWeaverError`
    |
   ::: src\error.rs:11:1
    |
11  | pub enum StoryWeaverError {
    | ------------------------- variant or associated item `ai` not found 
for this enum
    |
note: if you're trying to build a new `StoryWeaverError` consider using 
one of the following associated functions:
      StoryWeaverError::database
      StoryWeaverError::file_operation
      StoryWeaverError::ai_provider
      StoryWeaverError::internal
      and 4 others
   --> src\error.rs:211:5
    |
211 |     pub fn database<S: Into<String>>(message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
218 |     pub fn file_operation<S: Into<String>>(operation: S, path: S, 
message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
^^^^^^^^^^^^^^^^^
...
227 |     pub fn ai_provider<S: Into<String>>(provider: S, message: S) -> 
Self {
    |     
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
235 |     pub fn internal<S: Into<String>>(message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `ai` found for enum 
`StoryWeaverError` in the current scope
   --> src\commands\ai_writing.rs:375:83
    |
375 |             provider.expand_text(&text, 
&context).await.map_err(StoryWeaverError::ai)
    |                                                                     
              ^^ variant or associated item not found in 
`StoryWeaverError`
    |
   ::: src\error.rs:11:1
    |
11  | pub enum StoryWeaverError {
    | ------------------------- variant or associated item `ai` not found 
for this enum

error[E0599]: no variant or associated item named `ai` found for enum 
`StoryWeaverError` in the current scope
   --> src\commands\ai_writing.rs:377:39
    |
377 |         None => Err(StoryWeaverError::ai("No AI provider 
available")),
    |                                       ^^ variant or associated item 
not found in `StoryWeaverError`
    |
   ::: src\error.rs:11:1
    |
11  | pub enum StoryWeaverError {
    | ------------------------- variant or associated item `ai` not found 
for this enum
    |
note: if you're trying to build a new `StoryWeaverError` consider using 
one of the following associated functions:
      StoryWeaverError::database
      StoryWeaverError::file_operation
      StoryWeaverError::ai_provider
      StoryWeaverError::internal
      and 4 others
   --> src\error.rs:211:5
    |
211 |     pub fn database<S: Into<String>>(message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
218 |     pub fn file_operation<S: Into<String>>(operation: S, path: S, 
message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
^^^^^^^^^^^^^^^^^
...
227 |     pub fn ai_provider<S: Into<String>>(provider: S, message: S) -> 
Self {
    |     
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
235 |     pub fn internal<S: Into<String>>(message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `ai` found for enum 
`StoryWeaverError` in the current scope
   --> src\commands\ai_writing.rs:399:86
    |
399 |             provider.describe_scene(&text, 
&context).await.map_err(StoryWeaverError::ai)
    |                                                                     
                 ^^ variant or associated item not found in 
`StoryWeaverError`
    |
   ::: src\error.rs:11:1
    |
11  | pub enum StoryWeaverError {
    | ------------------------- variant or associated item `ai` not found 
for this enum

error[E0599]: no variant or associated item named `ai` found for enum 
`StoryWeaverError` in the current scope
   --> src\commands\ai_writing.rs:401:39
    |
401 |         None => Err(StoryWeaverError::ai("No AI provider 
available")),
    |                                       ^^ variant or associated item 
not found in `StoryWeaverError`
    |
   ::: src\error.rs:11:1
    |
11  | pub enum StoryWeaverError {
    | ------------------------- variant or associated item `ai` not found 
for this enum
    |
note: if you're trying to build a new `StoryWeaverError` consider using 
one of the following associated functions:
      StoryWeaverError::database
      StoryWeaverError::file_operation
      StoryWeaverError::ai_provider
      StoryWeaverError::internal
      and 4 others
   --> src\error.rs:211:5
    |
211 |     pub fn database<S: Into<String>>(message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
218 |     pub fn file_operation<S: Into<String>>(operation: S, path: S, 
message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
^^^^^^^^^^^^^^^^^
...
227 |     pub fn ai_provider<S: Into<String>>(provider: S, message: S) -> 
Self {
    |     
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
235 |     pub fn internal<S: Into<String>>(message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `ai` found for enum 
`StoryWeaverError` in the current scope
   --> src\commands\ai_writing.rs:422:84
    |
422 |             provider.brainstorm(&prompt, 
&context).await.map_err(StoryWeaverError::ai)
    |                                                                     
               ^^ variant or associated item not found in 
`StoryWeaverError`
    |
   ::: src\error.rs:11:1
    |
11  | pub enum StoryWeaverError {
    | ------------------------- variant or associated item `ai` not found 
for this enum

error[E0599]: no variant or associated item named `ai` found for enum 
`StoryWeaverError` in the current scope
   --> src\commands\ai_writing.rs:424:39
    |
424 |         None => Err(StoryWeaverError::ai("No AI provider 
available")),
    |                                       ^^ variant or associated item 
not found in `StoryWeaverError`
    |
   ::: src\error.rs:11:1
    |
11  | pub enum StoryWeaverError {
    | ------------------------- variant or associated item `ai` not found 
for this enum
    |
note: if you're trying to build a new `StoryWeaverError` consider using 
one of the following associated functions:
      StoryWeaverError::database
      StoryWeaverError::file_operation
      StoryWeaverError::ai_provider
      StoryWeaverError::internal
      and 4 others
   --> src\error.rs:211:5
    |
211 |     pub fn database<S: Into<String>>(message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
218 |     pub fn file_operation<S: Into<String>>(operation: S, path: S, 
message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
^^^^^^^^^^^^^^^^^
...
227 |     pub fn ai_provider<S: Into<String>>(provider: S, message: S) -> 
Self {
    |     
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
235 |     pub fn internal<S: Into<String>>(message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `ai` found for enum 
`StoryWeaverError` in the current scope
   --> src\commands\ai_writing.rs:435:83
    |
435 |             
provider.generate_image(&description).await.map_err(StoryWeaverError::ai)
    |                                                                     
              ^^ variant or associated item not found in 
`StoryWeaverError`
    |
   ::: src\error.rs:11:1
    |
11  | pub enum StoryWeaverError {
    | ------------------------- variant or associated item `ai` not found 
for this enum

error[E0599]: no variant or associated item named `ai` found for enum 
`StoryWeaverError` in the current scope
   --> src\commands\ai_writing.rs:437:39
    |
437 |         None => Err(StoryWeaverError::ai("No AI provider 
available")),
    |                                       ^^ variant or associated item 
not found in `StoryWeaverError`
    |
   ::: src\error.rs:11:1
    |
11  | pub enum StoryWeaverError {
    | ------------------------- variant or associated item `ai` not found 
for this enum
    |
note: if you're trying to build a new `StoryWeaverError` consider using 
one of the following associated functions:
      StoryWeaverError::database
      StoryWeaverError::file_operation
      StoryWeaverError::ai_provider
      StoryWeaverError::internal
      and 4 others
   --> src\error.rs:211:5
    |
211 |     pub fn database<S: Into<String>>(message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
218 |     pub fn file_operation<S: Into<String>>(operation: S, path: S, 
message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
^^^^^^^^^^^^^^^^^
...
227 |     pub fn ai_provider<S: Into<String>>(provider: S, message: S) -> 
Self {
    |     
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
235 |     pub fn internal<S: Into<String>>(message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `ai` found for enum 
`StoryWeaverError` in the current scope
   --> src\commands\ai_writing.rs:449:86
    |
449 |             provider.quick_edit(&text, 
&instruction).await.map_err(StoryWeaverError::ai)
    |                                                                     
                 ^^ variant or associated item not found in 
`StoryWeaverError`
    |
   ::: src\error.rs:11:1
    |
11  | pub enum StoryWeaverError {
    | ------------------------- variant or associated item `ai` not found 
for this enum

error[E0599]: no variant or associated item named `ai` found for enum 
`StoryWeaverError` in the current scope
   --> src\commands\ai_writing.rs:451:39
    |
451 |         None => Err(StoryWeaverError::ai("No AI provider 
available")),
    |                                       ^^ variant or associated item 
not found in `StoryWeaverError`
    |
   ::: src\error.rs:11:1
    |
11  | pub enum StoryWeaverError {
    | ------------------------- variant or associated item `ai` not found 
for this enum
    |
note: if you're trying to build a new `StoryWeaverError` consider using 
one of the following associated functions:
      StoryWeaverError::database
      StoryWeaverError::file_operation
      StoryWeaverError::ai_provider
      StoryWeaverError::internal
      and 4 others
   --> src\error.rs:211:5
    |
211 |     pub fn database<S: Into<String>>(message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
218 |     pub fn file_operation<S: Into<String>>(operation: S, path: S, 
message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
^^^^^^^^^^^^^^^^^
...
227 |     pub fn ai_provider<S: Into<String>>(provider: S, message: S) -> 
Self {
    |     
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
235 |     pub fn internal<S: Into<String>>(message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `ai` found for enum 
`StoryWeaverError` in the current scope
   --> src\commands\ai_writing.rs:468:88
    |
468 |             provider.quick_chat(&message, 
&ai_context).await.map_err(StoryWeaverError::ai)
    |                                                                     
                   ^^ variant or associated item not found in 
`StoryWeaverError`
    |
   ::: src\error.rs:11:1
    |
11  | pub enum StoryWeaverError {
    | ------------------------- variant or associated item `ai` not found 
for this enum

error[E0599]: no variant or associated item named `ai` found for enum 
`StoryWeaverError` in the current scope
   --> src\commands\ai_writing.rs:470:39
    |
470 |         None => Err(StoryWeaverError::ai("No AI provider 
available")),
    |                                       ^^ variant or associated item 
not found in `StoryWeaverError`
    |
   ::: src\error.rs:11:1
    |
11  | pub enum StoryWeaverError {
    | ------------------------- variant or associated item `ai` not found 
for this enum
    |
note: if you're trying to build a new `StoryWeaverError` consider using 
one of the following associated functions:
      StoryWeaverError::database
      StoryWeaverError::file_operation
      StoryWeaverError::ai_provider
      StoryWeaverError::internal
      and 4 others
   --> src\error.rs:211:5
    |
211 |     pub fn database<S: Into<String>>(message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
218 |     pub fn file_operation<S: Into<String>>(operation: S, path: S, 
message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
^^^^^^^^^^^^^^^^^
...
227 |     pub fn ai_provider<S: Into<String>>(provider: S, message: S) -> 
Self {
    |     
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
235 |     pub fn internal<S: Into<String>>(message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `ai` found for enum 
`StoryWeaverError` in the current scope
   --> src\commands\ai_writing.rs:504:88
    |
504 |             provider.related_words(&word, 
&ai_context).await.map_err(StoryWeaverError::ai)
    |                                                                     
                   ^^ variant or associated item not found in 
`StoryWeaverError`
    |
   ::: src\error.rs:11:1
    |
11  | pub enum StoryWeaverError {
    | ------------------------- variant or associated item `ai` not found 
for this enum

error[E0599]: no variant or associated item named `ai` found for enum 
`StoryWeaverError` in the current scope
   --> src\commands\ai_writing.rs:506:39
    |
506 |         None => Err(StoryWeaverError::ai("No AI provider 
available")),
    |                                       ^^ variant or associated item 
not found in `StoryWeaverError`
    |
   ::: src\error.rs:11:1
    |
11  | pub enum StoryWeaverError {
    | ------------------------- variant or associated item `ai` not found 
for this enum
    |
note: if you're trying to build a new `StoryWeaverError` consider using 
one of the following associated functions:
      StoryWeaverError::database
      StoryWeaverError::file_operation
      StoryWeaverError::ai_provider
      StoryWeaverError::internal
      and 4 others
   --> src\error.rs:211:5
    |
211 |     pub fn database<S: Into<String>>(message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
218 |     pub fn file_operation<S: Into<String>>(operation: S, path: S, 
message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
^^^^^^^^^^^^^^^^^
...
227 |     pub fn ai_provider<S: Into<String>>(provider: S, message: S) -> 
Self {
    |     
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
235 |     pub fn internal<S: Into<String>>(message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0559]: variant `StoryWeaverError::NotFound` has no field named 
`resource`
  --> src\commands\ai_cards.rs:29:57
   |
29 |         card.ok_or_else(|| StoryWeaverError::NotFound { resource: 
"AI Response Card".to_string(), id })
   |                                                         ^^^^^^^^ 
`StoryWeaverError::NotFound` does not have this field
   |
   = note: available fields are: `resource_type`

error[E0599]: no function or associated item named `delete_version` found 
for struct `DocumentVersionOps` in the current scope
  --> src\commands\version_commands.rs:86:29
   |
86 |         DocumentVersionOps::delete_version(&pool, &version_id).await
   |                             ^^^^^^^^^^^^^^ function or associated 
item not found in `DocumentVersionOps`
   |
  ::: src\database\operations\mod.rs:86:1
   |
86 | pub struct DocumentVersionOps;
   | ----------------------------- function or associated item 
`delete_version` not found for this struct
   |
help: there is an associated function `delete_all_versions` with a 
similar name
   |
86 -         DocumentVersionOps::delete_version(&pool, &version_id).await
86 +         DocumentVersionOps::delete_all_versions(&pool, 
&version_id).await
   |

warning: unused variable: `app_handle`
  --> src\commands\sync_commands.rs:43:13
   |
43 |         let app_handle = window.app_handle();
   |             ^^^^^^^^^^ help: if this is intentional, prefix it with 
an underscore: `_app_handle`

error[E0599]: no variant or associated item named `Pending` found for 
enum `TaskStatus` in the current scope
   --> src\commands\background_commands.rs:116:38
    |
116 |             "pending" => TaskStatus::Pending,
    |                                      ^^^^^^^ variant or associated 
item not found in `TaskStatus`
    |
   ::: src\background\mod.rs:25:1
    |
25  | pub enum TaskStatus {
    | ------------------- variant or associated item `Pending` not found 
for this enum

error[E0308]: mismatched types
   --> src\commands\background_commands.rs:163:12
    |
163 |         Ok(cancelled)
    |         -- ^^^^^^^^^ expected `bool`, found `()`
    |         |
    |         arguments to this enum variant are incorrect
    |
help: the type constructed contains `()` due to the type of the argument 
passed
   --> src\commands\background_commands.rs:163:9
    |
163 |         Ok(cancelled)
    |         ^^^---------^
    |            |
    |            this argument influences the type of `Ok`
note: tuple variant defined here
   --> C:\Users\jjgor\.rustup\toolchains\stable-x86_64-pc-windows-msvc\lib
/rustlib/src/rust\library\core\src\result.rs:552:5
    |
552 |     Ok(#[stable(feature = "rust1", since = "1.0.0")] T),
    |     ^^

error[E0599]: `std::option::Option<std::string::String>` doesn't 
implement `std::fmt::Display`
    --> src\commands\project_preview_commands.rs:101:24
     |
101  |             id: row.id.to_string(),
     |                        ^^^^^^^^^ 
`std::option::Option<std::string::String>` cannot be formatted with the 
default formatter
     |
    ::: C:\Users\jjgor\.rustup\toolchains\stable-x86_64-pc-windows-msvc\li
b/rustlib/src/rust\library\core\src\option.rs:589:1
     |
589  | pub enum Option<T> {
     | ------------------ doesn't satisfy `_: Display` or 
`std::option::Option<std::string::String>: ToString`
     |
     = note: the following trait bounds were not satisfied:
             `std::option::Option<std::string::String>: std::fmt::Display`
             which is required by 
`std::option::Option<std::string::String>: ToString`
     = note: in format strings you may be able to use `{:?}` (or {:#?} 
for pretty-print) instead
note: the method `to_string` exists on the type `std::string::String`
    --> C:\Users\jjgor\.rustup\toolchains\stable-x86_64-pc-windows-msvc\li
b/rustlib/src/rust\library\alloc\src\string.rs:2764:5
     |
2764 |     fn to_string(&self) -> String;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider using `Option::expect` to unwrap the `std::string::String` 
value, panicking if the value is an `Option::None`
     |
101  |             id: row.id.expect("REASON").to_string(),
     |                       +++++++++++++++++

error[E0599]: no method named `unwrap_or` found for type `i64` in the 
current scope
   --> src\commands\project_preview_commands.rs:104:40
    |
104 |             word_count: row.word_count.unwrap_or(0) as i32,
    |                                        ^^^^^^^^^ method not found 
in `i64`

error[E0599]: `NaiveDateTime` is not an iterator
   --> src\commands\project_preview_commands.rs:105:40
    |
105 |             updated_at: row.updated_at.map(|dt| 
DateTime::<Utc>::from_naive_utc_and_offset(dt, Utc)).unwrap_or_else(|| 
Utc::now()),
    |                                        ^^^ `NaiveDateTime` is not 
an iterator
    |
   ::: C:\Users\jjgor\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f
\chrono-0.4.41\src\naive\datetime\mod.rs:76:1
    |
76  | pub struct NaiveDateTime {
    | ------------------------ doesn't satisfy `NaiveDateTime: Iterator`
    |
    = note: the following trait bounds were not satisfied:
            `NaiveDateTime: Iterator`
            which is required by `&mut NaiveDateTime: Iterator`

warning: unused variable: `project_id`
  --> src\commands\templates.rs:55:9
   |
55 |         project_id: String,
   |         ^^^^^^^^^^ help: if this is intentional, prefix it with an 
underscore: `_project_id`

warning: unused variable: `name`
  --> src\commands\templates.rs:56:9
   |
56 |         name: String,
   |         ^^^^ help: if this is intentional, prefix it with an 
underscore: `_name`

warning: unused variable: `description`
  --> src\commands\templates.rs:57:9
   |
57 |         description: Option<String>,
   |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an 
underscore: `_description`

error[E0107]: enum takes 2 generic arguments but 1 generic argument was 
supplied
   --> src\commands\advanced_ai_commands.rs:118:86
    |
118 |     async fn generate(request: ProseGenerationRequest, ai_state: 
AdvancedAIState) -> Result<AdvancedGenerationResult> {
    |                                                                     
                 ^^^^^^ ------------------------ supplied 1 generic 
argument
    |                                                                     
                 |
    |                                                                     
                 expected 2 generic arguments
    |
note: enum defined here, with 2 generic parameters: `T`, `E`
   --> C:\Users\jjgor\.rustup\toolchains\stable-x86_64-pc-windows-msvc\lib
/rustlib/src/rust\library\core\src\result.rs:548:10
    |
548 | pub enum Result<T, E> {
    |          ^^^^^^ -  -
help: add missing generic argument
    |
118 |     async fn generate(request: ProseGenerationRequest, ai_state: 
AdvancedAIState) -> Result<AdvancedGenerationResult, E> {
    |                                                                     
                                                +++

error[E0107]: enum takes 2 generic arguments but 1 generic argument was 
supplied
   --> src\commands\advanced_ai_commands.rs:149:86
    |
149 |     async fn generate(request: ImageGenerationRequest, ai_state: 
AdvancedAIState) -> Result<GeneratedImage> {
    |                                                                     
                 ^^^^^^ -------------- supplied 1 generic argument
    |                                                                     
                 |
    |                                                                     
                 expected 2 generic arguments
    |
note: enum defined here, with 2 generic parameters: `T`, `E`
   --> C:\Users\jjgor\.rustup\toolchains\stable-x86_64-pc-windows-msvc\lib
/rustlib/src/rust\library\core\src\result.rs:548:10
    |
548 | pub enum Result<T, E> {
    |          ^^^^^^ -  -
help: add missing generic argument
    |
149 |     async fn generate(request: ImageGenerationRequest, ai_state: 
AdvancedAIState) -> Result<GeneratedImage, E> {
    |                                                                     
                                      +++

error[E0107]: enum takes 2 generic arguments but 1 generic argument was 
supplied
   --> src\commands\advanced_ai_commands.rs:180:86
    |
180 |     async fn create(request: BrainstormSessionRequest, ai_state: 
AdvancedAIState) -> Result<String> {
    |                                                                     
                 ^^^^^^ ------ supplied 1 generic argument
    |                                                                     
                 |
    |                                                                     
                 expected 2 generic arguments
    |
note: enum defined here, with 2 generic parameters: `T`, `E`
   --> C:\Users\jjgor\.rustup\toolchains\stable-x86_64-pc-windows-msvc\lib
/rustlib/src/rust\library\core\src\result.rs:548:10
    |
548 | pub enum Result<T, E> {
    |          ^^^^^^ -  -
help: add missing generic argument
    |
180 |     async fn create(request: BrainstormSessionRequest, ai_state: 
AdvancedAIState) -> Result<String, E> {
    |                                                                     
                              +++

error[E0107]: enum takes 2 generic arguments but 1 generic argument was 
supplied
   --> src\commands\advanced_ai_commands.rs:207:68
    |
207 |     async fn get(session_id: String, ai_state: AdvancedAIState) -> 
Result<Option<BrainstormSession>> {
    |                                                                    
^^^^^^ ------------------------- supplied 1 generic argument
    |                                                                    |
    |                                                                    
expected 2 generic arguments
    |
note: enum defined here, with 2 generic parameters: `T`, `E`
   --> C:\Users\jjgor\.rustup\toolchains\stable-x86_64-pc-windows-msvc\lib
/rustlib/src/rust\library\core\src\result.rs:548:10
    |
548 | pub enum Result<T, E> {
    |          ^^^^^^ -  -
help: add missing generic argument
    |
207 |     async fn get(session_id: String, ai_state: AdvancedAIState) -> 
Result<Option<BrainstormSession>, E> {
    |                                                                     
                               +++

error[E0107]: enum takes 2 generic arguments but 1 generic argument was 
supplied
   --> src\commands\advanced_ai_commands.rs:223:99
    |
223 |     async fn rate(session_id: String, idea_id: String, rating: u32, 
ai_state: AdvancedAIState) -> Result<()> {
    |                                                                     
                              ^^^^^^ -- supplied 1 generic argument
    |                                                                     
                              |
    |                                                                     
                              expected 2 generic arguments
    |
note: enum defined here, with 2 generic parameters: `T`, `E`
   --> C:\Users\jjgor\.rustup\toolchains\stable-x86_64-pc-windows-msvc\lib
/rustlib/src/rust\library\core\src\result.rs:548:10
    |
548 | pub enum Result<T, E> {
    |          ^^^^^^ -  -
help: add missing generic argument
    |
223 |     async fn rate(session_id: String, idea_id: String, rating: u32, 
ai_state: AdvancedAIState) -> Result<(), E> {
    |                                                                     
                                       +++

error[E0107]: enum takes 2 generic arguments but 1 generic argument was 
supplied
   --> src\commands\advanced_ai_commands.rs:241:103
    |
241 |     async fn mark(session_id: String, idea_id: String, is_keeper: 
bool, ai_state: AdvancedAIState) -> Result<()> {
    |                                                                     
                                  ^^^^^^ -- supplied 1 generic argument
    |                                                                     
                                  |
    |                                                                     
                                  expected 2 generic arguments
    |
note: enum defined here, with 2 generic parameters: `T`, `E`
   --> C:\Users\jjgor\.rustup\toolchains\stable-x86_64-pc-windows-msvc\lib
/rustlib/src/rust\library\core\src\result.rs:548:10
    |
548 | pub enum Result<T, E> {
    |          ^^^^^^ -  -
help: add missing generic argument
    |
241 |     async fn mark(session_id: String, idea_id: String, is_keeper: 
bool, ai_state: AdvancedAIState) -> Result<(), E> {
    |                                                                     
                                           +++

error[E0107]: enum takes 2 generic arguments but 1 generic argument was 
supplied
   --> src\commands\advanced_ai_commands.rs:258:78
    |
258 |     async fn add(request: StyleExampleRequest, ai_state: 
AdvancedAIState) -> Result<StyleExample> {
    |                                                                     
         ^^^^^^ ------------ supplied 1 generic argument
    |                                                                     
         |
    |                                                                     
         expected 2 generic arguments
    |
note: enum defined here, with 2 generic parameters: `T`, `E`
   --> C:\Users\jjgor\.rustup\toolchains\stable-x86_64-pc-windows-msvc\lib
/rustlib/src/rust\library\core\src\result.rs:548:10
    |
548 | pub enum Result<T, E> {
    |          ^^^^^^ -  -
help: add missing generic argument
    |
258 |     async fn add(request: StyleExampleRequest, ai_state: 
AdvancedAIState) -> Result<StyleExample, E> {
    |                                                                     
                            +++

error[E0308]: mismatched types
   --> src\commands\advanced_ai_commands.rs:140:23
    |
140 |     generate(request, ai_state.into_inner()).await.into()
    |     --------          ^^^^^^^^^^^^^^^^^^^^^ expected 
`Mutex<AdvancedAIManager>`, found `AdvancedAIManager`
    |     |
    |     arguments to this function are incorrect
    |
    = note: expected struct 
`tauri::async_runtime::Mutex<AdvancedAIManager>`
               found struct `AdvancedAIManager`
note: function defined here
   --> src\commands\advanced_ai_commands.rs:118:14
    |
118 |     async fn generate(request: ProseGenerationRequest, ai_state: 
AdvancedAIState) -> Result<AdvancedGenerationResult> {
    |              ^^^^^^^^                                  
-------------------------
help: call `Into::into` on this expression to convert `AdvancedAIManager` 
into `tauri::async_runtime::Mutex<AdvancedAIManager>`
    |
140 |     generate(request, ai_state.into_inner().into()).await.into()
    |                                            +++++++

error[E0599]: no variant or associated item named `ai` found for enum 
`StoryWeaverError` in the current scope
   --> src\commands\advanced_ai_commands.rs:137:40
    |
137 |             .map_err(StoryWeaverError::ai)
    |                                        ^^ variant or associated 
item not found in `StoryWeaverError`
    |
   ::: src\error.rs:11:1
    |
11  | pub enum StoryWeaverError {
    | ------------------------- variant or associated item `ai` not found 
for this enum

error[E0308]: mismatched types
   --> src\commands\advanced_ai_commands.rs:171:23
    |
171 |     generate(request, ai_state.into_inner()).await.into()
    |     --------          ^^^^^^^^^^^^^^^^^^^^^ expected 
`Mutex<AdvancedAIManager>`, found `AdvancedAIManager`
    |     |
    |     arguments to this function are incorrect
    |
    = note: expected struct 
`tauri::async_runtime::Mutex<AdvancedAIManager>`
               found struct `AdvancedAIManager`
note: function defined here
   --> src\commands\advanced_ai_commands.rs:149:14
    |
149 |     async fn generate(request: ImageGenerationRequest, ai_state: 
AdvancedAIState) -> Result<GeneratedImage> {
    |              ^^^^^^^^                                  
-------------------------
help: call `Into::into` on this expression to convert `AdvancedAIManager` 
into `tauri::async_runtime::Mutex<AdvancedAIManager>`
    |
171 |     generate(request, ai_state.into_inner().into()).await.into()
    |                                            +++++++

error[E0599]: no variant or associated item named `ai` found for enum 
`StoryWeaverError` in the current scope
   --> src\commands\advanced_ai_commands.rs:168:40
    |
168 |             .map_err(StoryWeaverError::ai)
    |                                        ^^ variant or associated 
item not found in `StoryWeaverError`
    |
   ::: src\error.rs:11:1
    |
11  | pub enum StoryWeaverError {
    | ------------------------- variant or associated item `ai` not found 
for this enum

error[E0308]: mismatched types
   --> src\commands\advanced_ai_commands.rs:199:21
    |
199 |     create(request, ai_state.into_inner()).await.into()
    |     ------          ^^^^^^^^^^^^^^^^^^^^^ expected 
`Mutex<AdvancedAIManager>`, found `AdvancedAIManager`
    |     |
    |     arguments to this function are incorrect
    |
    = note: expected struct 
`tauri::async_runtime::Mutex<AdvancedAIManager>`
               found struct `AdvancedAIManager`
note: function defined here
   --> src\commands\advanced_ai_commands.rs:180:14
    |
180 |     async fn create(request: BrainstormSessionRequest, ai_state: 
AdvancedAIState) -> Result<String> {
    |              ^^^^^^                                    
-------------------------
help: call `Into::into` on this expression to convert `AdvancedAIManager` 
into `tauri::async_runtime::Mutex<AdvancedAIManager>`
    |
199 |     create(request, ai_state.into_inner().into()).await.into()
    |                                          +++++++

error[E0599]: no variant or associated item named `ai` found for enum 
`StoryWeaverError` in the current scope
   --> src\commands\advanced_ai_commands.rs:196:40
    |
196 |             .map_err(StoryWeaverError::ai)
    |                                        ^^ variant or associated 
item not found in `StoryWeaverError`
    |
   ::: src\error.rs:11:1
    |
11  | pub enum StoryWeaverError {
    | ------------------------- variant or associated item `ai` not found 
for this enum

error[E0308]: mismatched types
   --> src\commands\advanced_ai_commands.rs:213:21
    |
213 |     get(session_id, ai_state.into_inner()).await.into()
    |     ---             ^^^^^^^^^^^^^^^^^^^^^ expected 
`Mutex<AdvancedAIManager>`, found `AdvancedAIManager`
    |     |
    |     arguments to this function are incorrect
    |
    = note: expected struct 
`tauri::async_runtime::Mutex<AdvancedAIManager>`
               found struct `AdvancedAIManager`
note: function defined here
   --> src\commands\advanced_ai_commands.rs:207:14
    |
207 |     async fn get(session_id: String, ai_state: AdvancedAIState) -> 
Result<Option<BrainstormSession>> {
    |              ^^^                     -------------------------
help: call `Into::into` on this expression to convert `AdvancedAIManager` 
into `tauri::async_runtime::Mutex<AdvancedAIManager>`
    |
213 |     get(session_id, ai_state.into_inner().into()).await.into()
    |                                          +++++++

error[E0308]: mismatched types
   --> src\commands\advanced_ai_commands.rs:231:39
    |
231 |     rate(session_id, idea_id, rating, 
ai_state.into_inner()).await.into()
    |     ----                              ^^^^^^^^^^^^^^^^^^^^^ 
expected `Mutex<AdvancedAIManager>`, found `AdvancedAIManager`
    |     |
    |     arguments to this function are incorrect
    |
    = note: expected struct 
`tauri::async_runtime::Mutex<AdvancedAIManager>`
               found struct `AdvancedAIManager`
note: function defined here
   --> src\commands\advanced_ai_commands.rs:223:14
    |
223 |     async fn rate(session_id: String, idea_id: String, rating: u32, 
ai_state: AdvancedAIState) -> Result<()> {
    |              ^^^^                                                   
-------------------------
help: call `Into::into` on this expression to convert `AdvancedAIManager` 
into `tauri::async_runtime::Mutex<AdvancedAIManager>`
    |
231 |     rate(session_id, idea_id, rating, 
ai_state.into_inner().into()).await.into()
    |                                                            +++++++

error[E0308]: mismatched types
   --> src\commands\advanced_ai_commands.rs:249:42
    |
249 |     mark(session_id, idea_id, is_keeper, 
ai_state.into_inner()).await.into()
    |     ----                                 ^^^^^^^^^^^^^^^^^^^^^ 
expected `Mutex<AdvancedAIManager>`, found `AdvancedAIManager`
    |     |
    |     arguments to this function are incorrect
    |
    = note: expected struct 
`tauri::async_runtime::Mutex<AdvancedAIManager>`
               found struct `AdvancedAIManager`
note: function defined here
   --> src\commands\advanced_ai_commands.rs:241:14
    |
241 |     async fn mark(session_id: String, idea_id: String, is_keeper: 
bool, ai_state: AdvancedAIState) -> Result<()> {
    |              ^^^^                                                   
    -------------------------
help: call `Into::into` on this expression to convert `AdvancedAIManager` 
into `tauri::async_runtime::Mutex<AdvancedAIManager>`
    |
249 |     mark(session_id, idea_id, is_keeper, 
ai_state.into_inner().into()).await.into()
    |                                                               
+++++++

error[E0308]: mismatched types
   --> src\commands\advanced_ai_commands.rs:276:18
    |
276 |     add(request, ai_state.into_inner()).await.into()
    |     ---          ^^^^^^^^^^^^^^^^^^^^^ expected 
`Mutex<AdvancedAIManager>`, found `AdvancedAIManager`
    |     |
    |     arguments to this function are incorrect
    |
    = note: expected struct 
`tauri::async_runtime::Mutex<AdvancedAIManager>`
               found struct `AdvancedAIManager`
note: function defined here
   --> src\commands\advanced_ai_commands.rs:258:14
    |
258 |     async fn add(request: StyleExampleRequest, ai_state: 
AdvancedAIState) -> Result<StyleExample> {
    |              ^^^                               
-------------------------
help: call `Into::into` on this expression to convert `AdvancedAIManager` 
into `tauri::async_runtime::Mutex<AdvancedAIManager>`
    |
276 |     add(request, ai_state.into_inner().into()).await.into()
    |                                       +++++++

warning: unused variable: `today`
   --> src\commands\advanced_ai_commands.rs:321:9
    |
321 |     let today = chrono::Utc::now().format("%Y-%m-%d").to_string();
    |         ^^^^^ help: if this is intentional, prefix it with an 
underscore: `_today`

warning: unused variable: `image_id`
   --> src\commands\advanced_ai_commands.rs:347:5
    |
347 |     image_id: String,
    |     ^^^^^^^^ help: if this is intentional, prefix it with an 
underscore: `_image_id`

warning: unused variable: `ai_manager`
   --> src\commands\advanced_ai_commands.rs:350:13
    |
350 |     let mut ai_manager = ai_state.lock().await;
    |             ^^^^^^^^^^ help: if this is intentional, prefix it with 
an underscore: `_ai_manager`

warning: variable does not need to be mutable
   --> src\commands\advanced_ai_commands.rs:350:9
    |
350 |     let mut ai_manager = ai_state.lock().await;
    |         ----^^^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: unused variable: `text_context`
   --> src\commands\advanced_ai_commands.rs:361:5
    |
361 |     text_context: String,
    |     ^^^^^^^^^^^^ help: if this is intentional, prefix it with an 
underscore: `_text_context`

warning: unused variable: `story_bible`
   --> src\commands\advanced_ai_commands.rs:362:5
    |
362 |     story_bible: StoryBibleElements,
    |     ^^^^^^^^^^^ help: if this is intentional, prefix it with an 
underscore: `_story_bible`

warning: unused variable: `ai_manager`
   --> src\commands\advanced_ai_commands.rs:365:13
    |
365 |     let mut ai_manager = ai_state.lock().await;
    |             ^^^^^^^^^^ help: if this is intentional, prefix it with 
an underscore: `_ai_manager`

warning: variable does not need to be mutable
   --> src\commands\advanced_ai_commands.rs:365:9
    |
365 |     let mut ai_manager = ai_state.lock().await;
    |         ----^^^^^^^^^^
    |         |
    |         help: remove this `mut`

error[E0599]: no variant or associated item named `ai` found for enum 
`StoryWeaverError` in the current scope
   --> src\commands\advanced_ai_commands.rs:397:36
    |
397 |         .map_err(StoryWeaverError::ai)?;
    |                                    ^^ variant or associated item 
not found in `StoryWeaverError`
    |
   ::: src\error.rs:11:1
    |
11  | pub enum StoryWeaverError {
    | ------------------------- variant or associated item `ai` not found 
for this enum

error[E0277]: the trait bound `std::string::String: 
From<serde_json::Error>` is not satisfied
   --> src\commands\advanced_ai_commands.rs:401:46
    |
401 |       result.insert("suggestions".to_string(), 
serde_json::to_value(&analysis_result.suggestions)
    |  ______________________________________________^
402 | |         .map_err(StoryWeaverError::serialization)?);
    | |_________________________________________________^ the trait 
`From<serde_json::Error>` is not implemented for `std::string::String`
    |
    = help: the following other types implement trait `From<T>`:
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements 
`From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<AssetKey>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, str>>`
              `std::string::String` implements `From<Uuid>`
              `std::string::String` implements `From<char>`
            and 8 others
    = note: required for `serde_json::Error` to implement 
`Into<std::string::String>`
note: required by a bound in `StoryWeaverError::serialization`
   --> src\error.rs:250:29
    |
250 |     pub fn serialization<S: Into<String>>(message: S) -> Self {
    |                             ^^^^^^^^^^^^ required by this bound in 
`StoryWeaverError::serialization`

error[E0277]: the trait bound `std::string::String: 
From<serde_json::Error>` is not satisfied
   --> src\commands\advanced_ai_commands.rs:402:18
    |
402 |         .map_err(StoryWeaverError::serialization)?);
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait 
`From<serde_json::Error>` is not implemented for `std::string::String`
    |
    = help: the following other types implement trait `From<T>`:
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements 
`From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<AssetKey>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, str>>`
              `std::string::String` implements `From<Uuid>`
              `std::string::String` implements `From<char>`
            and 8 others
    = note: required for `serde_json::Error` to implement 
`Into<std::string::String>`
note: required by a bound in `StoryWeaverError::serialization`
   --> src\error.rs:250:29
    |
250 |     pub fn serialization<S: Into<String>>(message: S) -> Self {
    |                             ^^^^^^^^^^^^ required by this bound in 
`StoryWeaverError::serialization`

error[E0277]: the trait bound `std::string::String: 
From<serde_json::Error>` is not satisfied
   --> src\commands\advanced_ai_commands.rs:403:53
    |
403 |       result.insert("extracted_elements".to_string(), 
serde_json::to_value(&analysis_result.extracted_elements)
    |  _____________________________________________________^
404 | |         .map_err(StoryWeaverError::serialization)?);
    | |_________________________________________________^ the trait 
`From<serde_json::Error>` is not implemented for `std::string::String`
    |
    = help: the following other types implement trait `From<T>`:
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements 
`From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<AssetKey>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, str>>`
              `std::string::String` implements `From<Uuid>`
              `std::string::String` implements `From<char>`
            and 8 others
    = note: required for `serde_json::Error` to implement 
`Into<std::string::String>`
note: required by a bound in `StoryWeaverError::serialization`
   --> src\error.rs:250:29
    |
250 |     pub fn serialization<S: Into<String>>(message: S) -> Self {
    |                             ^^^^^^^^^^^^ required by this bound in 
`StoryWeaverError::serialization`

error[E0277]: the trait bound `std::string::String: 
From<serde_json::Error>` is not satisfied
   --> src\commands\advanced_ai_commands.rs:404:18
    |
404 |         .map_err(StoryWeaverError::serialization)?);
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait 
`From<serde_json::Error>` is not implemented for `std::string::String`
    |
    = help: the following other types implement trait `From<T>`:
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements 
`From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<AssetKey>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, str>>`
              `std::string::String` implements `From<Uuid>`
              `std::string::String` implements `From<char>`
            and 8 others
    = note: required for `serde_json::Error` to implement 
`Into<std::string::String>`
note: required by a bound in `StoryWeaverError::serialization`
   --> src\error.rs:250:29
    |
250 |     pub fn serialization<S: Into<String>>(message: S) -> Self {
    |                             ^^^^^^^^^^^^ required by this bound in 
`StoryWeaverError::serialization`

warning: unused variable: `request`
   --> src\commands\advanced_ai_commands.rs:412:5
    |
412 |     request: ProseGenerationRequest,
    |     ^^^^^^^ help: if this is intentional, prefix it with an 
underscore: `_request`

warning: unused variable: `ai_state`
   --> src\commands\advanced_ai_commands.rs:413:5
    |
413 |     ai_state: State<'_, AdvancedAIState>,
    |     ^^^^^^^^ help: if this is intentional, prefix it with an 
underscore: `_ai_state`

warning: unused variable: `stream_id`
   --> src\commands\advanced_ai_commands.rs:421:5
    |
421 |     stream_id: String,
    |     ^^^^^^^^^ help: if this is intentional, prefix it with an 
underscore: `_stream_id`

warning: unused variable: `ai_state`
   --> src\commands\advanced_ai_commands.rs:422:5
    |
422 |     ai_state: State<'_, AdvancedAIState>,
    |     ^^^^^^^^ help: if this is intentional, prefix it with an 
underscore: `_ai_state`

error[E0107]: type alias takes 1 generic argument but 2 generic arguments 
were supplied
   --> src\commands\collaboration.rs:209:6
    |
209 | ) -> Result<Option<CollaborationSession>, StoryWeaverError> {
    |      ^^^^^^ expected 1 generic argument ------------------ help: 
remove the unnecessary generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> src\error.rs:389:10
    |
389 | pub type Result<T> = std::result::Result<T, StoryWeaverError>;
    |          ^^^^^^ -

error[E0107]: type alias takes 1 generic argument but 2 generic arguments 
were supplied
   --> src\commands\collaboration.rs:242:6
    |
242 | ) -> Result<(), StoryWeaverError> {
    |      ^^^^^^   ------------------ help: remove the unnecessary 
generic argument
    |      |
    |      expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> src\error.rs:389:10
    |
389 | pub type Result<T> = std::result::Result<T, StoryWeaverError>;
    |          ^^^^^^ -

error[E0533]: expected value, found struct variant 
`StoryWeaverError::InvalidInput`
  --> src\commands\collaboration.rs:26:25
   |
26 |         _ => return Err(StoryWeaverError::InvalidInput("Invalid 
share type".to_string())),
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not a value
   |
help: you might have meant to create a new value of the struct
   |
26 -         _ => return Err(StoryWeaverError::InvalidInput("Invalid 
share type".to_string())),
26 +         _ => return Err(StoryWeaverError::InvalidInput { message: /* 
value */ }),
   |

error[E0277]: the trait bound `std::string::String: From<sqlx::Error>` is 
not satisfied
   --> src\commands\collaboration.rs:39:5
    |
39  | /     create_shared_document(
40  | |         &pool,
41  | |         &document_id,
42  | |         &project_id,
...   |
47  | |     .await
48  | |     .map_err(StoryWeaverError::database)
    | |________________________________________^ the trait 
`From<sqlx::Error>` is not implemented for `std::string::String`
    |
    = help: the following other types implement trait `From<T>`:
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements 
`From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<AssetKey>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, str>>`
              `std::string::String` implements `From<Uuid>`
              `std::string::String` implements `From<char>`
            and 8 others
    = note: required for `sqlx::Error` to implement 
`Into<std::string::String>`
note: required by a bound in `StoryWeaverError::database`
   --> src\error.rs:211:24
    |
211 |     pub fn database<S: Into<String>>(message: S) -> Self {
    |                        ^^^^^^^^^^^^ required by this bound in 
`StoryWeaverError::database`

error[E0277]: the trait bound `std::string::String: From<sqlx::Error>` is 
not satisfied
   --> src\commands\collaboration.rs:48:14
    |
48  |     .map_err(StoryWeaverError::database)
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait 
`From<sqlx::Error>` is not implemented for `std::string::String`
    |
    = help: the following other types implement trait `From<T>`:
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements 
`From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<AssetKey>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, str>>`
              `std::string::String` implements `From<Uuid>`
              `std::string::String` implements `From<char>`
            and 8 others
    = note: required for `sqlx::Error` to implement 
`Into<std::string::String>`
note: required by a bound in `StoryWeaverError::database`
   --> src\error.rs:211:24
    |
211 |     pub fn database<S: Into<String>>(message: S) -> Self {
    |                        ^^^^^^^^^^^^ required by this bound in 
`StoryWeaverError::database`

error[E0277]: the trait bound `std::string::String: From<sqlx::Error>` is 
not satisfied
   --> src\commands\collaboration.rs:59:22
    |
59  |       let shared_doc = get_shared_document_by_token(&pool, &token)
    |  ______________________^
60  | |         .await
61  | |         .map_err(StoryWeaverError::database)?;
    | |____________________________________________^ the trait 
`From<sqlx::Error>` is not implemented for `std::string::String`
    |
    = help: the following other types implement trait `From<T>`:
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements 
`From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<AssetKey>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, str>>`
              `std::string::String` implements `From<Uuid>`
              `std::string::String` implements `From<char>`
            and 8 others
    = note: required for `sqlx::Error` to implement 
`Into<std::string::String>`
note: required by a bound in `StoryWeaverError::database`
   --> src\error.rs:211:24
    |
211 |     pub fn database<S: Into<String>>(message: S) -> Self {
    |                        ^^^^^^^^^^^^ required by this bound in 
`StoryWeaverError::database`

error[E0277]: the trait bound `std::string::String: From<sqlx::Error>` is 
not satisfied
   --> src\commands\collaboration.rs:61:18
    |
61  |         .map_err(StoryWeaverError::database)?;
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait 
`From<sqlx::Error>` is not implemented for `std::string::String`
    |
    = help: the following other types implement trait `From<T>`:
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements 
`From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<AssetKey>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, str>>`
              `std::string::String` implements `From<Uuid>`
              `std::string::String` implements `From<char>`
            and 8 others
    = note: required for `sqlx::Error` to implement 
`Into<std::string::String>`
note: required by a bound in `StoryWeaverError::database`
   --> src\error.rs:211:24
    |
211 |     pub fn database<S: Into<String>>(message: S) -> Self {
    |                        ^^^^^^^^^^^^ required by this bound in 
`StoryWeaverError::database`

error[E0599]: no variant or associated item named `authentication` found 
for enum `StoryWeaverError` in the current scope
   --> src\commands\collaboration.rs:71:54
    |
71  |                         return 
Err(StoryWeaverError::authentication("Invalid password"));
    |                                                      ^^^^^^^^^^^^^^ 
variant or associated item not found in `StoryWeaverError`
    |
   ::: src\error.rs:11:1
    |
11  | pub enum StoryWeaverError {
    | ------------------------- variant or associated item 
`authentication` not found for this enum
    |
note: if you're trying to build a new `StoryWeaverError` consider using 
one of the following associated functions:
      StoryWeaverError::database
      StoryWeaverError::file_operation
      StoryWeaverError::ai_provider
      StoryWeaverError::internal
      and 4 others
   --> src\error.rs:211:5
    |
211 |     pub fn database<S: Into<String>>(message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
218 |     pub fn file_operation<S: Into<String>>(operation: S, path: S, 
message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
^^^^^^^^^^^^^^^^^
...
227 |     pub fn ai_provider<S: Into<String>>(provider: S, message: S) -> 
Self {
    |     
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
235 |     pub fn internal<S: Into<String>>(message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `authentication` found 
for enum `StoryWeaverError` in the current scope
   --> src\commands\collaboration.rs:74:54
    |
74  |                 None => return 
Err(StoryWeaverError::authentication("Password required")),
    |                                                      ^^^^^^^^^^^^^^ 
variant or associated item not found in `StoryWeaverError`
    |
   ::: src\error.rs:11:1
    |
11  | pub enum StoryWeaverError {
    | ------------------------- variant or associated item 
`authentication` not found for this enum
    |
note: if you're trying to build a new `StoryWeaverError` consider using 
one of the following associated functions:
      StoryWeaverError::database
      StoryWeaverError::file_operation
      StoryWeaverError::ai_provider
      StoryWeaverError::internal
      and 4 others
   --> src\error.rs:211:5
    |
211 |     pub fn database<S: Into<String>>(message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
218 |     pub fn file_operation<S: Into<String>>(operation: S, path: S, 
message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
^^^^^^^^^^^^^^^^^
...
227 |     pub fn ai_provider<S: Into<String>>(provider: S, message: S) -> 
Self {
    |     
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
235 |     pub fn internal<S: Into<String>>(message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0533]: expected value, found struct variant 
`StoryWeaverError::InvalidInput`
  --> src\commands\collaboration.rs:81:28
   |
81 |                 return Err(StoryWeaverError::InvalidInput("Share 
link has expired".to_string()));
   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not a value
   |
help: you might have meant to create a new value of the struct
   |
81 -                 return Err(StoryWeaverError::InvalidInput("Share 
link has expired".to_string()));
81 +                 return Err(StoryWeaverError::InvalidInput { message: 
/* value */ });
   |

error[E0533]: expected value, found struct variant 
`StoryWeaverError::InvalidInput`
  --> src\commands\collaboration.rs:88:28
   |
88 |                 return Err(StoryWeaverError::InvalidInput("Share 
link usage limit exceeded".to_string()));
   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not a value
   |
help: you might have meant to create a new value of the struct
   |
88 -                 return Err(StoryWeaverError::InvalidInput("Share 
link usage limit exceeded".to_string()));
88 +                 return Err(StoryWeaverError::InvalidInput { message: 
/* value */ });
   |

error[E0277]: the trait bound `std::string::String: From<sqlx::Error>` is 
not satisfied
   --> src\commands\collaboration.rs:93:9
    |
93  | /         increment_share_usage(&pool, doc.id)
94  | |             .await
95  | |             .map_err(StoryWeaverError::database)?;
    | |________________________________________________^ the trait 
`From<sqlx::Error>` is not implemented for `std::string::String`
    |
    = help: the following other types implement trait `From<T>`:
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements 
`From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<AssetKey>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, str>>`
              `std::string::String` implements `From<Uuid>`
              `std::string::String` implements `From<char>`
            and 8 others
    = note: required for `sqlx::Error` to implement 
`Into<std::string::String>`
note: required by a bound in `StoryWeaverError::database`
   --> src\error.rs:211:24
    |
211 |     pub fn database<S: Into<String>>(message: S) -> Self {
    |                        ^^^^^^^^^^^^ required by this bound in 
`StoryWeaverError::database`

error[E0277]: the trait bound `std::string::String: From<sqlx::Error>` is 
not satisfied
   --> src\commands\collaboration.rs:95:22
    |
95  |             .map_err(StoryWeaverError::database)?;
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait 
`From<sqlx::Error>` is not implemented for `std::string::String`
    |
    = help: the following other types implement trait `From<T>`:
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements 
`From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<AssetKey>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, str>>`
              `std::string::String` implements `From<Uuid>`
              `std::string::String` implements `From<char>`
            and 8 others
    = note: required for `sqlx::Error` to implement 
`Into<std::string::String>`
note: required by a bound in `StoryWeaverError::database`
   --> src\error.rs:211:24
    |
211 |     pub fn database<S: Into<String>>(message: S) -> Self {
    |                        ^^^^^^^^^^^^ required by this bound in 
`StoryWeaverError::database`

error[E0599]: no variant or associated item named `Praise` found for enum 
`database::models::collaboration::CommentType` in the current scope
   --> src\commands\collaboration.rs:120:34
    |
120 |         "praise" => CommentType::Praise,
    |                                  ^^^^^^ variant or associated item 
not found in `CommentType`
    |
   ::: src\database\models\collaboration.rs:9:1
    |
9   | pub enum CommentType {
    | -------------------- variant or associated item `Praise` not found 
for this enum

error[E0599]: no variant or associated item named `Criticism` found for 
enum `database::models::collaboration::CommentType` in the current scope
   --> src\commands\collaboration.rs:121:37
    |
121 |         "criticism" => CommentType::Criticism,
    |                                     ^^^^^^^^^ variant or associated 
item not found in `CommentType`
    |
   ::: src\database\models\collaboration.rs:9:1
    |
9   | pub enum CommentType {
    | -------------------- variant or associated item `Criticism` not 
found for this enum

error[E0533]: expected value, found struct variant 
`StoryWeaverError::InvalidInput`
   --> src\commands\collaboration.rs:122:25
    |
122 |         _ => return Err(StoryWeaverError::InvalidInput("Invalid 
comment type".to_string())),
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not a value
    |
help: you might have meant to create a new value of the struct
    |
122 -         _ => return Err(StoryWeaverError::InvalidInput("Invalid 
comment type".to_string())),
122 +         _ => return Err(StoryWeaverError::InvalidInput { message: 
/* value */ }),
    |

error[E0277]: the trait bound `std::string::String: From<sqlx::Error>` is 
not satisfied
   --> src\commands\collaboration.rs:137:5
    |
137 | /     create_comment(&pool, request)
138 | |         .await
139 | |         .map_err(StoryWeaverError::database)
    | |____________________________________________^ the trait 
`From<sqlx::Error>` is not implemented for `std::string::String`
    |
    = help: the following other types implement trait `From<T>`:
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements 
`From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<AssetKey>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, str>>`
              `std::string::String` implements `From<Uuid>`
              `std::string::String` implements `From<char>`
            and 8 others
    = note: required for `sqlx::Error` to implement 
`Into<std::string::String>`
note: required by a bound in `StoryWeaverError::database`
   --> src\error.rs:211:24
    |
211 |     pub fn database<S: Into<String>>(message: S) -> Self {
    |                        ^^^^^^^^^^^^ required by this bound in 
`StoryWeaverError::database`

error[E0277]: the trait bound `std::string::String: From<sqlx::Error>` is 
not satisfied
   --> src\commands\collaboration.rs:139:18
    |
139 |         .map_err(StoryWeaverError::database)
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait 
`From<sqlx::Error>` is not implemented for `std::string::String`
    |
    = help: the following other types implement trait `From<T>`:
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements 
`From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<AssetKey>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, str>>`
              `std::string::String` implements `From<Uuid>`
              `std::string::String` implements `From<char>`
            and 8 others
    = note: required for `sqlx::Error` to implement 
`Into<std::string::String>`
note: required by a bound in `StoryWeaverError::database`
   --> src\error.rs:211:24
    |
211 |     pub fn database<S: Into<String>>(message: S) -> Self {
    |                        ^^^^^^^^^^^^ required by this bound in 
`StoryWeaverError::database`

error[E0277]: the trait bound `std::string::String: From<sqlx::Error>` is 
not satisfied
   --> src\commands\collaboration.rs:149:5
    |
149 | /     get_document_comments(&pool, &document_id)
150 | |         .await
151 | |         .map_err(StoryWeaverError::database)
    | |____________________________________________^ the trait 
`From<sqlx::Error>` is not implemented for `std::string::String`
    |
    = help: the following other types implement trait `From<T>`:
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements 
`From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<AssetKey>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, str>>`
              `std::string::String` implements `From<Uuid>`
              `std::string::String` implements `From<char>`
            and 8 others
    = note: required for `sqlx::Error` to implement 
`Into<std::string::String>`
note: required by a bound in `StoryWeaverError::database`
   --> src\error.rs:211:24
    |
211 |     pub fn database<S: Into<String>>(message: S) -> Self {
    |                        ^^^^^^^^^^^^ required by this bound in 
`StoryWeaverError::database`

error[E0277]: the trait bound `std::string::String: From<sqlx::Error>` is 
not satisfied
   --> src\commands\collaboration.rs:151:18
    |
151 |         .map_err(StoryWeaverError::database)
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait 
`From<sqlx::Error>` is not implemented for `std::string::String`
    |
    = help: the following other types implement trait `From<T>`:
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements 
`From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<AssetKey>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, str>>`
              `std::string::String` implements `From<Uuid>`
              `std::string::String` implements `From<char>`
            and 8 others
    = note: required for `sqlx::Error` to implement 
`Into<std::string::String>`
note: required by a bound in `StoryWeaverError::database`
   --> src\error.rs:211:24
    |
211 |     pub fn database<S: Into<String>>(message: S) -> Self {
    |                        ^^^^^^^^^^^^ required by this bound in 
`StoryWeaverError::database`

error[E0061]: this function takes 1 argument but 2 arguments were supplied
   --> src\commands\collaboration.rs:161:5
    |
161 |     get_comment_threads(&pool, &document_id)
    |     ^^^^^^^^^^^^^^^^^^^        ------------ unexpected argument #2 
of type `&std::string::String`
    |
note: expected `String`, found `&Arc<Pool<Sqlite>>`
   --> src\commands\collaboration.rs:161:25
    |
161 |     get_comment_threads(&pool, &document_id)
    |                         ^^^^^
    = note: expected struct `std::string::String`
            found reference `&Arc<Pool<Sqlite>>`
note: function defined here
   --> src\commands\collaboration.rs:156:14
    |
156 | pub async fn get_comment_threads(
    |              ^^^^^^^^^^^^^^^^^^^
157 |     document_id: String,
    |     -------------------
help: remove the extra argument
    |
161 -     get_comment_threads(&pool, &document_id)
161 +     get_comment_threads(/* std::string::String */)
    |

error[E0277]: the trait bound `std::string::String: 
From<StoryWeaverError>` is not satisfied
   --> src\commands\collaboration.rs:161:5
    |
161 | /     get_comment_threads(&pool, &document_id)
162 | |         .await
163 | |         .map_err(StoryWeaverError::database)
    | |____________________________________________^ the trait 
`From<StoryWeaverError>` is not implemented for `std::string::String`
    |
    = help: the following other types implement trait `From<T>`:
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements 
`From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<AssetKey>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, str>>`
              `std::string::String` implements `From<Uuid>`
              `std::string::String` implements `From<char>`
            and 8 others
    = note: required for `StoryWeaverError` to implement 
`Into<std::string::String>`
note: required by a bound in `StoryWeaverError::database`
   --> src\error.rs:211:24
    |
211 |     pub fn database<S: Into<String>>(message: S) -> Self {
    |                        ^^^^^^^^^^^^ required by this bound in 
`StoryWeaverError::database`

error[E0277]: the trait bound `std::string::String: 
From<StoryWeaverError>` is not satisfied
   --> src\commands\collaboration.rs:163:18
    |
163 |         .map_err(StoryWeaverError::database)
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait 
`From<StoryWeaverError>` is not implemented for `std::string::String`
    |
    = help: the following other types implement trait `From<T>`:
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements 
`From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<AssetKey>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, str>>`
              `std::string::String` implements `From<Uuid>`
              `std::string::String` implements `From<char>`
            and 8 others
    = note: required for `StoryWeaverError` to implement 
`Into<std::string::String>`
note: required by a bound in `StoryWeaverError::database`
   --> src\error.rs:211:24
    |
211 |     pub fn database<S: Into<String>>(message: S) -> Self {
    |                        ^^^^^^^^^^^^ required by this bound in 
`StoryWeaverError::database`

error[E0061]: this function takes 2 arguments but 3 arguments were 
supplied
   --> src\commands\collaboration.rs:174:5
    |
174 |     resolve_comment(&pool, comment_id, &resolved_by)
    |     ^^^^^^^^^^^^^^^ -----              ------------ expected 
`String`, found `&String`
    |                     |
    |                     unexpected argument #1 of type 
`&Arc<Pool<Sqlite>>`
    |
note: function defined here
   --> src\commands\collaboration.rs:168:14
    |
168 | pub async fn resolve_comment(
    |              ^^^^^^^^^^^^^^^
169 |     comment_id: i32,
170 |     resolved_by: String,
    |     -------------------
help: consider removing the borrow
    |
174 -     resolve_comment(&pool, comment_id, &resolved_by)
174 +     resolve_comment(&pool, comment_id, resolved_by)
    |
help: remove the extra argument
    |
174 -     resolve_comment(&pool, comment_id, &resolved_by)
174 +     resolve_comment(, comment_id, /* std::string::String */)
    |

error[E0277]: the trait bound `std::string::String: 
From<StoryWeaverError>` is not satisfied
   --> src\commands\collaboration.rs:174:5
    |
174 | /     resolve_comment(&pool, comment_id, &resolved_by)
175 | |         .await
176 | |         .map_err(StoryWeaverError::database)
    | |____________________________________________^ the trait 
`From<StoryWeaverError>` is not implemented for `std::string::String`
    |
    = help: the following other types implement trait `From<T>`:
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements 
`From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<AssetKey>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, str>>`
              `std::string::String` implements `From<Uuid>`
              `std::string::String` implements `From<char>`
            and 8 others
    = note: required for `StoryWeaverError` to implement 
`Into<std::string::String>`
note: required by a bound in `StoryWeaverError::database`
   --> src\error.rs:211:24
    |
211 |     pub fn database<S: Into<String>>(message: S) -> Self {
    |                        ^^^^^^^^^^^^ required by this bound in 
`StoryWeaverError::database`

error[E0277]: the trait bound `std::string::String: 
From<StoryWeaverError>` is not satisfied
   --> src\commands\collaboration.rs:176:18
    |
176 |         .map_err(StoryWeaverError::database)
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait 
`From<StoryWeaverError>` is not implemented for `std::string::String`
    |
    = help: the following other types implement trait `From<T>`:
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements 
`From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<AssetKey>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, str>>`
              `std::string::String` implements `From<Uuid>`
              `std::string::String` implements `From<char>`
            and 8 others
    = note: required for `StoryWeaverError` to implement 
`Into<std::string::String>`
note: required by a bound in `StoryWeaverError::database`
   --> src\error.rs:211:24
    |
211 |     pub fn database<S: Into<String>>(message: S) -> Self {
    |                        ^^^^^^^^^^^^ required by this bound in 
`StoryWeaverError::database`

error[E0061]: this function takes 1 argument but 2 arguments were supplied
   --> src\commands\collaboration.rs:186:5
    |
186 |     delete_comment(&pool, comment_id)
    |     ^^^^^^^^^^^^^^ ----- unexpected argument #1 of type 
`&Arc<Pool<Sqlite>>`
    |
note: function defined here
   --> src\commands\collaboration.rs:181:14
    |
181 | pub async fn delete_comment(
    |              ^^^^^^^^^^^^^^
help: remove the extra argument
    |
186 -     delete_comment(&pool, comment_id)
186 +     delete_comment(comment_id)
    |

error[E0277]: the trait bound `std::string::String: 
From<StoryWeaverError>` is not satisfied
   --> src\commands\collaboration.rs:186:5
    |
186 | /     delete_comment(&pool, comment_id)
187 | |         .await
188 | |         .map_err(StoryWeaverError::database)
    | |____________________________________________^ the trait 
`From<StoryWeaverError>` is not implemented for `std::string::String`
    |
    = help: the following other types implement trait `From<T>`:
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements 
`From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<AssetKey>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, str>>`
              `std::string::String` implements `From<Uuid>`
              `std::string::String` implements `From<char>`
            and 8 others
    = note: required for `StoryWeaverError` to implement 
`Into<std::string::String>`
note: required by a bound in `StoryWeaverError::database`
   --> src\error.rs:211:24
    |
211 |     pub fn database<S: Into<String>>(message: S) -> Self {
    |                        ^^^^^^^^^^^^ required by this bound in 
`StoryWeaverError::database`

error[E0277]: the trait bound `std::string::String: 
From<StoryWeaverError>` is not satisfied
   --> src\commands\collaboration.rs:188:18
    |
188 |         .map_err(StoryWeaverError::database)
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait 
`From<StoryWeaverError>` is not implemented for `std::string::String`
    |
    = help: the following other types implement trait `From<T>`:
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements 
`From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<AssetKey>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, str>>`
              `std::string::String` implements `From<Uuid>`
              `std::string::String` implements `From<char>`
            and 8 others
    = note: required for `StoryWeaverError` to implement 
`Into<std::string::String>`
note: required by a bound in `StoryWeaverError::database`
   --> src\error.rs:211:24
    |
211 |     pub fn database<S: Into<String>>(message: S) -> Self {
    |                        ^^^^^^^^^^^^ required by this bound in 
`StoryWeaverError::database`

error[E0061]: this function takes 3 arguments but 4 arguments were 
supplied
   --> src\commands\collaboration.rs:200:5
    |
200 |     create_collaboration_session(&pool, &document_id, 
max_participants, expires_in_hours)
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^        ------------ unexpected 
argument #2 of type `&std::string::String`
    |
note: expected `String`, found `&Arc<Pool<Sqlite>>`
   --> src\commands\collaboration.rs:200:34
    |
200 |     create_collaboration_session(&pool, &document_id, 
max_participants, expires_in_hours)
    |                                  ^^^^^
    = note: expected struct `std::string::String`
            found reference `&Arc<Pool<Sqlite>>`
note: function defined here
   --> src\commands\collaboration.rs:193:14
    |
193 | pub async fn create_collaboration_session(
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
194 |     document_id: String,
    |     -------------------
help: remove the extra argument
    |
200 -     create_collaboration_session(&pool, &document_id, 
max_participants, expires_in_hours)
200 +     create_collaboration_session(/* std::string::String */, 
max_participants, expires_in_hours)
    |

error[E0277]: the trait bound `std::string::String: 
From<StoryWeaverError>` is not satisfied
   --> src\commands\collaboration.rs:200:5
    |
200 | /     create_collaboration_session(&pool, &document_id, 
max_participants, expires_in_hours)
201 | |         .await
202 | |         .map_err(StoryWeaverError::database)
    | |____________________________________________^ the trait 
`From<StoryWeaverError>` is not implemented for `std::string::String`
    |
    = help: the following other types implement trait `From<T>`:
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements 
`From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<AssetKey>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, str>>`
              `std::string::String` implements `From<Uuid>`
              `std::string::String` implements `From<char>`
            and 8 others
    = note: required for `StoryWeaverError` to implement 
`Into<std::string::String>`
note: required by a bound in `StoryWeaverError::database`
   --> src\error.rs:211:24
    |
211 |     pub fn database<S: Into<String>>(message: S) -> Self {
    |                        ^^^^^^^^^^^^ required by this bound in 
`StoryWeaverError::database`

error[E0277]: the trait bound `std::string::String: 
From<StoryWeaverError>` is not satisfied
   --> src\commands\collaboration.rs:202:18
    |
202 |         .map_err(StoryWeaverError::database)
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait 
`From<StoryWeaverError>` is not implemented for `std::string::String`
    |
    = help: the following other types implement trait `From<T>`:
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements 
`From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<AssetKey>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, str>>`
              `std::string::String` implements `From<Uuid>`
              `std::string::String` implements `From<char>`
            and 8 others
    = note: required for `StoryWeaverError` to implement 
`Into<std::string::String>`
note: required by a bound in `StoryWeaverError::database`
   --> src\error.rs:211:24
    |
211 |     pub fn database<S: Into<String>>(message: S) -> Self {
    |                        ^^^^^^^^^^^^ required by this bound in 
`StoryWeaverError::database`

error[E0609]: no field `current_participants` on type 
`&database::models::collaboration::CollaborationSession`
   --> src\commands\collaboration.rs:225:17
    |
225 |         if sess.current_participants >= sess.max_participants {
    |                 ^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `id`, `document_id`, `session_token`, 
`session_name`, `is_active` ... and 4 others

error[E0609]: no field `current_participants` on type 
`&database::models::collaboration::CollaborationSession`
   --> src\commands\collaboration.rs:230:58
    |
230 |         update_session_participants(&pool, sess.id, 
sess.current_participants + 1)
    |                                                          
^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `id`, `document_id`, `session_token`, 
`session_name`, `is_active` ... and 4 others

error[E0425]: cannot find function `update_session_participants` in this 
scope
   --> src\commands\collaboration.rs:230:9
    |
230 |         update_session_participants(&pool, sess.id, 
sess.current_participants + 1)
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error[E0609]: no field `current_participants` on type 
`database::models::collaboration::CollaborationSession`
   --> src\commands\collaboration.rs:250:47
    |
250 |         let new_count = std::cmp::max(0, sess.current_participants 
- 1);
    |                                               ^^^^^^^^^^^^^^^^^^^^ 
unknown field
    |
    = note: available fields are: `id`, `document_id`, `session_token`, 
`session_name`, `is_active` ... and 4 others

error[E0425]: cannot find function `update_session_participants` in this 
scope
   --> src\commands\collaboration.rs:251:9
    |
251 |         update_session_participants(&pool, sess.id, new_count)
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error[E0061]: this function takes 2 arguments but 3 arguments were 
supplied
   --> src\commands\collaboration.rs:267:5
    |
267 |     duplicate_document_for_sharing(&pool, &document_id, &new_title)
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^        ------------  ---------- 
unexpected argument #3 of type `&std::string::String`
    |                                           |
    |                                           expected `String`, found 
`&String`
    |
note: expected `String`, found `&Arc<Pool<Sqlite>>`
   --> src\commands\collaboration.rs:267:36
    |
267 |     duplicate_document_for_sharing(&pool, &document_id, &new_title)
    |                                    ^^^^^
    = note: expected struct `std::string::String`
            found reference `&Arc<Pool<Sqlite>>`
note: function defined here
   --> src\commands\collaboration.rs:261:14
    |
261 | pub async fn duplicate_document_for_sharing(
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
262 |     document_id: String,
    |     -------------------
263 |     new_title: String,
    |     -----------------
help: consider removing the borrow
    |
267 -     duplicate_document_for_sharing(&pool, &document_id, &new_title)
267 +     duplicate_document_for_sharing(&pool, document_id, &new_title)
    |
help: remove the extra argument
    |
267 -     duplicate_document_for_sharing(&pool, &document_id, &new_title)
267 +     duplicate_document_for_sharing(/* std::string::String */, /* 
std::string::String */)
    |

error[E0277]: the trait bound `std::string::String: 
From<StoryWeaverError>` is not satisfied
   --> src\commands\collaboration.rs:267:5
    |
267 | /     duplicate_document_for_sharing(&pool, &document_id, 
&new_title)
268 | |         .await
269 | |         .map_err(StoryWeaverError::database)
    | |____________________________________________^ the trait 
`From<StoryWeaverError>` is not implemented for `std::string::String`
    |
    = help: the following other types implement trait `From<T>`:
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements 
`From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<AssetKey>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, str>>`
              `std::string::String` implements `From<Uuid>`
              `std::string::String` implements `From<char>`
            and 8 others
    = note: required for `StoryWeaverError` to implement 
`Into<std::string::String>`
note: required by a bound in `StoryWeaverError::database`
   --> src\error.rs:211:24
    |
211 |     pub fn database<S: Into<String>>(message: S) -> Self {
    |                        ^^^^^^^^^^^^ required by this bound in 
`StoryWeaverError::database`

error[E0277]: the trait bound `std::string::String: 
From<StoryWeaverError>` is not satisfied
   --> src\commands\collaboration.rs:269:18
    |
269 |         .map_err(StoryWeaverError::database)
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait 
`From<StoryWeaverError>` is not implemented for `std::string::String`
    |
    = help: the following other types implement trait `From<T>`:
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements 
`From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<AssetKey>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, str>>`
              `std::string::String` implements `From<Uuid>`
              `std::string::String` implements `From<char>`
            and 8 others
    = note: required for `StoryWeaverError` to implement 
`Into<std::string::String>`
note: required by a bound in `StoryWeaverError::database`
   --> src\error.rs:211:24
    |
211 |     pub fn database<S: Into<String>>(message: S) -> Self {
    |                        ^^^^^^^^^^^^ required by this bound in 
`StoryWeaverError::database`

error[E0061]: this function takes 1 argument but 2 arguments were supplied
   --> src\commands\collaboration.rs:279:5
    |
279 |     unpublish_shared_document(&pool, &share_token)
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^        ------------ unexpected 
argument #2 of type `&std::string::String`
    |
note: expected `String`, found `&Arc<Pool<Sqlite>>`
   --> src\commands\collaboration.rs:279:31
    |
279 |     unpublish_shared_document(&pool, &share_token)
    |                               ^^^^^
    = note: expected struct `std::string::String`
            found reference `&Arc<Pool<Sqlite>>`
note: function defined here
   --> src\commands\collaboration.rs:274:14
    |
274 | pub async fn unpublish_shared_document(
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^
275 |     share_token: String,
    |     -------------------
help: remove the extra argument
    |
279 -     unpublish_shared_document(&pool, &share_token)
279 +     unpublish_shared_document(/* std::string::String */)
    |

error[E0277]: the trait bound `std::string::String: 
From<StoryWeaverError>` is not satisfied
   --> src\commands\collaboration.rs:279:5
    |
279 | /     unpublish_shared_document(&pool, &share_token)
280 | |         .await
281 | |         .map_err(StoryWeaverError::database)
    | |____________________________________________^ the trait 
`From<StoryWeaverError>` is not implemented for `std::string::String`
    |
    = help: the following other types implement trait `From<T>`:
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements 
`From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<AssetKey>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, str>>`
              `std::string::String` implements `From<Uuid>`
              `std::string::String` implements `From<char>`
            and 8 others
    = note: required for `StoryWeaverError` to implement 
`Into<std::string::String>`
note: required by a bound in `StoryWeaverError::database`
   --> src\error.rs:211:24
    |
211 |     pub fn database<S: Into<String>>(message: S) -> Self {
    |                        ^^^^^^^^^^^^ required by this bound in 
`StoryWeaverError::database`

error[E0277]: the trait bound `std::string::String: 
From<StoryWeaverError>` is not satisfied
   --> src\commands\collaboration.rs:281:18
    |
281 |         .map_err(StoryWeaverError::database)
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait 
`From<StoryWeaverError>` is not implemented for `std::string::String`
    |
    = help: the following other types implement trait `From<T>`:
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements 
`From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<AssetKey>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, str>>`
              `std::string::String` implements `From<Uuid>`
              `std::string::String` implements `From<char>`
            and 8 others
    = note: required for `StoryWeaverError` to implement 
`Into<std::string::String>`
note: required by a bound in `StoryWeaverError::database`
   --> src\error.rs:211:24
    |
211 |     pub fn database<S: Into<String>>(message: S) -> Self {
    |                        ^^^^^^^^^^^^ required by this bound in 
`StoryWeaverError::database`

error[E0061]: this function takes 1 argument but 2 arguments were supplied
   --> src\commands\collaboration.rs:291:5
    |
291 |     republish_shared_document(&pool, &share_token)
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^        ------------ unexpected 
argument #2 of type `&std::string::String`
    |
note: expected `String`, found `&Arc<Pool<Sqlite>>`
   --> src\commands\collaboration.rs:291:31
    |
291 |     republish_shared_document(&pool, &share_token)
    |                               ^^^^^
    = note: expected struct `std::string::String`
            found reference `&Arc<Pool<Sqlite>>`
note: function defined here
   --> src\commands\collaboration.rs:286:14
    |
286 | pub async fn republish_shared_document(
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^
287 |     share_token: String,
    |     -------------------
help: remove the extra argument
    |
291 -     republish_shared_document(&pool, &share_token)
291 +     republish_shared_document(/* std::string::String */)
    |

error[E0277]: the trait bound `std::string::String: 
From<StoryWeaverError>` is not satisfied
   --> src\commands\collaboration.rs:291:5
    |
291 | /     republish_shared_document(&pool, &share_token)
292 | |         .await
293 | |         .map_err(StoryWeaverError::database)
    | |____________________________________________^ the trait 
`From<StoryWeaverError>` is not implemented for `std::string::String`
    |
    = help: the following other types implement trait `From<T>`:
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements 
`From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<AssetKey>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, str>>`
              `std::string::String` implements `From<Uuid>`
              `std::string::String` implements `From<char>`
            and 8 others
    = note: required for `StoryWeaverError` to implement 
`Into<std::string::String>`
note: required by a bound in `StoryWeaverError::database`
   --> src\error.rs:211:24
    |
211 |     pub fn database<S: Into<String>>(message: S) -> Self {
    |                        ^^^^^^^^^^^^ required by this bound in 
`StoryWeaverError::database`

error[E0277]: the trait bound `std::string::String: 
From<StoryWeaverError>` is not satisfied
   --> src\commands\collaboration.rs:293:18
    |
293 |         .map_err(StoryWeaverError::database)
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait 
`From<StoryWeaverError>` is not implemented for `std::string::String`
    |
    = help: the following other types implement trait `From<T>`:
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements 
`From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<AssetKey>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, str>>`
              `std::string::String` implements `From<Uuid>`
              `std::string::String` implements `From<char>`
            and 8 others
    = note: required for `StoryWeaverError` to implement 
`Into<std::string::String>`
note: required by a bound in `StoryWeaverError::database`
   --> src\error.rs:211:24
    |
211 |     pub fn database<S: Into<String>>(message: S) -> Self {
    |                        ^^^^^^^^^^^^ required by this bound in 
`StoryWeaverError::database`

error[E0061]: this function takes 1 argument but 2 arguments were supplied
   --> src\commands\collaboration.rs:303:5
    |
303 |     get_project_shared_documents(&pool, &project_id)
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^        ----------- unexpected 
argument #2 of type `&std::string::String`
    |
note: expected `String`, found `&Arc<Pool<Sqlite>>`
   --> src\commands\collaboration.rs:303:34
    |
303 |     get_project_shared_documents(&pool, &project_id)
    |                                  ^^^^^
    = note: expected struct `std::string::String`
            found reference `&Arc<Pool<Sqlite>>`
note: function defined here
   --> src\commands\collaboration.rs:298:14
    |
298 | pub async fn get_project_shared_documents(
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
299 |     project_id: String,
    |     ------------------
help: remove the extra argument
    |
303 -     get_project_shared_documents(&pool, &project_id)
303 +     get_project_shared_documents(/* std::string::String */)
    |

error[E0277]: the trait bound `std::string::String: 
From<StoryWeaverError>` is not satisfied
   --> src\commands\collaboration.rs:303:5
    |
303 | /     get_project_shared_documents(&pool, &project_id)
304 | |         .await
305 | |         .map_err(StoryWeaverError::database)
    | |____________________________________________^ the trait 
`From<StoryWeaverError>` is not implemented for `std::string::String`
    |
    = help: the following other types implement trait `From<T>`:
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements 
`From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<AssetKey>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, str>>`
              `std::string::String` implements `From<Uuid>`
              `std::string::String` implements `From<char>`
            and 8 others
    = note: required for `StoryWeaverError` to implement 
`Into<std::string::String>`
note: required by a bound in `StoryWeaverError::database`
   --> src\error.rs:211:24
    |
211 |     pub fn database<S: Into<String>>(message: S) -> Self {
    |                        ^^^^^^^^^^^^ required by this bound in 
`StoryWeaverError::database`

error[E0277]: the trait bound `std::string::String: 
From<StoryWeaverError>` is not satisfied
   --> src\commands\collaboration.rs:305:18
    |
305 |         .map_err(StoryWeaverError::database)
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait 
`From<StoryWeaverError>` is not implemented for `std::string::String`
    |
    = help: the following other types implement trait `From<T>`:
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements 
`From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<AssetKey>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, str>>`
              `std::string::String` implements `From<Uuid>`
              `std::string::String` implements `From<char>`
            and 8 others
    = note: required for `StoryWeaverError` to implement 
`Into<std::string::String>`
note: required by a bound in `StoryWeaverError::database`
   --> src\error.rs:211:24
    |
211 |     pub fn database<S: Into<String>>(message: S) -> Self {
    |                        ^^^^^^^^^^^^ required by this bound in 
`StoryWeaverError::database`

error[E0533]: expected value, found struct variant 
`StoryWeaverError::InvalidInput`
   --> src\commands\collaboration.rs:324:25
    |
324 |         _ => return Err(StoryWeaverError::InvalidInput("Invalid 
notification type".to_string())),
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not a value
    |
help: you might have meant to create a new value of the struct
    |
324 -         _ => return Err(StoryWeaverError::InvalidInput("Invalid 
notification type".to_string())),
324 +         _ => return Err(StoryWeaverError::InvalidInput { message: 
/* value */ }),
    |

error[E0061]: this function takes 4 arguments but 5 arguments were 
supplied
   --> src\commands\collaboration.rs:327:5
    |
327 |     create_notification(&pool, &document_id, notification_type, 
&message, recipient_token.as_deref())
    |     ^^^^^^^^^^^^^^^^^^^        ------------  -----------------      
      -------------------------- unexpected argument #5 of type 
`std::option::Option<&str>`
    |                                |             |
    |                                |             expected `String`, 
found `NotificationType`
    |                                expected `String`, found `&String`
    |
note: expected `String`, found `&Arc<Pool<Sqlite>>`
   --> src\commands\collaboration.rs:327:25
    |
327 |     create_notification(&pool, &document_id, notification_type, 
&message, recipient_token.as_deref())
    |                         ^^^^^
    = note: expected struct `std::string::String`
            found reference `&Arc<Pool<Sqlite>>`
note: expected `Option<String>`, found `&String`
   --> src\commands\collaboration.rs:327:65
    |
327 |     create_notification(&pool, &document_id, notification_type, 
&message, recipient_token.as_deref())
    |                                                                 
^^^^^^^^
    = note:   expected enum `std::option::Option<std::string::String>`
            found reference `&std::string::String`
note: function defined here
   --> src\commands\collaboration.rs:310:14
    |
310 | pub async fn create_notification(
    |              ^^^^^^^^^^^^^^^^^^^
311 |     document_id: String,
    |     -------------------
312 |     notification_type: String,
    |     -------------------------
313 |     message: String,
    |     ---------------
314 |     recipient_token: Option<String>,
    |     -------------------------------
help: consider removing the borrow
    |
327 -     create_notification(&pool, &document_id, notification_type, 
&message, recipient_token.as_deref())
327 +     create_notification(&pool, document_id, notification_type, 
&message, recipient_token.as_deref())
    |
help: remove the extra argument
    |
327 -     create_notification(&pool, &document_id, notification_type, 
&message, recipient_token.as_deref())
327 +     create_notification(/* std::string::String */, /* 
std::string::String */, /* std::string::String */, /* 
std::option::Option<std::string::String> */)
    |

error[E0277]: the trait bound `std::string::String: 
From<StoryWeaverError>` is not satisfied
   --> src\commands\collaboration.rs:327:5
    |
327 | /     create_notification(&pool, &document_id, notification_type, 
&message, recipient_token.as_deref())
328 | |         .await
329 | |         .map_err(StoryWeaverError::database)
    | |____________________________________________^ the trait 
`From<StoryWeaverError>` is not implemented for `std::string::String`
    |
    = help: the following other types implement trait `From<T>`:
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements 
`From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<AssetKey>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, str>>`
              `std::string::String` implements `From<Uuid>`
              `std::string::String` implements `From<char>`
            and 8 others
    = note: required for `StoryWeaverError` to implement 
`Into<std::string::String>`
note: required by a bound in `StoryWeaverError::database`
   --> src\error.rs:211:24
    |
211 |     pub fn database<S: Into<String>>(message: S) -> Self {
    |                        ^^^^^^^^^^^^ required by this bound in 
`StoryWeaverError::database`

error[E0277]: the trait bound `std::string::String: 
From<StoryWeaverError>` is not satisfied
   --> src\commands\collaboration.rs:329:18
    |
329 |         .map_err(StoryWeaverError::database)
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait 
`From<StoryWeaverError>` is not implemented for `std::string::String`
    |
    = help: the following other types implement trait `From<T>`:
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements 
`From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<AssetKey>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, str>>`
              `std::string::String` implements `From<Uuid>`
              `std::string::String` implements `From<char>`
            and 8 others
    = note: required for `StoryWeaverError` to implement 
`Into<std::string::String>`
note: required by a bound in `StoryWeaverError::database`
   --> src\error.rs:211:24
    |
211 |     pub fn database<S: Into<String>>(message: S) -> Self {
    |                        ^^^^^^^^^^^^ required by this bound in 
`StoryWeaverError::database`

error[E0061]: this function takes 2 arguments but 3 arguments were 
supplied
   --> src\commands\collaboration.rs:340:5
    |
340 |     get_notifications_for_user(&pool, &recipient_token, limit)
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^        ---------------- unexpected 
argument #2 of type `&std::string::String`
    |
note: expected `String`, found `&Arc<Pool<Sqlite>>`
   --> src\commands\collaboration.rs:340:32
    |
340 |     get_notifications_for_user(&pool, &recipient_token, limit)
    |                                ^^^^^
    = note: expected struct `std::string::String`
            found reference `&Arc<Pool<Sqlite>>`
note: function defined here
   --> src\commands\collaboration.rs:334:14
    |
334 | pub async fn get_notifications_for_user(
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^
335 |     recipient_token: String,
    |     -----------------------
help: remove the extra argument
    |
340 -     get_notifications_for_user(&pool, &recipient_token, limit)
340 +     get_notifications_for_user(/* std::string::String */, limit)
    |

error[E0277]: the trait bound `std::string::String: 
From<StoryWeaverError>` is not satisfied
   --> src\commands\collaboration.rs:340:5
    |
340 | /     get_notifications_for_user(&pool, &recipient_token, limit)
341 | |         .await
342 | |         .map_err(StoryWeaverError::database)
    | |____________________________________________^ the trait 
`From<StoryWeaverError>` is not implemented for `std::string::String`
    |
    = help: the following other types implement trait `From<T>`:
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements 
`From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<AssetKey>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, str>>`
              `std::string::String` implements `From<Uuid>`
              `std::string::String` implements `From<char>`
            and 8 others
    = note: required for `StoryWeaverError` to implement 
`Into<std::string::String>`
note: required by a bound in `StoryWeaverError::database`
   --> src\error.rs:211:24
    |
211 |     pub fn database<S: Into<String>>(message: S) -> Self {
    |                        ^^^^^^^^^^^^ required by this bound in 
`StoryWeaverError::database`

error[E0277]: the trait bound `std::string::String: 
From<StoryWeaverError>` is not satisfied
   --> src\commands\collaboration.rs:342:18
    |
342 |         .map_err(StoryWeaverError::database)
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait 
`From<StoryWeaverError>` is not implemented for `std::string::String`
    |
    = help: the following other types implement trait `From<T>`:
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements 
`From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<AssetKey>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, str>>`
              `std::string::String` implements `From<Uuid>`
              `std::string::String` implements `From<char>`
            and 8 others
    = note: required for `StoryWeaverError` to implement 
`Into<std::string::String>`
note: required by a bound in `StoryWeaverError::database`
   --> src\error.rs:211:24
    |
211 |     pub fn database<S: Into<String>>(message: S) -> Self {
    |                        ^^^^^^^^^^^^ required by this bound in 
`StoryWeaverError::database`

error[E0061]: this function takes 1 argument but 2 arguments were supplied
   --> src\commands\collaboration.rs:352:5
    |
352 |     mark_notification_read(&pool, notification_id)
    |     ^^^^^^^^^^^^^^^^^^^^^^ ----- unexpected argument #1 of type 
`&Arc<Pool<Sqlite>>`
    |
note: function defined here
   --> src\commands\collaboration.rs:347:14
    |
347 | pub async fn mark_notification_read(
    |              ^^^^^^^^^^^^^^^^^^^^^^
help: remove the extra argument
    |
352 -     mark_notification_read(&pool, notification_id)
352 +     mark_notification_read(notification_id)
    |

error[E0277]: the trait bound `std::string::String: 
From<StoryWeaverError>` is not satisfied
   --> src\commands\collaboration.rs:352:5
    |
352 | /     mark_notification_read(&pool, notification_id)
353 | |         .await
354 | |         .map_err(StoryWeaverError::database)
    | |____________________________________________^ the trait 
`From<StoryWeaverError>` is not implemented for `std::string::String`
    |
    = help: the following other types implement trait `From<T>`:
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements 
`From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<AssetKey>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, str>>`
              `std::string::String` implements `From<Uuid>`
              `std::string::String` implements `From<char>`
            and 8 others
    = note: required for `StoryWeaverError` to implement 
`Into<std::string::String>`
note: required by a bound in `StoryWeaverError::database`
   --> src\error.rs:211:24
    |
211 |     pub fn database<S: Into<String>>(message: S) -> Self {
    |                        ^^^^^^^^^^^^ required by this bound in 
`StoryWeaverError::database`

error[E0277]: the trait bound `std::string::String: 
From<StoryWeaverError>` is not satisfied
   --> src\commands\collaboration.rs:354:18
    |
354 |         .map_err(StoryWeaverError::database)
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait 
`From<StoryWeaverError>` is not implemented for `std::string::String`
    |
    = help: the following other types implement trait `From<T>`:
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements 
`From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<AssetKey>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, str>>`
              `std::string::String` implements `From<Uuid>`
              `std::string::String` implements `From<char>`
            and 8 others
    = note: required for `StoryWeaverError` to implement 
`Into<std::string::String>`
note: required by a bound in `StoryWeaverError::database`
   --> src\error.rs:211:24
    |
211 |     pub fn database<S: Into<String>>(message: S) -> Self {
    |                        ^^^^^^^^^^^^ required by this bound in 
`StoryWeaverError::database`

error[E0061]: this function takes 1 argument but 2 arguments were supplied
   --> src\commands\collaboration.rs:364:5
    |
364 |     mark_all_notifications_read(&pool, &recipient_token)
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^        ---------------- unexpected 
argument #2 of type `&std::string::String`
    |
note: expected `String`, found `&Arc<Pool<Sqlite>>`
   --> src\commands\collaboration.rs:364:33
    |
364 |     mark_all_notifications_read(&pool, &recipient_token)
    |                                 ^^^^^
    = note: expected struct `std::string::String`
            found reference `&Arc<Pool<Sqlite>>`
note: function defined here
   --> src\commands\collaboration.rs:359:14
    |
359 | pub async fn mark_all_notifications_read(
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^
360 |     recipient_token: String,
    |     -----------------------
help: remove the extra argument
    |
364 -     mark_all_notifications_read(&pool, &recipient_token)
364 +     mark_all_notifications_read(/* std::string::String */)
    |

error[E0277]: the trait bound `std::string::String: 
From<StoryWeaverError>` is not satisfied
   --> src\commands\collaboration.rs:364:5
    |
364 | /     mark_all_notifications_read(&pool, &recipient_token)
365 | |         .await
366 | |         .map_err(StoryWeaverError::database)
    | |____________________________________________^ the trait 
`From<StoryWeaverError>` is not implemented for `std::string::String`
    |
    = help: the following other types implement trait `From<T>`:
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements 
`From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<AssetKey>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, str>>`
              `std::string::String` implements `From<Uuid>`
              `std::string::String` implements `From<char>`
            and 8 others
    = note: required for `StoryWeaverError` to implement 
`Into<std::string::String>`
note: required by a bound in `StoryWeaverError::database`
   --> src\error.rs:211:24
    |
211 |     pub fn database<S: Into<String>>(message: S) -> Self {
    |                        ^^^^^^^^^^^^ required by this bound in 
`StoryWeaverError::database`

error[E0277]: the trait bound `std::string::String: 
From<StoryWeaverError>` is not satisfied
   --> src\commands\collaboration.rs:366:18
    |
366 |         .map_err(StoryWeaverError::database)
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait 
`From<StoryWeaverError>` is not implemented for `std::string::String`
    |
    = help: the following other types implement trait `From<T>`:
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements 
`From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<AssetKey>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, str>>`
              `std::string::String` implements `From<Uuid>`
              `std::string::String` implements `From<char>`
            and 8 others
    = note: required for `StoryWeaverError` to implement 
`Into<std::string::String>`
note: required by a bound in `StoryWeaverError::database`
   --> src\error.rs:211:24
    |
211 |     pub fn database<S: Into<String>>(message: S) -> Self {
    |                        ^^^^^^^^^^^^ required by this bound in 
`StoryWeaverError::database`

error[E0061]: this function takes 1 argument but 2 arguments were supplied
   --> src\commands\collaboration.rs:376:5
    |
376 |     get_unread_notification_count(&pool, &recipient_token)
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^        ---------------- 
unexpected argument #2 of type `&std::string::String`
    |
note: expected `String`, found `&Arc<Pool<Sqlite>>`
   --> src\commands\collaboration.rs:376:35
    |
376 |     get_unread_notification_count(&pool, &recipient_token)
    |                                   ^^^^^
    = note: expected struct `std::string::String`
            found reference `&Arc<Pool<Sqlite>>`
note: function defined here
   --> src\commands\collaboration.rs:371:14
    |
371 | pub async fn get_unread_notification_count(
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
372 |     recipient_token: String,
    |     -----------------------
help: remove the extra argument
    |
376 -     get_unread_notification_count(&pool, &recipient_token)
376 +     get_unread_notification_count(/* std::string::String */)
    |

error[E0277]: the trait bound `std::string::String: 
From<StoryWeaverError>` is not satisfied
   --> src\commands\collaboration.rs:376:5
    |
376 | /     get_unread_notification_count(&pool, &recipient_token)
377 | |         .await
378 | |         .map_err(StoryWeaverError::database)
    | |____________________________________________^ the trait 
`From<StoryWeaverError>` is not implemented for `std::string::String`
    |
    = help: the following other types implement trait `From<T>`:
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements 
`From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<AssetKey>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, str>>`
              `std::string::String` implements `From<Uuid>`
              `std::string::String` implements `From<char>`
            and 8 others
    = note: required for `StoryWeaverError` to implement 
`Into<std::string::String>`
note: required by a bound in `StoryWeaverError::database`
   --> src\error.rs:211:24
    |
211 |     pub fn database<S: Into<String>>(message: S) -> Self {
    |                        ^^^^^^^^^^^^ required by this bound in 
`StoryWeaverError::database`

error[E0277]: the trait bound `std::string::String: 
From<StoryWeaverError>` is not satisfied
   --> src\commands\collaboration.rs:378:18
    |
378 |         .map_err(StoryWeaverError::database)
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait 
`From<StoryWeaverError>` is not implemented for `std::string::String`
    |
    = help: the following other types implement trait `From<T>`:
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements 
`From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<AssetKey>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, str>>`
              `std::string::String` implements `From<Uuid>`
              `std::string::String` implements `From<char>`
            and 8 others
    = note: required for `StoryWeaverError` to implement 
`Into<std::string::String>`
note: required by a bound in `StoryWeaverError::database`
   --> src\error.rs:211:24
    |
211 |     pub fn database<S: Into<String>>(message: S) -> Self {
    |                        ^^^^^^^^^^^^ required by this bound in 
`StoryWeaverError::database`

error[E0061]: this function takes 1 argument but 2 arguments were supplied
   --> src\commands\collaboration.rs:388:5
    |
388 |     delete_old_notifications(&pool, days_old)
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ ----- unexpected argument #1 of type 
`&Arc<Pool<Sqlite>>`
    |
note: function defined here
   --> src\commands\collaboration.rs:383:14
    |
383 | pub async fn delete_old_notifications(
    |              ^^^^^^^^^^^^^^^^^^^^^^^^
help: remove the extra argument
    |
388 -     delete_old_notifications(&pool, days_old)
388 +     delete_old_notifications(days_old)
    |

error[E0277]: the trait bound `std::string::String: 
From<StoryWeaverError>` is not satisfied
   --> src\commands\collaboration.rs:388:5
    |
388 | /     delete_old_notifications(&pool, days_old)
389 | |         .await
390 | |         .map_err(StoryWeaverError::database)
    | |____________________________________________^ the trait 
`From<StoryWeaverError>` is not implemented for `std::string::String`
    |
    = help: the following other types implement trait `From<T>`:
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements 
`From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<AssetKey>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, str>>`
              `std::string::String` implements `From<Uuid>`
              `std::string::String` implements `From<char>`
            and 8 others
    = note: required for `StoryWeaverError` to implement 
`Into<std::string::String>`
note: required by a bound in `StoryWeaverError::database`
   --> src\error.rs:211:24
    |
211 |     pub fn database<S: Into<String>>(message: S) -> Self {
    |                        ^^^^^^^^^^^^ required by this bound in 
`StoryWeaverError::database`

error[E0277]: the trait bound `std::string::String: 
From<StoryWeaverError>` is not satisfied
   --> src\commands\collaboration.rs:390:18
    |
390 |         .map_err(StoryWeaverError::database)
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait 
`From<StoryWeaverError>` is not implemented for `std::string::String`
    |
    = help: the following other types implement trait `From<T>`:
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements 
`From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<AssetKey>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, str>>`
              `std::string::String` implements `From<Uuid>`
              `std::string::String` implements `From<char>`
            and 8 others
    = note: required for `StoryWeaverError` to implement 
`Into<std::string::String>`
note: required by a bound in `StoryWeaverError::database`
   --> src\error.rs:211:24
    |
211 |     pub fn database<S: Into<String>>(message: S) -> Self {
    |                        ^^^^^^^^^^^^ required by this bound in 
`StoryWeaverError::database`

error[E0107]: type alias takes 1 generic argument but 2 generic arguments 
were supplied
   --> src\commands\plugin.rs:22:6
    |
22  | ) -> Result<Plugin, StoryWeaverError> {
    |      ^^^^^^       ------------------ help: remove the unnecessary 
generic argument
    |      |
    |      expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> src\error.rs:389:10
    |
389 | pub type Result<T> = std::result::Result<T, StoryWeaverError>;
    |          ^^^^^^ -

error[E0107]: type alias takes 1 generic argument but 2 generic arguments 
were supplied
   --> src\commands\plugin.rs:73:6
    |
73  | ) -> Result<Option<Plugin>, StoryWeaverError> {
    |      ^^^^^^               ------------------ help: remove the 
unnecessary generic argument
    |      |
    |      expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> src\error.rs:389:10
    |
389 | pub type Result<T> = std::result::Result<T, StoryWeaverError>;
    |          ^^^^^^ -

error[E0107]: type alias takes 1 generic argument but 2 generic arguments 
were supplied
   --> src\commands\plugin.rs:91:6
    |
91  | ) -> Result<Vec<PluginSearchResult>, StoryWeaverError> {
    |      ^^^^^^                        ------------------ help: remove 
the unnecessary generic argument
    |      |
    |      expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> src\error.rs:389:10
    |
389 | pub type Result<T> = std::result::Result<T, StoryWeaverError>;
    |          ^^^^^^ -

error[E0107]: type alias takes 1 generic argument but 2 generic arguments 
were supplied
   --> src\commands\plugin.rs:154:6
    |
154 | ) -> Result<(), StoryWeaverError> {
    |      ^^^^^^   ------------------ help: remove the unnecessary 
generic argument
    |      |
    |      expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> src\error.rs:389:10
    |
389 | pub type Result<T> = std::result::Result<T, StoryWeaverError>;
    |          ^^^^^^ -

error[E0107]: type alias takes 1 generic argument but 2 generic arguments 
were supplied
   --> src\commands\plugin.rs:209:6
    |
209 | ) -> Result<(), StoryWeaverError> {
    |      ^^^^^^   ------------------ help: remove the unnecessary 
generic argument
    |      |
    |      expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> src\error.rs:389:10
    |
389 | pub type Result<T> = std::result::Result<T, StoryWeaverError>;
    |          ^^^^^^ -

error[E0107]: type alias takes 1 generic argument but 2 generic arguments 
were supplied
   --> src\commands\plugin.rs:224:6
    |
224 | ) -> Result<PluginExecutionResult, StoryWeaverError> {
    |      ^^^^^^                      ------------------ help: remove 
the unnecessary generic argument
    |      |
    |      expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> src\error.rs:389:10
    |
389 | pub type Result<T> = std::result::Result<T, StoryWeaverError>;
    |          ^^^^^^ -

error[E0107]: type alias takes 1 generic argument but 2 generic arguments 
were supplied
   --> src\commands\plugin.rs:276:6
    |
276 | ) -> Result<(), StoryWeaverError> {
    |      ^^^^^^   ------------------ help: remove the unnecessary 
generic argument
    |      |
    |      expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> src\error.rs:389:10
    |
389 | pub type Result<T> = std::result::Result<T, StoryWeaverError>;
    |          ^^^^^^ -

error[E0107]: type alias takes 1 generic argument but 2 generic arguments 
were supplied
   --> src\commands\plugin.rs:303:6
    |
303 | ) -> Result<Vec<PluginRating>, StoryWeaverError> {
    |      ^^^^^^                  ------------------ help: remove the 
unnecessary generic argument
    |      |
    |      expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> src\error.rs:389:10
    |
389 | pub type Result<T> = std::result::Result<T, StoryWeaverError>;
    |          ^^^^^^ -

error[E0107]: type alias takes 1 generic argument but 2 generic arguments 
were supplied
   --> src\commands\plugin.rs:315:6
    |
315 | ) -> Result<Option<PluginUsageStats>, StoryWeaverError> {
    |      ^^^^^^                         ------------------ help: remove 
the unnecessary generic argument
    |      |
    |      expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> src\error.rs:389:10
    |
389 | pub type Result<T> = std::result::Result<T, StoryWeaverError>;
    |          ^^^^^^ -

error[E0107]: type alias takes 1 generic argument but 2 generic arguments 
were supplied
   --> src\commands\plugin.rs:330:6
    |
330 | ) -> Result<Vec<PluginExecutionHistory>, StoryWeaverError> {
    |      ^^^^^^                            ------------------ help: 
remove the unnecessary generic argument
    |      |
    |      expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> src\error.rs:389:10
    |
389 | pub type Result<T> = std::result::Result<T, StoryWeaverError>;
    |          ^^^^^^ -

error[E0107]: type alias takes 1 generic argument but 2 generic arguments 
were supplied
   --> src\commands\plugin.rs:348:6
    |
348 | ) -> Result<Vec<PluginTemplate>, StoryWeaverError> {
    |      ^^^^^^                    ------------------ help: remove the 
unnecessary generic argument
    |      |
    |      expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> src\error.rs:389:10
    |
389 | pub type Result<T> = std::result::Result<T, StoryWeaverError>;
    |          ^^^^^^ -

error[E0107]: type alias takes 1 generic argument but 2 generic arguments 
were supplied
   --> src\commands\plugin.rs:380:6
    |
380 | ) -> Result<Vec<Plugin>, StoryWeaverError> {
    |      ^^^^^^            ------------------ help: remove the 
unnecessary generic argument
    |      |
    |      expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> src\error.rs:389:10
    |
389 | pub type Result<T> = std::result::Result<T, StoryWeaverError>;
    |          ^^^^^^ -

error[E0107]: type alias takes 1 generic argument but 2 generic arguments 
were supplied
   --> src\commands\plugin.rs:413:6
    |
413 | ) -> Result<(), StoryWeaverError> {
    |      ^^^^^^   ------------------ help: remove the unnecessary 
generic argument
    |      |
    |      expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> src\error.rs:389:10
    |
389 | pub type Result<T> = std::result::Result<T, StoryWeaverError>;
    |          ^^^^^^ -

error[E0107]: type alias takes 1 generic argument but 2 generic arguments 
were supplied
   --> src\commands\plugin.rs:447:6
    |
447 | ) -> Result<Plugin, StoryWeaverError> {
    |      ^^^^^^       ------------------ help: remove the unnecessary 
generic argument
    |      |
    |      expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> src\error.rs:389:10
    |
389 | pub type Result<T> = std::result::Result<T, StoryWeaverError>;
    |          ^^^^^^ -

error[E0107]: type alias takes 1 generic argument but 2 generic arguments 
were supplied
   --> src\commands\plugin.rs:492:6
    |
492 | ) -> Result<PluginTemplate, StoryWeaverError> {
    |      ^^^^^^               ------------------ help: remove the 
unnecessary generic argument
    |      |
    |      expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> src\error.rs:389:10
    |
389 | pub type Result<T> = std::result::Result<T, StoryWeaverError>;
    |          ^^^^^^ -

error[E0599]: no variant or associated item named `invalid_input` found 
for enum `StoryWeaverError` in the current scope
   --> src\commands\plugin.rs:33:43
    |
33  |         _ => return Err(StoryWeaverError::invalid_input("Invalid 
plugin category")),
    |                                           ^^^^^^^^^^^^^ variant or 
associated item not found in `StoryWeaverError`
    |
   ::: src\error.rs:11:1
    |
11  | pub enum StoryWeaverError {
    | ------------------------- variant or associated item 
`invalid_input` not found for this enum
    |
note: if you're trying to build a new `StoryWeaverError` consider using 
one of the following associated functions:
      StoryWeaverError::database
      StoryWeaverError::file_operation
      StoryWeaverError::ai_provider
      StoryWeaverError::internal
      and 4 others
   --> src\error.rs:211:5
    |
211 |     pub fn database<S: Into<String>>(message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
218 |     pub fn file_operation<S: Into<String>>(operation: S, path: S, 
message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
^^^^^^^^^^^^^^^^^
...
227 |     pub fn ai_provider<S: Into<String>>(provider: S, message: S) -> 
Self {
    |     
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
235 |     pub fn internal<S: Into<String>>(message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: there is a variant with a similar name
    |
33  -         _ => return Err(StoryWeaverError::invalid_input("Invalid 
plugin category")),
33  +         _ => return Err(StoryWeaverError::InvalidInput { message: 
/* value */ }),
    |

error[E0599]: no variant or associated item named `invalid_input` found 
for enum `StoryWeaverError` in the current scope
   --> src\commands\plugin.rs:40:43
    |
40  |         _ => return Err(StoryWeaverError::invalid_input("Invalid 
plugin visibility")),
    |                                           ^^^^^^^^^^^^^ variant or 
associated item not found in `StoryWeaverError`
    |
   ::: src\error.rs:11:1
    |
11  | pub enum StoryWeaverError {
    | ------------------------- variant or associated item 
`invalid_input` not found for this enum
    |
note: if you're trying to build a new `StoryWeaverError` consider using 
one of the following associated functions:
      StoryWeaverError::database
      StoryWeaverError::file_operation
      StoryWeaverError::ai_provider
      StoryWeaverError::internal
      and 4 others
   --> src\error.rs:211:5
    |
211 |     pub fn database<S: Into<String>>(message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
218 |     pub fn file_operation<S: Into<String>>(operation: S, path: S, 
message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
^^^^^^^^^^^^^^^^^
...
227 |     pub fn ai_provider<S: Into<String>>(provider: S, message: S) -> 
Self {
    |     
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
235 |     pub fn internal<S: Into<String>>(message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: there is a variant with a similar name
    |
40  -         _ => return Err(StoryWeaverError::invalid_input("Invalid 
plugin visibility")),
40  +         _ => return Err(StoryWeaverError::InvalidInput { message: 
/* value */ }),
    |

error[E0061]: this function takes 12 arguments but 2 arguments were 
supplied
  --> src\commands\plugin.rs:64:5
   |
64 |     create_plugin(&pool, plugin)
   |     ^^^^^^^^^^^^^--------------- multiple arguments are missing
   |
note: expected `String`, found `&Arc<Pool<Sqlite>>`
  --> src\commands\plugin.rs:64:19
   |
64 |     create_plugin(&pool, plugin)
   |                   ^^^^^
   = note: expected struct `std::string::String`
           found reference `&Arc<Pool<Sqlite>>`
note: function defined here
  --> src\commands\plugin.rs:9:14
   |
9  | pub async fn create_plugin(
   |              ^^^^^^^^^^^^^
10 |     name: String,
   |     ------------
11 |     description: String,
12 |     version: String,
   |     ---------------
13 |     creator_id: String,
   |     ------------------
14 |     category: String,
   |     ----------------
15 |     visibility: String,
   |     ------------------
16 |     prompt_template: String,
   |     -----------------------
17 |     variables: Option<Value>,
   |     ------------------------
18 |     ai_model: Option<String>,
   |     ------------------------
19 |     temperature: Option<f64>,
   |     ------------------------
20 |     max_tokens: Option<i32>,
   |     -----------------------
21 |     tags: Option<Vec<String>>,
   |     -------------------------
help: provide the arguments
   |
64 -     create_plugin(&pool, plugin)
64 +     create_plugin(/* std::string::String */, plugin, /* 
std::string::String */, /* std::string::String */, /* std::string::String 
*/, /* std::string::String */, /* std::string::String */, /* 
std::option::Option<JsonValue> */, /* 
std::option::Option<std::string::String> */, /* std::option::Option<f64> 
*/, /* std::option::Option<i32> */, /* 
std::option::Option<Vec<std::string::String>> */)
   |

error[E0308]: mismatched types
   --> src\commands\plugin.rs:76:29
    |
76  |     get_plugin_by_id(&pool, plugin_id)
    |     ----------------        ^^^^^^^^^ expected `&str`, found `i32`
    |     |
    |     arguments to this function are incorrect
    |
note: function defined here
   --> src\database\operations\plugin.rs:146:14
    |
146 | pub async fn get_plugin_by_id(
    |              ^^^^^^^^^^^^^^^^
147 |     pool: &SqlitePool,
148 |     plugin_id: &str,
    |     ---------------

error[E0599]: no variant or associated item named `invalid_input` found 
for enum `StoryWeaverError` in the current scope
   --> src\commands\plugin.rs:106:47
    |
106 |             _ => return 
Err(StoryWeaverError::invalid_input("Invalid plugin category")),
    |                                               ^^^^^^^^^^^^^ variant 
or associated item not found in `StoryWeaverError`
    |
   ::: src\error.rs:11:1
    |
11  | pub enum StoryWeaverError {
    | ------------------------- variant or associated item 
`invalid_input` not found for this enum
    |
note: if you're trying to build a new `StoryWeaverError` consider using 
one of the following associated functions:
      StoryWeaverError::database
      StoryWeaverError::file_operation
      StoryWeaverError::ai_provider
      StoryWeaverError::internal
      and 4 others
   --> src\error.rs:211:5
    |
211 |     pub fn database<S: Into<String>>(message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
218 |     pub fn file_operation<S: Into<String>>(operation: S, path: S, 
message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
^^^^^^^^^^^^^^^^^
...
227 |     pub fn ai_provider<S: Into<String>>(provider: S, message: S) -> 
Self {
    |     
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
235 |     pub fn internal<S: Into<String>>(message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: there is a variant with a similar name
    |
106 -             _ => return 
Err(StoryWeaverError::invalid_input("Invalid plugin category")),
106 +             _ => return Err(StoryWeaverError::InvalidInput { 
message: /* value */ }),
    |

error[E0061]: this function takes 7 arguments but 8 arguments were 
supplied
   --> src\commands\plugin.rs:125:5
    |
125 |     search_plugins(
    |     ^^^^^^^^^^^^^^
...
133 |         offset.unwrap_or(0),
    |         ------------------- unexpected argument #8 of type `i32`
    |
note: expected `Option<String>`, found `&Arc<Pool<Sqlite>>`
   --> src\commands\plugin.rs:126:9
    |
126 |         &pool,
    |         ^^^^^
    = note:   expected enum `std::option::Option<std::string::String>`
            found reference `&Arc<Pool<Sqlite>>`
note: expected `Option<String>`, found `Option<&str>`
   --> src\commands\plugin.rs:127:9
    |
127 |         query.as_deref(),
    |         ^^^^^^^^^^^^^^^^
    = note: expected enum `std::option::Option<std::string::String>`
               found enum `std::option::Option<&str>`
note: expected `Option<Vec<String>>`, found `Option<&str>`
   --> src\commands\plugin.rs:129:9
    |
129 |         author.as_deref(),
    |         ^^^^^^^^^^^^^^^^^
    = note: expected enum `std::option::Option<Vec<std::string::String>>`
               found enum `std::option::Option<&str>`
note: expected `Option<String>`, found `Option<&[String]>`
   --> src\commands\plugin.rs:130:9
    |
130 |         tags.as_deref(),
    |         ^^^^^^^^^^^^^^^
    = note: expected enum `std::option::Option<std::string::String>`
               found enum `std::option::Option<&[std::string::String]>`
note: expected `Option<i32>`, found `i32`
   --> src\commands\plugin.rs:132:9
    |
132 |         limit.unwrap_or(20),
    |         ^^^^^^^^^^^^^^^^^^^
    = note: expected enum `std::option::Option<i32>`
               found type `i32`
note: function defined here
   --> src\commands\plugin.rs:83:14
    |
83  | pub async fn search_plugins(
    |              ^^^^^^^^^^^^^^
84  |     query: Option<String>,
    |     ---------------------
85  |     category: Option<String>,
    |     ------------------------
86  |     author: Option<String>,
87  |     tags: Option<Vec<String>>,
    |     -------------------------
88  |     sort_by: Option<String>,
    |     -----------------------
89  |     limit: Option<i32>,
90  |     offset: Option<i32>,
    |     -------------------
help: try removing the method call
    |
127 -         query.as_deref(),
127 +         query,
    |
help: try wrapping the expression in `Some`
    |
132 |         Some(limit.unwrap_or(20)),
    |         +++++                   +
help: remove the extra argument
    |
126 ~         /* std::option::Option<std::string::String> */,
127 ~         /* std::option::Option<std::string::String> */,
128 |         category_enum,
129 ~         /* std::option::Option<Vec<std::string::String>> */,
130 ~         /* std::option::Option<std::string::String> */,
131 |         sort_order,
132 ~         /* std::option::Option<i32> */,
    |

error[E0599]: no variant or associated item named `invalid_input` found 
for enum `StoryWeaverError` in the current scope
   --> src\commands\plugin.rs:169:47
    |
169 |             _ => return 
Err(StoryWeaverError::invalid_input("Invalid plugin category")),
    |                                               ^^^^^^^^^^^^^ variant 
or associated item not found in `StoryWeaverError`
    |
   ::: src\error.rs:11:1
    |
11  | pub enum StoryWeaverError {
    | ------------------------- variant or associated item 
`invalid_input` not found for this enum
    |
note: if you're trying to build a new `StoryWeaverError` consider using 
one of the following associated functions:
      StoryWeaverError::database
      StoryWeaverError::file_operation
      StoryWeaverError::ai_provider
      StoryWeaverError::internal
      and 4 others
   --> src\error.rs:211:5
    |
211 |     pub fn database<S: Into<String>>(message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
218 |     pub fn file_operation<S: Into<String>>(operation: S, path: S, 
message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
^^^^^^^^^^^^^^^^^
...
227 |     pub fn ai_provider<S: Into<String>>(provider: S, message: S) -> 
Self {
    |     
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
235 |     pub fn internal<S: Into<String>>(message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: there is a variant with a similar name
    |
169 -             _ => return 
Err(StoryWeaverError::invalid_input("Invalid plugin category")),
169 +             _ => return Err(StoryWeaverError::InvalidInput { 
message: /* value */ }),
    |

error[E0599]: no variant or associated item named `invalid_input` found 
for enum `StoryWeaverError` in the current scope
   --> src\commands\plugin.rs:180:47
    |
180 |             _ => return 
Err(StoryWeaverError::invalid_input("Invalid plugin visibility")),
    |                                               ^^^^^^^^^^^^^ variant 
or associated item not found in `StoryWeaverError`
    |
   ::: src\error.rs:11:1
    |
11  | pub enum StoryWeaverError {
    | ------------------------- variant or associated item 
`invalid_input` not found for this enum
    |
note: if you're trying to build a new `StoryWeaverError` consider using 
one of the following associated functions:
      StoryWeaverError::database
      StoryWeaverError::file_operation
      StoryWeaverError::ai_provider
      StoryWeaverError::internal
      and 4 others
   --> src\error.rs:211:5
    |
211 |     pub fn database<S: Into<String>>(message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
218 |     pub fn file_operation<S: Into<String>>(operation: S, path: S, 
message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
^^^^^^^^^^^^^^^^^
...
227 |     pub fn ai_provider<S: Into<String>>(provider: S, message: S) -> 
Self {
    |     
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
235 |     pub fn internal<S: Into<String>>(message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: there is a variant with a similar name
    |
180 -             _ => return 
Err(StoryWeaverError::invalid_input("Invalid plugin visibility")),
180 +             _ => return Err(StoryWeaverError::InvalidInput { 
message: /* value */ }),
    |

error[E0061]: this function takes 12 arguments but 13 arguments were 
supplied
   --> src\commands\plugin.rs:186:5
    |
186 |     update_plugin(
    |     ^^^^^^^^^^^^^
187 |         &pool,
    |         ----- unexpected argument #1 of type `&Arc<Pool<Sqlite>>`
    |
note: expected `Option<String>`, found `Option<&str>`
   --> src\commands\plugin.rs:189:9
    |
189 |         name.as_deref(),
    |         ^^^^^^^^^^^^^^^
    = note: expected enum `std::option::Option<std::string::String>`
               found enum `std::option::Option<&str>`
note: expected `Option<String>`, found `Option<&str>`
   --> src\commands\plugin.rs:190:9
    |
190 |         description.as_deref(),
    |         ^^^^^^^^^^^^^^^^^^^^^^
    = note: expected enum `std::option::Option<std::string::String>`
               found enum `std::option::Option<&str>`
note: expected `Option<String>`, found `Option<&str>`
   --> src\commands\plugin.rs:191:9
    |
191 |         version.as_deref(),
    |         ^^^^^^^^^^^^^^^^^^
    = note: expected enum `std::option::Option<std::string::String>`
               found enum `std::option::Option<&str>`
note: expected `Option<String>`, found `Option<&str>`
   --> src\commands\plugin.rs:194:9
    |
194 |         code.as_deref(),
    |         ^^^^^^^^^^^^^^^
    = note: expected enum `std::option::Option<std::string::String>`
               found enum `std::option::Option<&str>`
note: expected `Option<Value>`, found `Option<&Value>`
   --> src\commands\plugin.rs:195:9
    |
195 |         variables.as_ref(),
    |         ^^^^^^^^^^^^^^^^^^
    = note: expected enum `std::option::Option<JsonValue>`
               found enum `std::option::Option<&JsonValue>`
note: expected `Option<String>`, found `Option<&str>`
   --> src\commands\plugin.rs:196:9
    |
196 |         icon_url.as_deref(),
    |         ^^^^^^^^^^^^^^^^^^^
    = note: expected enum `std::option::Option<std::string::String>`
               found enum `std::option::Option<&str>`
note: expected `Option<String>`, found `Option<&str>`
   --> src\commands\plugin.rs:197:9
    |
197 |         documentation_url.as_deref(),
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = note: expected enum `std::option::Option<std::string::String>`
               found enum `std::option::Option<&str>`
note: expected `Option<String>`, found `Option<&str>`
   --> src\commands\plugin.rs:198:9
    |
198 |         repository_url.as_deref(),
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^
    = note: expected enum `std::option::Option<std::string::String>`
               found enum `std::option::Option<&str>`
note: expected `Option<Vec<String>>`, found `Option<&[String]>`
   --> src\commands\plugin.rs:199:9
    |
199 |         tags.as_deref(),
    |         ^^^^^^^^^^^^^^^
    = note: expected enum `std::option::Option<Vec<std::string::String>>`
               found enum `std::option::Option<&[std::string::String]>`
note: function defined here
   --> src\commands\plugin.rs:141:14
    |
141 | pub async fn update_plugin(
    |              ^^^^^^^^^^^^^
142 |     plugin_id: i32,
143 |     name: Option<String>,
    |     --------------------
144 |     description: Option<String>,
    |     ---------------------------
145 |     version: Option<String>,
    |     -----------------------
146 |     category: Option<String>,
    |     ------------------------
...
149 |     variables: Option<Value>,
    |     ------------------------
150 |     icon_url: Option<String>,
    |     ------------------------
151 |     documentation_url: Option<String>,
    |     ---------------------------------
152 |     repository_url: Option<String>,
    |     ------------------------------
153 |     tags: Option<Vec<String>>,
    |     -------------------------
help: try removing the method call
    |
189 -         name.as_deref(),
189 +         name,
    |
help: try removing the method call
    |
190 -         description.as_deref(),
190 +         description,
    |
help: try removing the method call
    |
191 -         version.as_deref(),
191 +         version,
    |
help: try removing the method call
    |
194 -         code.as_deref(),
194 +         code,
    |
help: try removing the method call
    |
195 -         variables.as_ref(),
195 +         variables,
    |
help: try removing the method call
    |
196 -         icon_url.as_deref(),
196 +         icon_url,
    |
help: try removing the method call
    |
197 -         documentation_url.as_deref(),
197 +         documentation_url,
    |
help: try removing the method call
    |
198 -         repository_url.as_deref(),
198 +         repository_url,
    |
help: try removing the method call
    |
199 -         tags.as_deref(),
199 +         tags,
    |
help: remove the extra argument
    |
187 ~         ,
188 |         plugin_id,
189 ~         /* std::option::Option<std::string::String> */,
190 ~         /* std::option::Option<std::string::String> */,
191 ~         /* std::option::Option<std::string::String> */,
192 ~         /* std::option::Option<std::string::String> */,
193 |         visibility_enum,
194 ~         /* std::option::Option<JsonValue> */,
195 ~         /* std::option::Option<std::string::String> */,
196 ~         /* std::option::Option<std::string::String> */,
197 ~         /* std::option::Option<std::string::String> */,
198 ~         /* std::option::Option<Vec<std::string::String>> */,
    |

error[E0308]: mismatched types
   --> src\commands\plugin.rs:186:5
    |
154 |   ) -> Result<(), StoryWeaverError> {
    |        ---------------------------- expected 
`std::result::Result<(), StoryWeaverError>` because of return type
...
186 | /     update_plugin(
187 | |         &pool,
188 | |         plugin_id,
189 | |         name.as_deref(),
...   |
201 | |     .await
202 | |     .map_err(|e| format!("Failed to update plugin: {}", e))
    | |___________________________________________________________^ 
expected `Result<(), StoryWeaverError>`, found `Result<(), String>`
    |
    = note: expected enum `std::result::Result<_, StoryWeaverError>`
               found enum `std::result::Result<_, std::string::String>`
help: use `?` to coerce and return an appropriate `Err`, and wrap the 
resulting value in `Ok` so the expression remains of type `Result`
    |
186 ~     Ok(update_plugin(
187 |         &pool,
...
201 |     .await
202 ~     .map_err(|e| format!("Failed to update plugin: {}", e))?)
    |

error[E0061]: this function takes 1 argument but 2 arguments were supplied
   --> src\commands\plugin.rs:212:5
    |
212 |     delete_plugin(&pool, plugin_id)
    |     ^^^^^^^^^^^^^ ----- unexpected argument #1 of type 
`&Arc<Pool<Sqlite>>`
    |
note: function defined here
   --> src\commands\plugin.rs:207:14
    |
207 | pub async fn delete_plugin(
    |              ^^^^^^^^^^^^^
help: remove the extra argument
    |
212 -     delete_plugin(&pool, plugin_id)
212 +     delete_plugin(plugin_id)
    |

error[E0308]: mismatched types
   --> src\commands\plugin.rs:228:42
    |
228 |     let plugin = get_plugin_by_id(&pool, plugin_id)
    |                  ----------------        ^^^^^^^^^ expected `&str`, 
found `i32`
    |                  |
    |                  arguments to this function are incorrect
    |
note: function defined here
   --> src\database\operations\plugin.rs:146:14
    |
146 | pub async fn get_plugin_by_id(
    |              ^^^^^^^^^^^^^^^^
147 |     pool: &SqlitePool,
148 |     plugin_id: &str,
    |     ---------------

error[E0599]: no variant or associated item named `not_found` found for 
enum `StoryWeaverError` in the current scope
   --> src\commands\plugin.rs:231:42
    |
231 |         .ok_or_else(|| StoryWeaverError::not_found("Plugin not 
found".to_string()))?;
    |                                          ^^^^^^^^^ variant or 
associated item not found in `StoryWeaverError`
    |
   ::: src\error.rs:11:1
    |
11  | pub enum StoryWeaverError {
    | ------------------------- variant or associated item `not_found` 
not found for this enum
    |
note: if you're trying to build a new `StoryWeaverError` consider using 
one of the following associated functions:
      StoryWeaverError::database
      StoryWeaverError::file_operation
      StoryWeaverError::ai_provider
      StoryWeaverError::internal
      and 4 others
   --> src\error.rs:211:5
    |
211 |     pub fn database<S: Into<String>>(message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
218 |     pub fn file_operation<S: Into<String>>(operation: S, path: S, 
message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
^^^^^^^^^^^^^^^^^
...
227 |     pub fn ai_provider<S: Into<String>>(provider: S, message: S) -> 
Self {
    |     
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
235 |     pub fn internal<S: Into<String>>(message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: there is a variant with a similar name
    |
231 -         .ok_or_else(|| StoryWeaverError::not_found("Plugin not 
found".to_string()))?;
231 +         .ok_or_else(|| StoryWeaverError::NotFound { resource_type: 
/* value */, id: /* value */ })?;
    |

error[E0061]: this function takes 7 arguments but 3 arguments were 
supplied
   --> src\commands\plugin.rs:257:5
    |
257 |     record_plugin_execution(&pool, &request, &result)
    |     ^^^^^^^^^^^^^^^^^^^^^^^-------------------------- multiple 
arguments are missing
    |
note: expected `i32`, found `&Arc<Pool<Sqlite>>`
   --> src\commands\plugin.rs:257:29
    |
257 |     record_plugin_execution(&pool, &request, &result)
    |                             ^^^^^
    = note:   expected type `i32`
            found reference `&Arc<Pool<Sqlite>>`
note: function defined here
   --> src\commands\plugin.rs:405:14
    |
405 | pub async fn record_plugin_execution(
    |              ^^^^^^^^^^^^^^^^^^^^^^^
406 |     plugin_id: i32,
    |     --------------
...
409 |     execution_time_ms: i32,
    |     ----------------------
410 |     success: bool,
    |     -------------
411 |     error_message: Option<String>,
    |     -----------------------------
412 |     user_id: Option<String>,
    |     -----------------------
help: provide the arguments
    |
257 -     record_plugin_execution(&pool, &request, &result)
257 +     record_plugin_execution(/* i32 */, &request, &result, /* i32 
*/, /* bool */, /* std::option::Option<std::string::String> */, /* 
std::option::Option<std::string::String> */)
    |

error[E0061]: this function takes 3 arguments but 2 arguments were 
supplied
   --> src\commands\plugin.rs:262:11
    |
262 |           update_plugin_usage_stats(&*pool, &plugin_id)
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^-------------------- argument #3 
of type `bool` is missing
    |
note: function defined here
   --> src\database\operations\plugin.rs:427:14
    |
427 | pub async fn update_plugin_usage_stats(
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^
...
430 |     success: bool,
    |     -------------
help: provide the argument
    |
262 |           update_plugin_usage_stats(&*pool, &plugin_id, /* bool */)
    |                                                       ++++++++++++

error[E0599]: no variant or associated item named `invalid_input` found 
for enum `StoryWeaverError` in the current scope
   --> src\commands\plugin.rs:280:38
    |
280 |         return Err(StoryWeaverError::invalid_input("Rating must be 
between 1 and 5"));
    |                                      ^^^^^^^^^^^^^ variant or 
associated item not found in `StoryWeaverError`
    |
   ::: src\error.rs:11:1
    |
11  | pub enum StoryWeaverError {
    | ------------------------- variant or associated item 
`invalid_input` not found for this enum
    |
note: if you're trying to build a new `StoryWeaverError` consider using 
one of the following associated functions:
      StoryWeaverError::database
      StoryWeaverError::file_operation
      StoryWeaverError::ai_provider
      StoryWeaverError::internal
      and 4 others
   --> src\error.rs:211:5
    |
211 |     pub fn database<S: Into<String>>(message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
218 |     pub fn file_operation<S: Into<String>>(operation: S, path: S, 
message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
^^^^^^^^^^^^^^^^^
...
227 |     pub fn ai_provider<S: Into<String>>(provider: S, message: S) -> 
Self {
    |     
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
235 |     pub fn internal<S: Into<String>>(message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: there is a variant with a similar name
    |
280 -         return Err(StoryWeaverError::invalid_input("Rating must be 
between 1 and 5"));
280 +         return Err(StoryWeaverError::InvalidInput { message: /* 
value */ });
    |

error[E0061]: this function takes 5 arguments but 2 arguments were 
supplied
   --> src\commands\plugin.rs:292:5
    |
292 |     create_plugin_rating(&pool, plugin_rating)
    |     ^^^^^^^^^^^^^^^^^^^^---------------------- three arguments of 
type `&str`, `i32`, and `std::option::Option<&str>` are missing
    |
note: function defined here
   --> src\database\operations\plugin.rs:318:14
    |
318 | pub async fn create_plugin_rating(
    |              ^^^^^^^^^^^^^^^^^^^^
...
321 |     user_identifier: &str,
    |     ---------------------
322 |     rating: i32,
    |     -----------
323 |     review: Option<&str>,
    |     --------------------
help: provide the arguments
    |
292 |     create_plugin_rating(&pool, plugin_rating, /* &str */, /* i32 
*/, /* std::option::Option<&str> */)
    |                                              
++++++++++++++++++++++++++++++++++++++++++++++++++++++++

error[E0308]: mismatched types
   --> src\commands\plugin.rs:292:5
    |
276 |   ) -> Result<(), StoryWeaverError> {
    |        ---------------------------- expected 
`std::result::Result<(), StoryWeaverError>` because of return type
...
292 | /     create_plugin_rating(&pool, plugin_rating)
293 | |         .await
294 | |         .map_err(|e| StoryWeaverError::database(format!("Failed 
to rate plugin: {}", e)))
    | |___________________________________________________________________
______________________^ expected `Result<(), StoryWeaverError>`, found 
`Result<PluginRating, StoryWeaverError>`
    |
    = note: expected enum `std::result::Result<(), _>`
               found enum 
`std::result::Result<database::models::plugin::PluginRating, _>`

error[E0061]: this function takes 3 arguments but 4 arguments were 
supplied
   --> src\commands\plugin.rs:306:5
    |
306 |     get_plugin_ratings(&pool, plugin_id, limit.unwrap_or(10), 
offset.unwrap_or(0))
    |     ^^^^^^^^^^^^^^^^^^ -----  ------------------------------  
------------------- unexpected argument #4 of type `i32`
    |                        |      |          |
    |                        |      |          unexpected argument #3 of 
type `i32`
    |                        |      two arguments of type 
`std::option::Option<i32>` and `std::option::Option<i32>` are missing
    |                        unexpected argument #1 of type 
`&Arc<Pool<Sqlite>>`
    |
note: function defined here
   --> src\commands\plugin.rs:299:14
    |
299 | pub async fn get_plugin_ratings(
    |              ^^^^^^^^^^^^^^^^^^
300 |     plugin_id: i32,
301 |     limit: Option<i32>,
    |     ------------------
302 |     offset: Option<i32>,
    |     -------------------
help: did you mean
    |
306 -     get_plugin_ratings(&pool, plugin_id, limit.unwrap_or(10), 
offset.unwrap_or(0))
306 +     get_plugin_ratings(plugin_id, /* std::option::Option<i32> */, 
/* std::option::Option<i32> */)
    |

error[E0061]: this function takes 1 argument but 2 arguments were supplied
   --> src\commands\plugin.rs:318:5
    |
318 |     get_plugin_usage_stats(&pool, plugin_id)
    |     ^^^^^^^^^^^^^^^^^^^^^^ ----- unexpected argument #1 of type 
`&Arc<Pool<Sqlite>>`
    |
note: function defined here
   --> src\commands\plugin.rs:313:14
    |
313 | pub async fn get_plugin_usage_stats(
    |              ^^^^^^^^^^^^^^^^^^^^^^
help: remove the extra argument
    |
318 -     get_plugin_usage_stats(&pool, plugin_id)
318 +     get_plugin_usage_stats(plugin_id)
    |

error[E0061]: this function takes 4 arguments but 5 arguments were 
supplied
   --> src\commands\plugin.rs:333:5
    |
333 |       get_plugin_execution_history(
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
334 |           &pool,
    |           ----- unexpected argument #1 of type `&Arc<Pool<Sqlite>>`
335 |           plugin_id,
336 | /         user_id.as_deref(),
337 | |         limit.unwrap_or(20),
    | |         -------------------
    | |_________|_________________|
    |           |                 two arguments of type 
`std::option::Option<i32>` and `std::option::Option<i32>` are missing
    |           unexpected argument #4 of type `i32`
338 |           offset.unwrap_or(0),
    |           ------------------- unexpected argument #5 of type `i32`
    |
note: expected `Option<String>`, found `Option<&str>`
   --> src\commands\plugin.rs:336:9
    |
336 |         user_id.as_deref(),
    |         ^^^^^^^^^^^^^^^^^^
    = note: expected enum `std::option::Option<std::string::String>`
               found enum `std::option::Option<&str>`
note: function defined here
   --> src\commands\plugin.rs:325:14
    |
325 | pub async fn get_plugin_execution_history(
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
326 |     plugin_id: Option<i32>,
327 |     user_id: Option<String>,
    |     -----------------------
328 |     limit: Option<i32>,
    |     ------------------
329 |     offset: Option<i32>,
    |     -------------------
help: try removing the method call
    |
336 -         user_id.as_deref(),
336 +         user_id,
    |
help: did you mean
    |
333 -     get_plugin_execution_history(
334 -         &pool,
335 -         plugin_id,
336 -         user_id.as_deref(),
337 -         limit.unwrap_or(20),
338 -         offset.unwrap_or(0),
339 -     )
333 +     get_plugin_execution_history(plugin_id, /* 
std::option::Option<std::string::String> */, /* std::option::Option<i32> 
*/, /* std::option::Option<i32> */)
    |

error[E0599]: no variant or associated item named `invalid_input` found 
for enum `StoryWeaverError` in the current scope
   --> src\commands\plugin.rs:363:47
    |
363 |             _ => return 
Err(StoryWeaverError::invalid_input("Invalid plugin category")),
    |                                               ^^^^^^^^^^^^^ variant 
or associated item not found in `StoryWeaverError`
    |
   ::: src\error.rs:11:1
    |
11  | pub enum StoryWeaverError {
    | ------------------------- variant or associated item 
`invalid_input` not found for this enum
    |
note: if you're trying to build a new `StoryWeaverError` consider using 
one of the following associated functions:
      StoryWeaverError::database
      StoryWeaverError::file_operation
      StoryWeaverError::ai_provider
      StoryWeaverError::internal
      and 4 others
   --> src\error.rs:211:5
    |
211 |     pub fn database<S: Into<String>>(message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
218 |     pub fn file_operation<S: Into<String>>(operation: S, path: S, 
message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
^^^^^^^^^^^^^^^^^
...
227 |     pub fn ai_provider<S: Into<String>>(provider: S, message: S) -> 
Self {
    |     
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
235 |     pub fn internal<S: Into<String>>(message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: there is a variant with a similar name
    |
363 -             _ => return 
Err(StoryWeaverError::invalid_input("Invalid plugin category")),
363 +             _ => return Err(StoryWeaverError::InvalidInput { 
message: /* value */ }),
    |

error[E0061]: this function takes 1 argument but 2 arguments were supplied
   --> src\commands\plugin.rs:369:5
    |
369 |     get_plugin_templates(&pool, category_enum)
    |     ^^^^^^^^^^^^^^^^^^^^        ------------- unexpected argument #2
    |
note: expected `Option<String>`, found `&Arc<Pool<Sqlite>>`
   --> src\commands\plugin.rs:369:26
    |
369 |     get_plugin_templates(&pool, category_enum)
    |                          ^^^^^
    = note:   expected enum `std::option::Option<std::string::String>`
            found reference `&Arc<Pool<Sqlite>>`
note: function defined here
   --> src\commands\plugin.rs:346:14
    |
346 | pub async fn get_plugin_templates(
    |              ^^^^^^^^^^^^^^^^^^^^
347 |     category: Option<String>,
    |     ------------------------
help: remove the extra argument
    |
369 -     get_plugin_templates(&pool, category_enum)
369 +     get_plugin_templates(/* 
std::option::Option<std::string::String> */)
    |

error[E0599]: no variant or associated item named `invalid_input` found 
for enum `StoryWeaverError` in the current scope
   --> src\commands\plugin.rs:392:47
    |
392 |             _ => return 
Err(StoryWeaverError::invalid_input("Invalid plugin category")),
    |                                               ^^^^^^^^^^^^^ variant 
or associated item not found in `StoryWeaverError`
    |
   ::: src\error.rs:11:1
    |
11  | pub enum StoryWeaverError {
    | ------------------------- variant or associated item 
`invalid_input` not found for this enum
    |
note: if you're trying to build a new `StoryWeaverError` consider using 
one of the following associated functions:
      StoryWeaverError::database
      StoryWeaverError::file_operation
      StoryWeaverError::ai_provider
      StoryWeaverError::internal
      and 4 others
   --> src\error.rs:211:5
    |
211 |     pub fn database<S: Into<String>>(message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
218 |     pub fn file_operation<S: Into<String>>(operation: S, path: S, 
message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
^^^^^^^^^^^^^^^^^
...
227 |     pub fn ai_provider<S: Into<String>>(provider: S, message: S) -> 
Self {
    |     
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
235 |     pub fn internal<S: Into<String>>(message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: there is a variant with a similar name
    |
392 -             _ => return 
Err(StoryWeaverError::invalid_input("Invalid plugin category")),
392 +             _ => return Err(StoryWeaverError::InvalidInput { 
message: /* value */ }),
    |

error[E0061]: this function takes 3 arguments but 4 arguments were 
supplied
   --> src\commands\plugin.rs:398:5
    |
398 |     get_plugins(&pool, category_enum, limit.unwrap_or(20), 
offset.unwrap_or(0))
    |     ^^^^^^^^^^^                                            
------------------- unexpected argument #4 of type `i32`
    |
note: expected `Option<String>`, found `&Arc<Pool<Sqlite>>`
   --> src\commands\plugin.rs:398:17
    |
398 |     get_plugins(&pool, category_enum, limit.unwrap_or(20), 
offset.unwrap_or(0))
    |                 ^^^^^
    = note:   expected enum `std::option::Option<std::string::String>`
            found reference `&Arc<Pool<Sqlite>>`
note: expected `Option<i32>`, found `i32`
   --> src\commands\plugin.rs:398:39
    |
398 |     get_plugins(&pool, category_enum, limit.unwrap_or(20), 
offset.unwrap_or(0))
    |                                       ^^^^^^^^^^^^^^^^^^^
    = note: expected enum `std::option::Option<i32>`
               found type `i32`
note: function defined here
   --> src\commands\plugin.rs:376:14
    |
376 | pub async fn get_plugins(
    |              ^^^^^^^^^^^
377 |     category: Option<String>,
    |     ------------------------
378 |     limit: Option<i32>,
379 |     offset: Option<i32>,
    |     -------------------
help: try wrapping the expression in `Some`
    |
398 |     get_plugins(&pool, category_enum, Some(limit.unwrap_or(20)), 
offset.unwrap_or(0))
    |                                       +++++                   +
help: remove the extra argument
    |
398 -     get_plugins(&pool, category_enum, limit.unwrap_or(20), 
offset.unwrap_or(0))
398 +     get_plugins(/* std::option::Option<std::string::String> */, 
category_enum, /* std::option::Option<i32> */)
    |

error[E0061]: this function takes 7 arguments but 3 arguments were 
supplied
   --> src\commands\plugin.rs:436:5
    |
436 |     record_plugin_execution(&pool, &request, &result)
    |     ^^^^^^^^^^^^^^^^^^^^^^^-------------------------- multiple 
arguments are missing
    |
note: expected `i32`, found `&Arc<Pool<Sqlite>>`
   --> src\commands\plugin.rs:436:29
    |
436 |     record_plugin_execution(&pool, &request, &result)
    |                             ^^^^^
    = note:   expected type `i32`
            found reference `&Arc<Pool<Sqlite>>`
note: function defined here
   --> src\commands\plugin.rs:405:14
    |
405 | pub async fn record_plugin_execution(
    |              ^^^^^^^^^^^^^^^^^^^^^^^
406 |     plugin_id: i32,
    |     --------------
...
409 |     execution_time_ms: i32,
    |     ----------------------
410 |     success: bool,
    |     -------------
411 |     error_message: Option<String>,
    |     -----------------------------
412 |     user_id: Option<String>,
    |     -----------------------
help: provide the arguments
    |
436 -     record_plugin_execution(&pool, &request, &result)
436 +     record_plugin_execution(/* i32 */, &request, &result, /* i32 
*/, /* bool */, /* std::option::Option<std::string::String> */, /* 
std::option::Option<std::string::String> */)
    |

error[E0599]: no variant or associated item named `not_found` found for 
enum `StoryWeaverError` in the current scope
   --> src\commands\plugin.rs:454:42
    |
454 |         .ok_or_else(|| StoryWeaverError::not_found("Plugin template 
not found".to_string()))?;
    |                                          ^^^^^^^^^ variant or 
associated item not found in `StoryWeaverError`
    |
   ::: src\error.rs:11:1
    |
11  | pub enum StoryWeaverError {
    | ------------------------- variant or associated item `not_found` 
not found for this enum
    |
note: if you're trying to build a new `StoryWeaverError` consider using 
one of the following associated functions:
      StoryWeaverError::database
      StoryWeaverError::file_operation
      StoryWeaverError::ai_provider
      StoryWeaverError::internal
      and 4 others
   --> src\error.rs:211:5
    |
211 |     pub fn database<S: Into<String>>(message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
218 |     pub fn file_operation<S: Into<String>>(operation: S, path: S, 
message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
^^^^^^^^^^^^^^^^^
...
227 |     pub fn ai_provider<S: Into<String>>(provider: S, message: S) -> 
Self {
    |     
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
235 |     pub fn internal<S: Into<String>>(message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: there is a variant with a similar name
    |
454 -         .ok_or_else(|| StoryWeaverError::not_found("Plugin template 
not found".to_string()))?;
454 +         .ok_or_else(|| StoryWeaverError::NotFound { resource_type: 
/* value */, id: /* value */ })?;
    |

error[E0599]: no variant or associated item named `invalid_input` found 
for enum `StoryWeaverError` in the current scope
   --> src\commands\plugin.rs:503:43
    |
503 |         _ => return Err(StoryWeaverError::invalid_input("Invalid 
plugin category")),
    |                                           ^^^^^^^^^^^^^ variant or 
associated item not found in `StoryWeaverError`
    |
   ::: src\error.rs:11:1
    |
11  | pub enum StoryWeaverError {
    | ------------------------- variant or associated item 
`invalid_input` not found for this enum
    |
note: if you're trying to build a new `StoryWeaverError` consider using 
one of the following associated functions:
      StoryWeaverError::database
      StoryWeaverError::file_operation
      StoryWeaverError::ai_provider
      StoryWeaverError::internal
      and 4 others
   --> src\error.rs:211:5
    |
211 |     pub fn database<S: Into<String>>(message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
218 |     pub fn file_operation<S: Into<String>>(operation: S, path: S, 
message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
^^^^^^^^^^^^^^^^^
...
227 |     pub fn ai_provider<S: Into<String>>(provider: S, message: S) -> 
Self {
    |     
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
235 |     pub fn internal<S: Into<String>>(message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: there is a variant with a similar name
    |
503 -         _ => return Err(StoryWeaverError::invalid_input("Invalid 
plugin category")),
503 +         _ => return Err(StoryWeaverError::InvalidInput { message: 
/* value */ }),
    |

error[E0308]: mismatched types
   --> src\commands\plugin.rs:518:28
    |
518 |     create_plugin_template(&pool, &template.name, 
&template.description, template.category, &template.template_code, 
template.variables_s...
    |     ---------------------- ^^^^^ expected `String`, found 
`&Arc<Pool<Sqlite>>`
    |     |
    |     arguments to this function are incorrect
    |
    = note: expected struct `std::string::String`
            found reference `&Arc<Pool<Sqlite>>`
note: function defined here
   --> src\commands\plugin.rs:485:14
    |
485 | pub async fn create_plugin_template(
    |              ^^^^^^^^^^^^^^^^^^^^^^
486 |     name: String,
    |     ------------

error[E0599]: no method named `analyze_query_patterns` found for struct 
`OptimizationManager` in the current scope
  --> src\commands\optimization_commands.rs:96:10
   |
95 |       let recommendations = optimization_manager
   |  ___________________________-
96 | |         .analyze_query_patterns()
   | |         -^^^^^^^^^^^^^^^^^^^^^^ method not found in 
`OptimizationManager`
   | |_________|
   |
   |
  ::: src\database\optimization\mod.rs:31:1
   |
31 |   pub struct OptimizationManager {
   |   ------------------------------ method `analyze_query_patterns` not 
found for this struct

warning: unused variable: `database_url`
  --> src\database\mod.rs:34:9
   |
34 |     let database_url = format!("sqlite:{}", db_path.display());
   |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an 
underscore: `_database_url`

error[E0599]: no method named `unwrap_or_default` found for struct 
`std::string::String` in the current scope
   --> src\database\operations\document_version_ops.rs:112:39
    |
112 |             content: document.content.unwrap_or_default(),
    |                                       ^^^^^^^^^^^^^^^^^ method not 
found in `String`

error[E0599]: no method named `unwrap_or` found for type `i64` in the 
current scope
   --> src\database\operations\document_version_ops.rs:113:45
    |
113 |             word_count: document.word_count.unwrap_or(0) as i32,
    |                                             ^^^^^^^^^ method not 
found in `i64`

warning: unused variable: `severity`
   --> src\database\operations\series_consistency_ops.rs:445:9
    |
445 |         severity: ConflictSeverity,
    |         ^^^^^^^^ help: if this is intentional, prefix it with an 
underscore: `_severity`

warning: unused variable: `severity`
   --> src\database\operations\series_consistency_ops.rs:449:47
    |
449 |             .filter(|c| matches!(&c.severity, severity))
    |                                               ^^^^^^^^ help: if 
this is intentional, prefix it with an underscore: `_severity`

error[E0605]: non-primitive cast: `std::option::Option<i64>` as `i32`
  --> src\database\operations\ai_provider_ops.rs:89:22
   |
89 |             id: Some(r.id as i32),
   |                      ^^^^^^^^^^^ an `as` expression can be used to 
convert enum types to numeric types only if the enum type is unit-only or 
field-less
   |
   = note: see 
https://doc.rust-lang.org/reference/items/enumerations.html#casting for 
more information

error[E0605]: non-primitive cast: `std::option::Option<i64>` as `i32`
   --> src\database\operations\ai_provider_ops.rs:108:22
    |
108 |             id: Some(r.id as i32),
    |                      ^^^^^^^^^^^ an `as` expression can be used to 
convert enum types to numeric types only if the enum type is unit-only or 
field-less
    |
    = note: see 
https://doc.rust-lang.org/reference/items/enumerations.html#casting for 
more information

error[E0308]: mismatched types
    --> src\database\operations\plugin.rs:374:50
     |
374  |     let avg_rating = result.avg_rating.unwrap_or(0.0);
     |                                        --------- ^^^ expected 
`i64`, found floating-point number
     |                                        |
     |                                        arguments to this method 
are incorrect
     |
help: the return type of this call is `{float}` due to the type of the 
argument passed
    --> src\database\operations\plugin.rs:374:22
     |
374  |     let avg_rating = result.avg_rating.unwrap_or(0.0);
     |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^---^
     |                                                  |
     |                                                  this argument 
influences the return type of `unwrap_or`
note: method defined here
    --> C:\Users\jjgor\.rustup\toolchains\stable-x86_64-pc-windows-msvc\li
b/rustlib/src/rust\library\core\src\option.rs:1023:12
     |
1023 |     pub fn unwrap_or(self, default: T) -> T {
     |            ^^^^^^^^^

warning: unused variable: `sql`
   --> src\database\operations\plugin.rs:655:13
    |
655 |         let sql = format!("UPDATE plugins SET {} WHERE id = ?", 
updates.join(", "));
    |             ^^^ help: if this is intentional, prefix it with an 
underscore: `_sql`

error[E0308]: mismatched types
   --> src\database\operations\canvas.rs:351:9
    |
351 |         id,
    |         ^^ expected `i32`, found `String`

error[E0560]: struct `database::models::canvas::OutlineTemplate` has no 
field named `structure`
   --> src\database\operations\canvas.rs:355:9
    |
355 |         structure,
    |         ^^^^^^^^^ `database::models::canvas::OutlineTemplate` does 
not have this field
    |
    = note: available fields are: `template_data`, `is_official`

error[E0560]: struct `database::models::canvas::OutlineTemplate` has no 
field named `is_public`
   --> src\database\operations\canvas.rs:356:9
    |
356 |         is_public,
    |         ^^^^^^^^^ `database::models::canvas::OutlineTemplate` does 
not have this field
    |
    = note: available fields are: `template_data`, `is_official`

error[E0560]: struct `database::models::canvas::OutlineTemplate` has no 
field named `usage_count`
   --> src\database\operations\canvas.rs:357:9
    |
357 |         usage_count: 0,
    |         ^^^^^^^^^^^ `database::models::canvas::OutlineTemplate` 
does not have this field
    |
    = note: available fields are: `template_data`, `is_official`

error[E0560]: struct `database::models::canvas::OutlineTemplate` has no 
field named `created_by`
   --> src\database\operations\canvas.rs:358:9
    |
358 |         created_by: created_by.map(|s| s.to_string()),
    |         ^^^^^^^^^^ `database::models::canvas::OutlineTemplate` does 
not have this field
    |
    = note: available fields are: `template_data`, `is_official`

error[E0560]: struct `database::models::canvas::OutlineTemplate` has no 
field named `updated_at`
   --> src\database\operations\canvas.rs:360:9
    |
360 |         updated_at: now,
    |         ^^^^^^^^^^ `database::models::canvas::OutlineTemplate` does 
not have this field
    |
    = note: available fields are: `template_data`, `is_official`

error[E0308]: mismatched types
   --> src\database\operations\canvas.rs:553:20
    |
553 |         canvas_id: canvas_id.to_string(),
    |                    ^^^^^^^^^^^^^^^^^^^^^ expected `i32`, found 
`String`

error[E0560]: struct 
`database::models::canvas::CanvasCollaborationSession` has no field named 
`max_participants`
   --> src\database\operations\canvas.rs:556:9
    |
556 |         max_participants,
    |         ^^^^^^^^^^^^^^^^ unknown field
    |
help: a field with a similar name exists
    |
556 -         max_participants,
556 +         participants,
    |

error[E0560]: struct 
`database::models::canvas::CanvasCollaborationSession` has no field named 
`current_participants`
   --> src\database\operations\canvas.rs:557:9
    |
557 |         current_participants: 0,
    |         ^^^^^^^^^^^^^^^^^^^^ 
`database::models::canvas::CanvasCollaborationSession` does not have this 
field
    |
    = note: available fields are: `id`, `host_user`, `participants`, 
`updated_at`

error[E0277]: the trait bound `i32: From<std::option::Option<i64>>` is 
not satisfied
   --> src\database\operations\canvas.rs:568:18
    |
568 |       let result = sqlx::query_as!(
    |  __________________^
569 | |         CanvasCollaborationSession,
570 | |         r#"
571 | |         SELECT id, canvas_id, session_token, host_user, 
participants,
...   |
576 | |         session_token
577 | |     )
    | |_____^ the trait `From<std::option::Option<i64>>` is not 
implemented for `i32`
    |
    = help: the following other types implement trait `From<T>`:
              `i32` implements `From<bool>`
              `i32` implements `From<deranged::RangedI32<MIN, MAX>>`
              `i32` implements `From<dpi::LogicalUnit<P>>`
              `i32` implements `From<dpi::PhysicalUnit<P>>`
              `i32` implements `From<i16>`
              `i32` implements `From<i8>`
              `i32` implements 
`From<miniz_oxide::deflate::core::CompressionStrategy>`
              `i32` implements `From<notify_rust::timeout::Timeout>`
            and 10 others
    = note: required for `std::option::Option<i64>` to implement 
`Into<i32>`
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query_as` (in Nightly builds, run with -Z macro-backtrace 
for more info)

error[E0277]: the trait bound `i32: From<i64>` is not satisfied
   --> src\database\operations\canvas.rs:568:18
    |
568 |       let result = sqlx::query_as!(
    |  __________________^
569 | |         CanvasCollaborationSession,
570 | |         r#"
571 | |         SELECT id, canvas_id, session_token, host_user, 
participants,
...   |
576 | |         session_token
577 | |     )
    | |_____^ the trait `From<i64>` is not implemented for `i32`
    |
    = help: the following other types implement trait `From<T>`:
              `i32` implements `From<bool>`
              `i32` implements `From<deranged::RangedI32<MIN, MAX>>`
              `i32` implements `From<dpi::LogicalUnit<P>>`
              `i32` implements `From<dpi::PhysicalUnit<P>>`
              `i32` implements `From<i16>`
              `i32` implements `From<i8>`
              `i32` implements 
`From<miniz_oxide::deflate::core::CompressionStrategy>`
              `i32` implements `From<notify_rust::timeout::Timeout>`
            and 10 others
    = note: required for `i64` to implement `Into<i32>`
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query_as` (in Nightly builds, run with -Z macro-backtrace 
for more info)

error[E0277]: the trait bound `std::string::String: 
From<std::option::Option<std::string::String>>` is not satisfied
   --> src\database\operations\canvas.rs:568:18
    |
568 |       let result = sqlx::query_as!(
    |  __________________^
569 | |         CanvasCollaborationSession,
570 | |         r#"
571 | |         SELECT id, canvas_id, session_token, host_user, 
participants,
...   |
576 | |         session_token
577 | |     )
    | |_____^ the trait `From<std::option::Option<std::string::String>>` 
is not implemented for `std::string::String`
    |
    = help: the following other types implement trait `From<T>`:
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements 
`From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<AssetKey>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, str>>`
              `std::string::String` implements `From<Uuid>`
              `std::string::String` implements `From<char>`
            and 8 others
    = note: required for `std::option::Option<std::string::String>` to 
implement `Into<std::string::String>`
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query_as` (in Nightly builds, run with -Z macro-backtrace 
for more info)

error[E0277]: the trait bound `bool: From<std::option::Option<bool>>` is 
not satisfied
   --> src\database\operations\canvas.rs:568:18
    |
568 |       let result = sqlx::query_as!(
    |  __________________^
569 | |         CanvasCollaborationSession,
570 | |         r#"
571 | |         SELECT id, canvas_id, session_token, host_user, 
participants,
...   |
576 | |         session_token
577 | |     )
    | |_____^ the trait `From<std::option::Option<bool>>` is not 
implemented for `bool`
    |
    = help: the following other types implement trait `From<T>`:
              `bool` implements `From<&windows::Win32::Foundation::BOOL>`
              `bool` implements `From<&windows::Win32::Foundation::BOOL>`
              `bool` implements 
`From<&windows::Win32::Foundation::BOOLEAN>`
              `bool` implements 
`From<&windows::Win32::Foundation::BOOLEAN>`
              `bool` implements 
`From<&windows::Win32::Foundation::VARIANT_BOOL>`
              `bool` implements 
`From<&windows::Win32::Foundation::VARIANT_BOOL>`
              `bool` implements 
`From<&windows::Win32::Foundation::VARIANT_BOOL>`
              `bool` implements `From<&windows_result::bool::BOOL>`
            and 21 others
    = note: required for `std::option::Option<bool>` to implement 
`Into<bool>`
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query_as` (in Nightly builds, run with -Z macro-backtrace 
for more info)

error[E0277]: the trait bound `DateTime<Utc>: 
From<std::option::Option<NaiveDateTime>>` is not satisfied
   --> src\database\operations\canvas.rs:568:18
    |
568 |       let result = sqlx::query_as!(
    |  __________________^
569 | |         CanvasCollaborationSession,
570 | |         r#"
571 | |         SELECT id, canvas_id, session_token, host_user, 
participants,
...   |
576 | |         session_token
577 | |     )
    | |_____^ the trait `From<std::option::Option<NaiveDateTime>>` is not 
implemented for `DateTime<Utc>`
    |
    = help: the following other types implement trait `From<T>`:
              `DateTime<Utc>` implements `From<DateTime<FixedOffset>>`
              `DateTime<Utc>` implements `From<DateTime<chrono::Local>>`
              `DateTime<Utc>` implements `From<SystemTime>`
    = note: required for `std::option::Option<NaiveDateTime>` to 
implement `Into<DateTime<Utc>>`
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query_as` (in Nightly builds, run with -Z macro-backtrace 
for more info)

error[E0277]: the trait bound `std::option::Option<DateTime<Utc>>: 
From<std::option::Option<NaiveDateTime>>` is not satisfied
   --> src\database\operations\canvas.rs:568:18
    |
568 |       let result = sqlx::query_as!(
    |  __________________^
569 | |         CanvasCollaborationSession,
570 | |         r#"
571 | |         SELECT id, canvas_id, session_token, host_user, 
participants,
...   |
576 | |         session_token
577 | |     )
    | |_____^ the trait `From<std::option::Option<NaiveDateTime>>` is not 
implemented for `std::option::Option<DateTime<Utc>>`
    |
    = help: the following other types implement trait `From<T>`:
              `std::option::Option<&T>` implements 
`From<&std::option::Option<T>>`
              `std::option::Option<&mut T>` implements `From<&mut 
std::option::Option<T>>`
              
`std::option::Option<&tracing_core::metadata::Metadata<'_>>` implements 
`From<&tracing_core::span::Current>`
              `std::option::Option<&tracing_core::span::Id>` implements 
`From<&tracing::span::EnteredSpan>`
              `std::option::Option<&tracing_core::span::Id>` implements 
`From<&tracing::span::Span>`
              `std::option::Option<&tracing_core::span::Id>` implements 
`From<&tracing_core::span::Current>`
              `std::option::Option<T>` implements `From<T>`
              `std::option::Option<T>` implements 
`From<subtle::CtOption<T>>`
            and 19 others
    = note: required for `std::option::Option<NaiveDateTime>` to 
implement `Into<std::option::Option<DateTime<Utc>>>`
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query_as` (in Nightly builds, run with -Z macro-backtrace 
for more info)

error[E0277]: the trait bound `i32: From<std::option::Option<i64>>` is 
not satisfied
   --> src\database\operations\canvas.rs:591:18
    |
591 |       let result = sqlx::query_as!(
    |  __________________^
592 | |         CanvasCollaborationSession,
593 | |         r#"
594 | |         SELECT id, canvas_id, session_token, host_user, 
participants,
...   |
601 | |         canvas_id_int
602 | |     )
    | |_____^ the trait `From<std::option::Option<i64>>` is not 
implemented for `i32`
    |
    = help: the following other types implement trait `From<T>`:
              `i32` implements `From<bool>`
              `i32` implements `From<deranged::RangedI32<MIN, MAX>>`
              `i32` implements `From<dpi::LogicalUnit<P>>`
              `i32` implements `From<dpi::PhysicalUnit<P>>`
              `i32` implements `From<i16>`
              `i32` implements `From<i8>`
              `i32` implements 
`From<miniz_oxide::deflate::core::CompressionStrategy>`
              `i32` implements `From<notify_rust::timeout::Timeout>`
            and 10 others
    = note: required for `std::option::Option<i64>` to implement 
`Into<i32>`
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query_as` (in Nightly builds, run with -Z macro-backtrace 
for more info)

error[E0277]: the trait bound `i32: From<i64>` is not satisfied
   --> src\database\operations\canvas.rs:591:18
    |
591 |       let result = sqlx::query_as!(
    |  __________________^
592 | |         CanvasCollaborationSession,
593 | |         r#"
594 | |         SELECT id, canvas_id, session_token, host_user, 
participants,
...   |
601 | |         canvas_id_int
602 | |     )
    | |_____^ the trait `From<i64>` is not implemented for `i32`
    |
    = help: the following other types implement trait `From<T>`:
              `i32` implements `From<bool>`
              `i32` implements `From<deranged::RangedI32<MIN, MAX>>`
              `i32` implements `From<dpi::LogicalUnit<P>>`
              `i32` implements `From<dpi::PhysicalUnit<P>>`
              `i32` implements `From<i16>`
              `i32` implements `From<i8>`
              `i32` implements 
`From<miniz_oxide::deflate::core::CompressionStrategy>`
              `i32` implements `From<notify_rust::timeout::Timeout>`
            and 10 others
    = note: required for `i64` to implement `Into<i32>`
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query_as` (in Nightly builds, run with -Z macro-backtrace 
for more info)

error[E0277]: the trait bound `std::string::String: 
From<std::option::Option<std::string::String>>` is not satisfied
   --> src\database\operations\canvas.rs:591:18
    |
591 |       let result = sqlx::query_as!(
    |  __________________^
592 | |         CanvasCollaborationSession,
593 | |         r#"
594 | |         SELECT id, canvas_id, session_token, host_user, 
participants,
...   |
601 | |         canvas_id_int
602 | |     )
    | |_____^ the trait `From<std::option::Option<std::string::String>>` 
is not implemented for `std::string::String`
    |
    = help: the following other types implement trait `From<T>`:
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements 
`From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<AssetKey>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, str>>`
              `std::string::String` implements `From<Uuid>`
              `std::string::String` implements `From<char>`
            and 8 others
    = note: required for `std::option::Option<std::string::String>` to 
implement `Into<std::string::String>`
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query_as` (in Nightly builds, run with -Z macro-backtrace 
for more info)

error[E0277]: the trait bound `bool: From<std::option::Option<bool>>` is 
not satisfied
   --> src\database\operations\canvas.rs:591:18
    |
591 |       let result = sqlx::query_as!(
    |  __________________^
592 | |         CanvasCollaborationSession,
593 | |         r#"
594 | |         SELECT id, canvas_id, session_token, host_user, 
participants,
...   |
601 | |         canvas_id_int
602 | |     )
    | |_____^ the trait `From<std::option::Option<bool>>` is not 
implemented for `bool`
    |
    = help: the following other types implement trait `From<T>`:
              `bool` implements `From<&windows::Win32::Foundation::BOOL>`
              `bool` implements `From<&windows::Win32::Foundation::BOOL>`
              `bool` implements 
`From<&windows::Win32::Foundation::BOOLEAN>`
              `bool` implements 
`From<&windows::Win32::Foundation::BOOLEAN>`
              `bool` implements 
`From<&windows::Win32::Foundation::VARIANT_BOOL>`
              `bool` implements 
`From<&windows::Win32::Foundation::VARIANT_BOOL>`
              `bool` implements 
`From<&windows::Win32::Foundation::VARIANT_BOOL>`
              `bool` implements `From<&windows_result::bool::BOOL>`
            and 21 others
    = note: required for `std::option::Option<bool>` to implement 
`Into<bool>`
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query_as` (in Nightly builds, run with -Z macro-backtrace 
for more info)

error[E0277]: the trait bound `DateTime<Utc>: 
From<std::option::Option<NaiveDateTime>>` is not satisfied
   --> src\database\operations\canvas.rs:591:18
    |
591 |       let result = sqlx::query_as!(
    |  __________________^
592 | |         CanvasCollaborationSession,
593 | |         r#"
594 | |         SELECT id, canvas_id, session_token, host_user, 
participants,
...   |
601 | |         canvas_id_int
602 | |     )
    | |_____^ the trait `From<std::option::Option<NaiveDateTime>>` is not 
implemented for `DateTime<Utc>`
    |
    = help: the following other types implement trait `From<T>`:
              `DateTime<Utc>` implements `From<DateTime<FixedOffset>>`
              `DateTime<Utc>` implements `From<DateTime<chrono::Local>>`
              `DateTime<Utc>` implements `From<SystemTime>`
    = note: required for `std::option::Option<NaiveDateTime>` to 
implement `Into<DateTime<Utc>>`
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query_as` (in Nightly builds, run with -Z macro-backtrace 
for more info)

error[E0277]: the trait bound `std::option::Option<DateTime<Utc>>: 
From<std::option::Option<NaiveDateTime>>` is not satisfied
   --> src\database\operations\canvas.rs:591:18
    |
591 |       let result = sqlx::query_as!(
    |  __________________^
592 | |         CanvasCollaborationSession,
593 | |         r#"
594 | |         SELECT id, canvas_id, session_token, host_user, 
participants,
...   |
601 | |         canvas_id_int
602 | |     )
    | |_____^ the trait `From<std::option::Option<NaiveDateTime>>` is not 
implemented for `std::option::Option<DateTime<Utc>>`
    |
    = help: the following other types implement trait `From<T>`:
              `std::option::Option<&T>` implements 
`From<&std::option::Option<T>>`
              `std::option::Option<&mut T>` implements `From<&mut 
std::option::Option<T>>`
              
`std::option::Option<&tracing_core::metadata::Metadata<'_>>` implements 
`From<&tracing_core::span::Current>`
              `std::option::Option<&tracing_core::span::Id>` implements 
`From<&tracing::span::EnteredSpan>`
              `std::option::Option<&tracing_core::span::Id>` implements 
`From<&tracing::span::Span>`
              `std::option::Option<&tracing_core::span::Id>` implements 
`From<&tracing_core::span::Current>`
              `std::option::Option<T>` implements `From<T>`
              `std::option::Option<T>` implements 
`From<subtle::CtOption<T>>`
            and 19 others
    = note: required for `std::option::Option<NaiveDateTime>` to 
implement `Into<std::option::Option<DateTime<Utc>>>`
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query_as` (in Nightly builds, run with -Z macro-backtrace 
for more info)

error[E0382]: borrow of moved value: `export_data`
   --> src\database\operations\canvas.rs:676:20
    |
665 |     let export_data = serde_json::json!({
    |         ----------- move occurs because `export_data` has type 
`JsonValue`, which does not implement the `Copy` trait
...
675 |         data: export_data,
    |               ----------- value moved here
676 |         file_size: export_data.to_string().len() as i64,
    |                    ^^^^^^^^^^^ value borrowed here after move
    |
help: consider cloning the value if the performance cost is acceptable
    |
675 |         data: export_data.clone(),
    |                          ++++++++

error[E0716]: temporary value dropped while borrowed
   --> src\database\operations\canvas.rs:708:13
    |
706 | /         sqlx::query!(
707 | |             "UPDATE canvas SET settings = ?, updated_at = ? WHERE 
id = ?",
708 | |             s.to_string(), now, canvas_id
    | |             ^^^^^^^^^^^^^ creates a temporary value which is 
freed while still in use
709 | |         ).execute(pool).await?;
    | |         - ------- borrow later used by call
    | |_________|
    |           temporary value is freed at the end of this statement
    |
    = note: consider using a `let` binding to create a longer lived value

error[E0716]: temporary value dropped while borrowed
   --> src\database\operations\canvas.rs:722:9
    |
720 | /     sqlx::query!(
721 | |         "UPDATE canvas SET is_active = 0, updated_at = ? WHERE id 
= ?",
722 | |         Utc::now(),
    | |         ^^^^^^^^^^ creates a temporary value which is freed while 
still in use
723 | |         canvas_id
724 | |     )
    | |_____- temporary value is freed at the end of this statement
725 |       .execute(pool)
    |        ------- borrow later used by call
    |
    = note: consider using a `let` binding to create a longer lived value

error[E0308]: mismatched types
  --> src\database\optimization\mod.rs:24:9
   |
24 |         index_manager,
   |         ^^^^^^^^^^^^^ expected `IndexManager`, found future

error[E0061]: this method takes 1 argument but 0 arguments were supplied
   --> src\database\optimization\mod.rs:62:28
    |
62  |         self.index_manager.cleanup_unused_indexes().await?;
    |                            ^^^^^^^^^^^^^^^^^^^^^^-- argument #1 of 
type `f64` is missing
    |
note: method defined here
   --> src\database\optimization\index_manager.rs:411:18
    |
411 |     pub async fn cleanup_unused_indexes(&self, 
min_effectiveness_score: f64) -> Result<Vec<String>> {
    |                  ^^^^^^^^^^^^^^^^^^^^^^        
----------------------------
help: provide the argument
    |
62  |         self.index_manager.cleanup_unused_indexes(/* f64 */).await?;
    |                                                   +++++++++

error[E0599]: no variant or associated item named `system` found for enum 
`StoryWeaverError` in the current scope
   --> src\database\optimization\mod.rs:142:58
    |
142 |             .map_err(|e| 
crate::error::StoryWeaverError::system(format!("Failed to serialize cache 
stats: {}", e)))?)
    |                                                          ^^^^^^ 
variant or associated item not found in `StoryWeaverError`
    |
   ::: src\error.rs:11:1
    |
11  | pub enum StoryWeaverError {
    | ------------------------- variant or associated item `system` not 
found for this enum
    |
note: if you're trying to build a new `StoryWeaverError` consider using 
one of the following associated functions:
      StoryWeaverError::database
      StoryWeaverError::file_operation
      StoryWeaverError::ai_provider
      StoryWeaverError::internal
      and 4 others
   --> src\error.rs:211:5
    |
211 |     pub fn database<S: Into<String>>(message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
218 |     pub fn file_operation<S: Into<String>>(operation: S, path: S, 
message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
^^^^^^^^^^^^^^^^^
...
227 |     pub fn ai_provider<S: Into<String>>(provider: S, message: S) -> 
Self {
    |     
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
235 |     pub fn internal<S: Into<String>>(message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0609]: no field `total_entries` on type 
`ai_response_cache::CacheStatistics`
   --> src\database\optimization\mod.rs:168:43
    |
168 |         let entries_before = stats_before.total_entries;
    |                                           ^^^^^^^^^^^^^ unknown 
field
    |
    = note: available fields are: `total_requests`, `cache_hits`, 
`cache_misses`, `similarity_matches`, `exact_matches` ... and 3 others

error[E0599]: no variant or associated item named `system` found for enum 
`StoryWeaverError` in the current scope
   --> src\database\optimization\memory_optimizer.rs:444:44
    |
444 |             .map_err(|e| StoryWeaverError::system(format!("Failed 
to get memory usage: {}", e)))?;
    |                                            ^^^^^^ variant or 
associated item not found in `StoryWeaverError`
    |
   ::: src\error.rs:11:1
    |
11  | pub enum StoryWeaverError {
    | ------------------------- variant or associated item `system` not 
found for this enum
    |
note: if you're trying to build a new `StoryWeaverError` consider using 
one of the following associated functions:
      StoryWeaverError::database
      StoryWeaverError::file_operation
      StoryWeaverError::ai_provider
      StoryWeaverError::internal
      and 4 others
   --> src\error.rs:211:5
    |
211 |     pub fn database<S: Into<String>>(message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
218 |     pub fn file_operation<S: Into<String>>(operation: S, path: S, 
message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
^^^^^^^^^^^^^^^^^
...
227 |     pub fn ai_provider<S: Into<String>>(provider: S, message: S) -> 
Self {
    |     
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
235 |     pub fn internal<S: Into<String>>(message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `system` found for enum 
`StoryWeaverError` in the current scope
   --> src\database\optimization\memory_optimizer.rs:450:48
    |
450 |                 .map_err(|e| 
StoryWeaverError::system(format!("Failed to parse memory usage: {}", 
e)))?;
    |                                                ^^^^^^ variant or 
associated item not found in `StoryWeaverError`
    |
   ::: src\error.rs:11:1
    |
11  | pub enum StoryWeaverError {
    | ------------------------- variant or associated item `system` not 
found for this enum
    |
note: if you're trying to build a new `StoryWeaverError` consider using 
one of the following associated functions:
      StoryWeaverError::database
      StoryWeaverError::file_operation
      StoryWeaverError::ai_provider
      StoryWeaverError::internal
      and 4 others
   --> src\error.rs:211:5
    |
211 |     pub fn database<S: Into<String>>(message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
218 |     pub fn file_operation<S: Into<String>>(operation: S, path: S, 
message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
^^^^^^^^^^^^^^^^^
...
227 |     pub fn ai_provider<S: Into<String>>(provider: S, message: S) -> 
Self {
    |     
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
235 |     pub fn internal<S: Into<String>>(message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `system` found for enum 
`StoryWeaverError` in the current scope
   --> src\database\optimization\memory_optimizer.rs:454:35
    |
454 |             Err(StoryWeaverError::system("Failed to execute memory 
usage command".to_string()))
    |                                   ^^^^^^ variant or associated item 
not found in `StoryWeaverError`
    |
   ::: src\error.rs:11:1
    |
11  | pub enum StoryWeaverError {
    | ------------------------- variant or associated item `system` not 
found for this enum
    |
note: if you're trying to build a new `StoryWeaverError` consider using 
one of the following associated functions:
      StoryWeaverError::database
      StoryWeaverError::file_operation
      StoryWeaverError::ai_provider
      StoryWeaverError::internal
      and 4 others
   --> src\error.rs:211:5
    |
211 |     pub fn database<S: Into<String>>(message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
218 |     pub fn file_operation<S: Into<String>>(operation: S, path: S, 
message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
^^^^^^^^^^^^^^^^^
...
227 |     pub fn ai_provider<S: Into<String>>(provider: S, message: S) -> 
Self {
    |     
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
235 |     pub fn internal<S: Into<String>>(message: S) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0277]: the trait bound `std::string::String: 
From<std::option::Option<std::string::String>>` is not satisfied
   --> src\database\backup.rs:157:23
    |
157 |           let backups = sqlx::query_as!(
    |  _______________________^
158 | |             BackupRecord,
159 | |             r#"SELECT id, filename, created_at, is_auto, comment 
FROM backups ORDER BY created_at DESC"#
160 | |         )
    | |_________^ the trait 
`From<std::option::Option<std::string::String>>` is not implemented for 
`std::string::String`
    |
    = help: the following other types implement trait `From<T>`:
              `std::string::String` implements `From<&mut str>`
              `std::string::String` implements 
`From<&std::string::String>`
              `std::string::String` implements `From<&str>`
              `std::string::String` implements `From<AssetKey>`
              `std::string::String` implements `From<Box<str>>`
              `std::string::String` implements `From<Cow<'_, str>>`
              `std::string::String` implements `From<Uuid>`
              `std::string::String` implements `From<char>`
            and 8 others
    = note: required for `std::option::Option<std::string::String>` to 
implement `Into<std::string::String>`
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query_as` (in Nightly builds, run with -Z macro-backtrace 
for more info)

error[E0277]: the trait bound `DateTime<Utc>: From<NaiveDateTime>` is not 
satisfied
   --> src\database\backup.rs:157:23
    |
157 |           let backups = sqlx::query_as!(
    |  _______________________^
158 | |             BackupRecord,
159 | |             r#"SELECT id, filename, created_at, is_auto, comment 
FROM backups ORDER BY created_at DESC"#
160 | |         )
    | |_________^ the trait `From<NaiveDateTime>` is not implemented for 
`DateTime<Utc>`
    |
    = help: the following other types implement trait `From<T>`:
              `DateTime<Utc>` implements `From<DateTime<FixedOffset>>`
              `DateTime<Utc>` implements `From<DateTime<chrono::Local>>`
              `DateTime<Utc>` implements `From<SystemTime>`
    = note: required for `NaiveDateTime` to implement 
`Into<DateTime<Utc>>`
    = note: this error originates in the macro 
`$crate::sqlx_macros::expand_query` which comes from the expansion of the 
macro `sqlx::query_as` (in Nightly builds, run with -Z macro-backtrace 
for more info)

error[E0596]: cannot borrow `bindings` as mutable, as it is not declared 
as mutable
   --> src\models\ai_card.rs:198:13
    |
198 |         let bindings: Vec<&str> = binding_values.iter().map(|s| 
s.as_str()).collect();
    |             ^^^^^^^^ not mutable
...
205 |         bindings.push(&now);
    |         -------- cannot borrow as mutable
206 |         bindings.push(id);
    |         -------- cannot borrow as mutable
    |
help: consider changing this to be mutable
    |
198 |         let mut bindings: Vec<&str> = binding_values.iter().map(|s| 
s.as_str()).collect();
    |             +++

warning: unused variable: `settings`
  --> src\ai\write_processor.rs:53:9
   |
53 |         settings: &WriteSettings,
   |         ^^^^^^^^ help: if this is intentional, prefix it with an 
underscore: `_settings`

warning: variable does not need to be mutable
   --> src\ai\advanced_ai_manager.rs:245:13
    |
245 |         let mut generated_image = 
self.visualize_engine.generate_image(request).await?;
    |             ----^^^^^^^^^^^^^^^
    |             |
    |             help: remove this `mut`

warning: unused variable: `api_key`
  --> src\security\api_keys.rs:36:61
   |
36 |     pub async fn save_api_key(&self, provider: ApiProvider, api_key: 
&str) -> Result<(), StoryWeaverError> {
   |                                                             ^^^^^^^ 
help: if this is intentional, prefix it with an underscore: `_api_key`

warning: unused variable: `key`
  --> src\security\api_keys.rs:37:13
   |
37 |         let key = match provider {
   |             ^^^ help: if this is intentional, prefix it with an 
underscore: `_key`

warning: unused variable: `key`
  --> src\security\api_keys.rs:57:13
   |
57 |         let key = match provider {
   |             ^^^ help: if this is intentional, prefix it with an 
underscore: `_key`

warning: unused variable: `key`
  --> src\security\api_keys.rs:72:13
   |
72 |         let key = match provider {
   |             ^^^ help: if this is intentional, prefix it with an 
underscore: `_key`

warning: use of deprecated associated function 
`chrono::DateTime::<Tz>::from_utc`: Use TimeZone::from_utc_datetime() or 
DateTime::from_naive_utc_and_offset instead
   --> src\security\audit.rs:180:74
    |
180 |                     created_at: row.created_at.map(|dt| 
DateTime::<Utc>::from_utc(dt, Utc)),
    |                                                                     
     ^^^^^^^^
    |
    = note: `#[warn(deprecated)]` on by default

error[E0308]: mismatched types
    --> src\security\privacy.rs:177:66
     |
177  |             let settings: PrivacySettings = 
serde_json::from_str(&row.value)
     |                                             -------------------- 
^^^^^^^^^^ expected `&str`, found `&Option<String>`
     |                                             |
     |                                             arguments to this 
function are incorrect
     |
     = note: expected reference `&str`
                found reference 
`&std::option::Option<std::string::String>`
note: function defined here
    --> C:\Users\jjgor\.cargo\registry\src\index.crates.io-1949cf8c6b5b557
f\serde_json-1.0.142\src\de.rs:2697:8
     |
2697 | pub fn from_str<'a, T>(s: &'a str) -> Result<T>
     |        ^^^^^^^^

error[E0592]: duplicate definitions with name `cleanup_unused_indexes`
   --> src\database\optimization\index_manager.rs:546:5
    |
411 |     pub async fn cleanup_unused_indexes(&self, 
min_effectiveness_score: f64) -> Result<Vec<String>> {
    |     ----------------------------------------------------------------
------------------------------- other definition for 
`cleanup_unused_indexes`
...
546 |     pub async fn cleanup_unused_indexes(&self) -> Result<()> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 
duplicate definitions for `cleanup_unused_indexes`

error[E0277]: async commands that contain references as inputs must 
return a `Result`
  --> src\commands\story_bible_ai.rs:92:6
   |
92 | ) -> CommandResponse<AIGenerationResponse> {
   |      ^^^^^^^^^^^^^^^ the trait 
`story_bible_ai::_::AsyncCommandMustReturnResult` is not implemented for 
`CommandResponse<AIGenerationResponse>`
   |
   = help: the trait `story_bible_ai::_::AsyncCommandMustReturnResult` is 
implemented for `std::result::Result<A, B>`
   = note: required for the cast from 
`&CommandResponse<AIGenerationResponse>` to `&dyn 
story_bible_ai::_::AsyncCommandMustReturnResult`

error[E0277]: async commands that contain references as inputs must 
return a `Result`
   --> src\commands\story_bible_ai.rs:128:6
    |
128 | ) -> CommandResponse<Vec<String>> {
    |      ^^^^^^^^^^^^^^^ the trait 
`story_bible_ai::_::AsyncCommandMustReturnResult` is not implemented for 
`CommandResponse<Vec<std::string::String>>`
    |
    = help: the trait `story_bible_ai::_::AsyncCommandMustReturnResult` 
is implemented for `std::result::Result<A, B>`
    = note: required for the cast from 
`&CommandResponse<Vec<std::string::String>>` to `&dyn 
story_bible_ai::_::AsyncCommandMustReturnResult`

error[E0277]: async commands that contain references as inputs must 
return a `Result`
   --> src\commands\story_bible_ai.rs:173:6
    |
173 | ) -> CommandResponse<AIGenerationResponse> {
    |      ^^^^^^^^^^^^^^^ the trait 
`story_bible_ai::_::AsyncCommandMustReturnResult` is not implemented for 
`CommandResponse<AIGenerationResponse>`
    |
    = help: the trait `story_bible_ai::_::AsyncCommandMustReturnResult` 
is implemented for `std::result::Result<A, B>`
    = note: required for the cast from 
`&CommandResponse<AIGenerationResponse>` to `&dyn 
story_bible_ai::_::AsyncCommandMustReturnResult`

error[E0277]: async commands that contain references as inputs must 
return a `Result`
   --> src\commands\story_bible_ai.rs:212:6
    |
212 | ) -> CommandResponse<AIGenerationResponse> {
    |      ^^^^^^^^^^^^^^^ the trait 
`story_bible_ai::_::AsyncCommandMustReturnResult` is not implemented for 
`CommandResponse<AIGenerationResponse>`
    |
    = help: the trait `story_bible_ai::_::AsyncCommandMustReturnResult` 
is implemented for `std::result::Result<A, B>`
    = note: required for the cast from 
`&CommandResponse<AIGenerationResponse>` to `&dyn 
story_bible_ai::_::AsyncCommandMustReturnResult`

error[E0277]: async commands that contain references as inputs must 
return a `Result`
   --> src\commands\story_bible_ai.rs:253:6
    |
253 | ) -> CommandResponse<AIGenerationResponse> {
    |      ^^^^^^^^^^^^^^^ the trait 
`story_bible_ai::_::AsyncCommandMustReturnResult` is not implemented for 
`CommandResponse<AIGenerationResponse>`
    |
    = help: the trait `story_bible_ai::_::AsyncCommandMustReturnResult` 
is implemented for `std::result::Result<A, B>`
    = note: required for the cast from 
`&CommandResponse<AIGenerationResponse>` to `&dyn 
story_bible_ai::_::AsyncCommandMustReturnResult`

error[E0277]: async commands that contain references as inputs must 
return a `Result`
   --> src\commands\story_bible_ai.rs:298:6
    |
298 | ) -> CommandResponse<StyleAnalysisResponse> {
    |      ^^^^^^^^^^^^^^^ the trait 
`story_bible_ai::_::AsyncCommandMustReturnResult` is not implemented for 
`CommandResponse<StyleAnalysisResponse>`
    |
    = help: the trait `story_bible_ai::_::AsyncCommandMustReturnResult` 
is implemented for `std::result::Result<A, B>`
    = note: required for the cast from 
`&CommandResponse<StyleAnalysisResponse>` to `&dyn 
story_bible_ai::_::AsyncCommandMustReturnResult`

error[E0277]: async commands that contain references as inputs must 
return a `Result`
   --> src\commands\story_bible_ai.rs:336:6
    |
336 | ) -> CommandResponse<AIGenerationResponse> {
    |      ^^^^^^^^^^^^^^^ the trait 
`story_bible_ai::_::AsyncCommandMustReturnResult` is not implemented for 
`CommandResponse<AIGenerationResponse>`
    |
    = help: the trait `story_bible_ai::_::AsyncCommandMustReturnResult` 
is implemented for `std::result::Result<A, B>`
    = note: required for the cast from 
`&CommandResponse<AIGenerationResponse>` to `&dyn 
story_bible_ai::_::AsyncCommandMustReturnResult`

error[E0277]: async commands that contain references as inputs must 
return a `Result`
  --> src\commands\background_commands.rs:22:6
   |
22 | ) -> CommandResponse<String> {
   |      ^^^^^^^^^^^^^^^ the trait 
`background_commands::_::AsyncCommandMustReturnResult` is not implemented 
for `CommandResponse<std::string::String>`
   |
   = help: the trait 
`background_commands::_::AsyncCommandMustReturnResult` is implemented for 
`std::result::Result<A, B>`
   = note: required for the cast from 
`&CommandResponse<std::string::String>` to `&dyn 
background_commands::_::AsyncCommandMustReturnResult`

error[E0277]: async commands that contain references as inputs must 
return a `Result`
   --> src\commands\background_commands.rs:160:6
    |
160 | ) -> CommandResponse<bool> {
    |      ^^^^^^^^^^^^^^^ the trait 
`background_commands::_::AsyncCommandMustReturnResult` is not implemented 
for `CommandResponse<bool>`
    |
    = help: the trait 
`background_commands::_::AsyncCommandMustReturnResult` is implemented for 
`std::result::Result<A, B>`
    = note: required for the cast from `&CommandResponse<bool>` to `&dyn 
background_commands::_::AsyncCommandMustReturnResult`

error[E0308]: mismatched types
   --> src\commands\optimization_commands.rs:259:32
    |
259 |     if stats.memory_usage_mb > 512 {
    |        ---------------------   ^^^ expected `f64`, found integer
    |        |
    |        expected because this is `f64`
    |
help: use a float literal
    |
259 |     if stats.memory_usage_mb > 512.0 {
    |                                   ++

error[E0308]: mismatched types
   --> src\commands\optimization_commands.rs:294:32
    |
294 |     if stats.memory_usage_mb > 256 {
    |        ---------------------   ^^^ expected `f64`, found integer
    |        |
    |        expected because this is `f64`
    |
help: use a float literal
    |
294 |     if stats.memory_usage_mb > 256.0 {
    |                                   ++

error[E0277]: cannot subtract `{integer}` from `f64`
   --> src\commands\optimization_commands.rs:295:42
    |
295 |         score -= ((stats.memory_usage_mb - 256) as f64) * 0.1;
    |                                          ^ no implementation for 
`f64 - {integer}`
    |
    = help: the trait `Sub<{integer}>` is not implemented for `f64`
    = help: the following other types implement trait `Sub<Rhs>`:
              `&f64` implements `Sub<f64>`
              `&f64` implements `Sub`
              `f64` implements `Sub<&f64>`
              `f64` implements `Sub<zerocopy::byteorder::F64<O>>`
              `f64` implements `Sub`
help: consider using a floating-point literal by writing it with `.0`
    |
295 |         score -= ((stats.memory_usage_mb - 256.0) as f64) * 0.1;
    |                                               ++

warning: unused import: `Row`
 --> src\database\operations\ai_provider_ops.rs:5:26
  |
5 | use sqlx::{Pool, Sqlite, Row};
  |                          ^^^

warning: unused import: `Row`
 --> src\database\operations\ai_model_configuration_ops.rs:5:26
  |
5 | use sqlx::{Pool, Sqlite, Row};
  |                          ^^^

warning: unused import: `Row`
 --> src\database\operations\prose_mode_ops.rs:5:26
  |
5 | use sqlx::{Pool, Sqlite, Row};
  |                          ^^^

warning: unused import: `Row`
 --> src\database\operations\collaboration.rs:5:12
  |
5 | use sqlx::{Row, SqlitePool};
  |            ^^^

warning: unused import: `AIProvider`
 --> src\background\ai_processor.rs:4:28
  |
4 | use crate::ai::{AIContext, AIProvider, AIProviderManager};
  |                            ^^^^^^^^^^

warning: unused import: `Manager`
 --> src\security\api_keys.rs:9:24
  |
9 | use tauri::{AppHandle, Manager};
  |                        ^^^^^^^

error[E0004]: non-exhaustive patterns: 
`&database::models::plugin::PluginCategory::TextProcessing`, 
`&database::models::plugin::PluginCategory::AIIntegration`, 
`&database::models::plugin::PluginCategory::Export` and 4 more not covered
   --> src\database\models\plugin.rs:253:15
    |
253 |         match self {
    |               ^^^^ patterns 
`&database::models::plugin::PluginCategory::TextProcessing`, 
`&database::models::plugin::PluginCategory::AIIntegration`, 
`&database::models::plugin::PluginCategory::Export` and 4 more not covered
    |
note: `database::models::plugin::PluginCategory` defined here
   --> src\database\models\plugin.rs:63:10
    |
63  | pub enum PluginCategory {
    |          ^^^^^^^^^^^^^^
...
77  |     TextProcessing,
    |     -------------- not covered
78  |     #[sqlx(rename = "ai_integration")]
79  |     AIIntegration,
    |     ------------- not covered
80  |     #[sqlx(rename = "export")]
81  |     Export,
    |     ------ not covered
82  |     #[sqlx(rename = "import")]
83  |     Import,
    |     ------ not covered
84  |     #[sqlx(rename = "theme")]
85  |     Theme,
    |     ----- not covered
    = note: the matched value is of type 
`&database::models::plugin::PluginCategory`
help: ensure that all possible cases are being handled by adding a match 
arm with a wildcard pattern as shown, or multiple match arms
    |
260 ~             PluginCategory::Other => write!(f, "other"),
261 ~             _ => todo!(),
    |

error[E0004]: non-exhaustive patterns: 
`&database::models::plugin::PluginVisibility::Public` not covered
   --> src\database\models\plugin.rs:267:15
    |
267 |         match self {
    |               ^^^^ pattern 
`&database::models::plugin::PluginVisibility::Public` not covered
    |
note: `database::models::plugin::PluginVisibility` defined here
   --> src\database\models\plugin.rs:157:10
    |
157 | pub enum PluginVisibility {
    |          ^^^^^^^^^^^^^^^^
...
161 |     Public,
    |     ------ not covered
    = note: the matched value is of type 
`&database::models::plugin::PluginVisibility`
help: ensure that all possible cases are being handled by adding a match 
arm with a wildcard pattern or an explicit pattern as shown
    |
270 ~             PluginVisibility::Private => write!(f, "private"),
271 ~             &database::models::plugin::PluginVisibility::Public => 
todo!(),
    |

error[E0502]: cannot borrow `*self` as immutable because it is also 
borrowed as mutable
   --> src\database\optimization\index_manager.rs:397:41
    |
394 |         if let Some(stats) = 
self.index_usage_stats.get_mut(index_name) {
    |                              ---------------------- mutable borrow 
occurs here
...
397 |             stats.effectiveness_score = 
self.calculate_effectiveness_score(stats);
    |                                         ^^^^ immutable borrow 
occurs here  ----- mutable borrow later used here

warning: unused variable: `context`
   --> src\ai\openai.rs:145:36
    |
145 |     fn build_system_message(&self, context: &AIContext) -> 
ChatMessage {
    |                                    ^^^^^^^ help: if this is 
intentional, prefix it with an underscore: `_context`

warning: unused variable: `context`
   --> src\ai\claude.rs:126:36
    |
126 |     fn build_system_message(&self, context: &AIContext) -> String {
    |                                    ^^^^^^^ help: if this is 
intentional, prefix it with an underscore: `_context`

warning: unused variable: `text`
   --> src\ai\claude.rs:375:40
    |
375 |     async fn generate_embedding(&self, text: &str) -> 
Result<Vec<f32>> {
    |                                        ^^^^ help: if this is 
intentional, prefix it with an underscore: `_text`

warning: unused variable: `text`
   --> src\ai\gemini.rs:398:40
    |
398 |     async fn generate_embedding(&self, text: &str) -> 
Result<Vec<f32>> {
    |                                        ^^^^ help: if this is 
intentional, prefix it with an underscore: `_text`

warning: unused variable: `text_lower`
   --> src\ai\visualize.rs:111:13
    |
111 |         let text_lower = text.to_lowercase();
    |             ^^^^^^^^^^ help: if this is intentional, prefix it with 
an underscore: `_text_lower`

warning: unused variable: `base_prompt`
   --> src\ai\brainstorm.rs:207:5
    |
207 | let base_prompt = self.build_generation_prompt(request)?;
    |     ^^^^^^^^^^^ help: if this is intentional, prefix it with an 
underscore: `_base_prompt`

Some errors have detailed explanations: E0004, E0061, E0107, E0277, 
E0308, E0382, E0412, E0422, E0425...
For more information about an error, try `rustc --explain E0004`.
warning: `storyweaver` (lib) generated 128 warnings
error: could not compile `storyweaver` (lib) due to 563 previous errors; 
128 warnings emitted
